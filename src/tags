!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
APPINFO_H	AppInfo.h	20;"	d
ARROW_ANGLE	Const.h	30;"	d
ARROW_LENGTH	Const.h	31;"	d
AddState	Undo.h	/^enum UndoAction {AddState, AddTransition, ChangeState, ChangeTransition,$/;"	e	enum:UndoAction
AddTransition	Undo.h	/^enum UndoAction {AddState, AddTransition, ChangeState, ChangeTransition,$/;"	e	enum:UndoAction
AppInfo	AppInfo.cpp	/^AppInfo::AppInfo(QWidget* par)$/;"	f	class:AppInfo
AppInfo	AppInfo.h	/^class AppInfo : public QObject$/;"	c
Ascii	TransitionInfo.h	/^enum TransitionType {Binary, Ascii, Text};$/;"	e	enum:TransitionType
Binary	TransitionInfo.h	/^enum TransitionType {Binary, Ascii, Text};$/;"	e	enum:TransitionType
Busy	SimulatorDlgImpl.h	/^    enum simstate {Off, Busy, Finished};$/;"	e	enum:SimulatorDlgImpl::simstate
ButtonGroup1	SimulatorDlg.h	/^    QButtonGroup* ButtonGroup1;$/;"	m	class:SimulatorDlg
ButtonGroup11	ICheckDlg.h	/^    QButtonGroup* ButtonGroup11;$/;"	m	class:ICheckDlg
ButtonGroup11Layout	ICheckDlg.h	/^    QHBoxLayout* ButtonGroup11Layout;$/;"	m	class:ICheckDlg
ButtonGroup1Layout	SimulatorDlg.h	/^    QHBoxLayout* ButtonGroup1Layout;$/;"	m	class:SimulatorDlg
ButtonGroup2	SimulatorDlg.h	/^    QButtonGroup* ButtonGroup2;$/;"	m	class:SimulatorDlg
ButtonGroup2Layout	SimulatorDlg.h	/^    QHBoxLayout* ButtonGroup2Layout;$/;"	m	class:SimulatorDlg
CANVAS_MARGIN	Const.h	36;"	d
CANVAS_MINX	Const.h	37;"	d
CANVAS_MINY	Const.h	38;"	d
CONT_HEIGHT	Const.h	20;"	d
CONT_WIDTH	Const.h	19;"	d
CONVERT_H	Convert.h	20;"	d
CPOINT_SIZE	Const.h	28;"	d
ChangeInitialTransition	Undo.h	/^		 ChangeInitialTransition, SetInitialState, SetEndStates,$/;"	e	enum:UndoAction
ChangeMachine	Undo.h	/^		 ChangeMachine, Paste};$/;"	e	enum:UndoAction
ChangeState	Undo.h	/^enum UndoAction {AddState, AddTransition, ChangeState, ChangeTransition,$/;"	e	enum:UndoAction
ChangeTransition	Undo.h	/^enum UndoAction {AddState, AddTransition, ChangeState, ChangeTransition,$/;"	e	enum:UndoAction
ChangeTransitions	Undo.h	/^		 ChangeTransitions, MoveMultiple, $/;"	e	enum:UndoAction
Convert	Convert.cpp	/^Convert::Convert()$/;"	f	class:Convert
Convert	Convert.h	/^class Convert$/;"	c
DOCSTATUS_H	DocStatus.h	20;"	d
DRAW_H	Draw.h	20;"	d
DRECT_H	DRect.h	20;"	d
DRect	DRect.cpp	/^DRect::DRect()$/;"	f	class:DRect
DRect	DRect.cpp	/^DRect::DRect(double dx1, double dy1, double dx2, double dy2)$/;"	f	class:DRect
DRect	DRect.h	/^class DRect$/;"	c
DeleteSelection	Undo.h	/^		 DeleteSelection, DeleteState, DeleteTransition,$/;"	e	enum:UndoAction
DeleteState	Undo.h	/^		 DeleteSelection, DeleteState, DeleteTransition,$/;"	e	enum:UndoAction
DeleteTransition	Undo.h	/^		 DeleteSelection, DeleteState, DeleteTransition,$/;"	e	enum:UndoAction
DialogMode	StatePropertiesDlgImpl.h	/^    enum DialogMode { StateAdd, StateEdit };$/;"	g	class:StatePropertiesDlgImpl
DocStatus	DocStatus.cpp	/^DocStatus::DocStatus()$/;"	f	class:DocStatus
DocStatus	DocStatus.h	/^class DocStatus$/;"	c
Draw	Draw.cpp	/^Draw::Draw(QObject* parent, Options* opt)$/;"	f	class:Draw
Draw	Draw.h	/^class Draw : public QObject$/;"	c
EDIT_H	Edit.h	20;"	d
ERROR_H	Error.h	20;"	d
EXPORTAHDLDLGIMPL_H	ExportAHDLDlgImpl.h	20;"	d
EXPORTAHDLDLG_H	ExportAHDLDlg.h	11;"	d
EXPORTAHDL_H	ExportAHDL.h	20;"	d
EXPORTKISS_H	ExportKISS.h	20;"	d
EXPORTRAGELDLGIMPL_H	ExportRagelDlgImpl.h	2;"	d
EXPORTRAGELDLG_H	ExportRagelDlg.h	11;"	d
EXPORTRAGEL_H	ExportRagel.h	20;"	d
EXPORTSTATETABLEDLGIMPL_H	ExportStateTableDlgImpl.h	2;"	d
EXPORTSTATETABLEDLG_H	ExportStateTableDlg.h	11;"	d
EXPORTSTATETABLE_H	ExportStateTable.h	20;"	d
EXPORTVERILOGDLGIMPL_H	ExportVerilogDlgImpl.h	20;"	d
EXPORTVERILOGDLG_H	ExportVerilogDlg.h	11;"	d
EXPORTVERILOG_H	ExportVerilog.h	20;"	d
EXPORTVHDLDLGIMPL_H	ExportVHDLDlgImpl.h	20;"	d
EXPORTVHDLDLG_H	ExportVHDLDlg.h	11;"	d
EXPORTVHDL_H	ExportVHDL.h	20;"	d
EXPORT_H	Export.h	20;"	d
Edit	Edit.cpp	/^Edit::Edit(QWidget* parent, const char* name)$/;"	f	class:Edit
Edit	Edit.h	/^class Edit : public QObject$/;"	c
Error	Error.cpp	/^Error::Error()$/;"	f	class:Error
Error	Error.h	/^class Error {$/;"	c
Export	Export.cpp	/^Export::Export(Options* opt) $/;"	f	class:Export
Export	Export.h	/^class Export$/;"	c
ExportAHDL	ExportAHDL.cpp	/^ExportAHDL::ExportAHDL(Options* opt)$/;"	f	class:ExportAHDL
ExportAHDL	ExportAHDL.h	/^class ExportAHDL : public Export$/;"	c
ExportAHDLDlg	ExportAHDLDlg.cpp	/^ExportAHDLDlg::ExportAHDLDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ExportAHDLDlg
ExportAHDLDlg	ExportAHDLDlg.h	/^class ExportAHDLDlg : public QDialog$/;"	c
ExportAHDLDlgImpl	ExportAHDLDlgImpl.cpp	/^ExportAHDLDlgImpl::ExportAHDLDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ExportAHDLDlgImpl
ExportAHDLDlgImpl	ExportAHDLDlgImpl.h	/^class ExportAHDLDlgImpl : public ExportAHDLDlg$/;"	c
ExportAHDLDlgLayout	ExportAHDLDlg.h	/^    QVBoxLayout* ExportAHDLDlgLayout;$/;"	m	class:ExportAHDLDlg
ExportKISS	ExportKISS.cpp	/^ExportKISS::ExportKISS(Options* opt)$/;"	f	class:ExportKISS
ExportKISS	ExportKISS.h	/^class ExportKISS : public Export$/;"	c
ExportRagel	ExportRagel.cpp	/^ExportRagel::ExportRagel(Options* opt)$/;"	f	class:ExportRagel
ExportRagel	ExportRagel.h	/^class ExportRagel : public Export$/;"	c
ExportRagelDlg	ExportRagelDlg.cpp	/^ExportRagelDlg::ExportRagelDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ExportRagelDlg
ExportRagelDlg	ExportRagelDlg.h	/^class ExportRagelDlg : public QDialog$/;"	c
ExportRagelDlgImpl	ExportRagelDlgImpl.cpp	/^ExportRagelDlgImpl::ExportRagelDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ExportRagelDlgImpl
ExportRagelDlgImpl	ExportRagelDlgImpl.h	/^class ExportRagelDlgImpl : public ExportRagelDlg$/;"	c
ExportRagelDlgLayout	ExportRagelDlg.h	/^    QVBoxLayout* ExportRagelDlgLayout;$/;"	m	class:ExportRagelDlg
ExportStateTable	ExportStateTable.cpp	/^ExportStateTable::ExportStateTable(Options* opt, TableBuilder* tb)$/;"	f	class:ExportStateTable
ExportStateTable	ExportStateTable.h	/^class ExportStateTable : public Export$/;"	c
ExportStateTableDlg	ExportStateTableDlg.cpp	/^ExportStateTableDlg::ExportStateTableDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ExportStateTableDlg
ExportStateTableDlg	ExportStateTableDlg.h	/^class ExportStateTableDlg : public QDialog$/;"	c
ExportStateTableDlgImpl	ExportStateTableDlgImpl.cpp	/^ExportStateTableDlgImpl::ExportStateTableDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ExportStateTableDlgImpl
ExportStateTableDlgImpl	ExportStateTableDlgImpl.h	/^class ExportStateTableDlgImpl : public ExportStateTableDlg$/;"	c
ExportStateTableDlgLayout	ExportStateTableDlg.h	/^    QVBoxLayout* ExportStateTableDlgLayout;$/;"	m	class:ExportStateTableDlg
ExportVHDL	ExportVHDL.cpp	/^ExportVHDL::ExportVHDL(Options* opt)$/;"	f	class:ExportVHDL
ExportVHDL	ExportVHDL.h	/^class ExportVHDL : public Export$/;"	c
ExportVHDLDlg	ExportVHDLDlg.cpp	/^ExportVHDLDlg::ExportVHDLDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ExportVHDLDlg
ExportVHDLDlg	ExportVHDLDlg.h	/^class ExportVHDLDlg : public QDialog$/;"	c
ExportVHDLDlgImpl	ExportVHDLDlgImpl.cpp	/^ExportVHDLDlgImpl::ExportVHDLDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ExportVHDLDlgImpl
ExportVHDLDlgImpl	ExportVHDLDlgImpl.h	/^class ExportVHDLDlgImpl : public ExportVHDLDlg$/;"	c
ExportVHDLDlgLayout	ExportVHDLDlg.h	/^    QVBoxLayout* ExportVHDLDlgLayout;$/;"	m	class:ExportVHDLDlg
ExportVerilog	ExportVerilog.cpp	/^ExportVerilog::ExportVerilog(Options* opt)$/;"	f	class:ExportVerilog
ExportVerilog	ExportVerilog.h	/^class ExportVerilog : public Export$/;"	c
ExportVerilogDlg	ExportVerilogDlg.cpp	/^ExportVerilogDlg::ExportVerilogDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ExportVerilogDlg
ExportVerilogDlg	ExportVerilogDlg.h	/^class ExportVerilogDlg : public QDialog$/;"	c
ExportVerilogDlgImpl	ExportVerilogDlgImpl.cpp	/^ExportVerilogDlgImpl::ExportVerilogDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ExportVerilogDlgImpl
ExportVerilogDlgImpl	ExportVerilogDlgImpl.h	/^class ExportVerilogDlgImpl : public ExportVerilogDlg$/;"	c
ExportVerilogDlgLayout	ExportVerilogDlg.h	/^    QVBoxLayout* ExportVerilogDlgLayout;$/;"	m	class:ExportVerilogDlg
FILEIO_H	FileIO.h	20;"	d
FileIO	FileIO.cpp	/^FileIO::FileIO(QWidget* parent)$/;"	f	class:FileIO
FileIO	FileIO.h	/^class FileIO : public QObject$/;"	c
Finished	SimulatorDlgImpl.h	/^    enum simstate {Off, Busy, Finished};$/;"	e	enum:SimulatorDlgImpl::simstate
GITRANSITION_H	GITransition.h	20;"	d
GITransition	GITransition.cpp	/^GITransition::GITransition()$/;"	f	class:GITransition
GITransition	GITransition.cpp	/^GITransition::GITransition(State* s, GState* e)$/;"	f	class:GITransition
GITransition	GITransition.h	/^class GITransition : public GObject, public Transition$/;"	c
GOBJECT_H	GObject.h	20;"	d
GObject	GObject.cpp	/^GObject::GObject(double x, double y) \/\/, QObject* par\/*=0*\/, const char* nam\/*=0*\/)$/;"	f	class:GObject
GObject	GObject.h	/^class GObject \/\/: public QObject$/;"	c
GRID_H	Grid.h	20;"	d
GSTATE_H	GState.h	20;"	d
GState	GState.cpp	/^GState::GState() : QObject(), State(), GObject(0,0)$/;"	f	class:GState
GState	GState.cpp	/^GState::GState(Machine* m) : QObject(), State(m), GObject(0,0)$/;"	f	class:GState
GState	GState.cpp	/^GState::GState(Machine* m, const QString n, QString d, int c, IOInfo* moore, double x, $/;"	f	class:GState
GState	GState.h	/^class GState : public QObject, public State, public GObject$/;"	c
GTRANSITION_H	GTransition.h	20;"	d
GTransition	GTransition.cpp	/^GTransition::GTransition()$/;"	f	class:GTransition
GTransition	GTransition.cpp	/^GTransition::GTransition(State* s, State* e, TransitionInfo* i,$/;"	f	class:GTransition
GTransition	GTransition.h	/^class GTransition : public GObject, public Transition$/;"	c
Grid	Grid.cpp	/^Grid::Grid(Options* opt)$/;"	f	class:Grid
Grid	Grid.h	/^class Grid$/;"	c
GroupBox17	OptDisplayDlg.h	/^    QGroupBox* GroupBox17;$/;"	m	class:OptDisplayDlg
GroupBox17Layout	OptDisplayDlg.h	/^    QVBoxLayout* GroupBox17Layout;$/;"	m	class:OptDisplayDlg
GroupBox3	SimulatorDlg.h	/^    QGroupBox* GroupBox3;$/;"	m	class:SimulatorDlg
GroupBox3Layout	SimulatorDlg.h	/^    QVBoxLayout* GroupBox3Layout;$/;"	m	class:SimulatorDlg
GroupBox4	SimulatorDlg.h	/^    QGroupBox* GroupBox4;$/;"	m	class:SimulatorDlg
GroupBox4Layout	SimulatorDlg.h	/^    QVBoxLayout* GroupBox4Layout;$/;"	m	class:SimulatorDlg
ICHECKDLGIMPL_H	ICheckDlgImpl.h	20;"	d
ICHECKDLG_H	ICheckDlg.h	11;"	d
ICHECK_H	ICheck.h	20;"	d
ICheck	ICheck.cpp	/^ICheck::ICheck(QWidget* m)$/;"	f	class:ICheck
ICheck	ICheck.h	/^class ICheck$/;"	c
ICheckDlg	ICheckDlg.cpp	/^ICheckDlg::ICheckDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:ICheckDlg
ICheckDlg	ICheckDlg.h	/^class ICheckDlg : public QDialog$/;"	c
ICheckDlgImpl	ICheckDlgImpl.cpp	/^ICheckDlgImpl::ICheckDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:ICheckDlgImpl
ICheckDlgImpl	ICheckDlgImpl.h	/^class ICheckDlgImpl : public ICheckDlg$/;"	c
ICheckDlgLayout	ICheckDlg.h	/^    QVBoxLayout* ICheckDlgLayout;$/;"	m	class:ICheckDlg
IOINFOASCII_H	IOInfoASCII.h	20;"	d
IOINFOBIN_H	IOInfoBin.h	20;"	d
IOINFOLIST_H	IOInfoList.h	20;"	d
IOINFOTEXT_H	IOInfoText.h	20;"	d
IOINFO_H	IOInfo.h	20;"	d
IOInfo	IOInfo.cpp	/^IOInfo::IOInfo(IOType t, bool inv\/*=FALSE*\/)$/;"	f	class:IOInfo
IOInfo	IOInfo.h	/^class IOInfo$/;"	c
IOInfoASCII	IOInfoASCII.cpp	/^IOInfoASCII::IOInfoASCII(IOType t)$/;"	f	class:IOInfoASCII
IOInfoASCII	IOInfoASCII.cpp	/^IOInfoASCII::IOInfoASCII(IOType t, QString i)$/;"	f	class:IOInfoASCII
IOInfoASCII	IOInfoASCII.cpp	/^IOInfoASCII::IOInfoASCII(IOType t, unsigned char i)$/;"	f	class:IOInfoASCII
IOInfoASCII	IOInfoASCII.h	/^class IOInfoASCII : public IOInfo$/;"	c
IOInfoBin	IOInfoBin.cpp	/^IOInfoBin::IOInfoBin(IOType t, bool inv\/*=FALSE*\/)$/;"	f	class:IOInfoBin
IOInfoBin	IOInfoBin.cpp	/^IOInfoBin::IOInfoBin(IOType t, char* io, bool inv\/*=FALSE*\/)$/;"	f	class:IOInfoBin
IOInfoBin	IOInfoBin.cpp	/^IOInfoBin::IOInfoBin(IOType t, int code, int len, bool inv\/*=FALSE*\/)$/;"	f	class:IOInfoBin
IOInfoBin	IOInfoBin.cpp	/^IOInfoBin::IOInfoBin(const IOInfoBin& io)$/;"	f	class:IOInfoBin
IOInfoBin	IOInfoBin.h	/^class IOInfoBin : public IOInfo$/;"	c
IOInfoList	IOInfoList.h	/^class IOInfoList : public QPtrList<IOInfo>$/;"	c
IOInfoText	IOInfoText.cpp	/^IOInfoText::IOInfoText(IOType t)$/;"	f	class:IOInfoText
IOInfoText	IOInfoText.cpp	/^IOInfoText::IOInfoText(IOType t, QString i)$/;"	f	class:IOInfoText
IOInfoText	IOInfoText.cpp	/^IOInfoText::IOInfoText(IOType t, unsigned char i)$/;"	f	class:IOInfoText
IOInfoText	IOInfoText.h	/^class IOInfoText : public IOInfo$/;"	c
IOType	IOInfo.h	/^enum IOType { IO_None, IO_MealyIn, IO_MealyOut, IO_MooreOut };$/;"	g
IO_MealyIn	IOInfo.h	/^enum IOType { IO_None, IO_MealyIn, IO_MealyOut, IO_MooreOut };$/;"	e	enum:IOType
IO_MealyOut	IOInfo.h	/^enum IOType { IO_None, IO_MealyIn, IO_MealyOut, IO_MooreOut };$/;"	e	enum:IOType
IO_MooreOut	IOInfo.h	/^enum IOType { IO_None, IO_MealyIn, IO_MealyOut, IO_MooreOut };$/;"	e	enum:IOType
IO_None	IOInfo.h	/^enum IOType { IO_None, IO_MealyIn, IO_MealyOut, IO_MooreOut };$/;"	e	enum:IOType
ITRANS_DEFAULT_LENGTH	Const.h	34;"	d
ITransitionT	Machine.h	/^enum ObjectType {NoT, StateT, TransitionT, ITransitionT};$/;"	e	enum:ObjectType
LBArrowFilled	ListBoxItems.cpp	/^LBArrowFilled::LBArrowFilled(QListBox* lb)$/;"	f	class:LBArrowFilled
LBArrowFilled	ListBoxItems.h	/^class LBArrowFilled : public QListBoxItem$/;"	c
LBArrowFilledPointed	ListBoxItems.cpp	/^LBArrowFilledPointed::LBArrowFilledPointed(QListBox* lb)$/;"	f	class:LBArrowFilledPointed
LBArrowFilledPointed	ListBoxItems.h	/^class LBArrowFilledPointed : public QListBoxItem$/;"	c
LBArrowLine	ListBoxItems.cpp	/^LBArrowLine::LBArrowLine(QListBox* lb)$/;"	f	class:LBArrowLine
LBArrowLine	ListBoxItems.h	/^class LBArrowLine : public QListBoxItem$/;"	c
LBArrowWhite	ListBoxItems.cpp	/^LBArrowWhite::LBArrowWhite(QListBox* lb)$/;"	f	class:LBArrowWhite
LBArrowWhite	ListBoxItems.h	/^class LBArrowWhite : public QListBoxItem$/;"	c
LBArrowWhitePointed	ListBoxItems.cpp	/^LBArrowWhitePointed::LBArrowWhitePointed(QListBox* lb)$/;"	f	class:LBArrowWhitePointed
LBArrowWhitePointed	ListBoxItems.h	/^class LBArrowWhitePointed : public QListBoxItem$/;"	c
LISTBOXITEMS_H	ListBoxItems.h	20;"	d
Layout12	MachinePropertiesDlg.h	/^    QHBoxLayout* Layout12;$/;"	m	class:MachinePropertiesDlg
Layout13	OptGeneralDlg.h	/^    QHBoxLayout* Layout13;$/;"	m	class:OptGeneralDlg
Layout18	SimulatorDlg.h	/^    QHBoxLayout* Layout18;$/;"	m	class:SimulatorDlg
Layout20	SimulatorDlg.h	/^    QHBoxLayout* Layout20;$/;"	m	class:SimulatorDlg
Layout23	SimulatorDlg.h	/^    QHBoxLayout* Layout23;$/;"	m	class:SimulatorDlg
Layout24	SimulatorDlg.h	/^    QHBoxLayout* Layout24;$/;"	m	class:SimulatorDlg
Layout27	SimulatorDlg.h	/^    QHBoxLayout* Layout27;$/;"	m	class:SimulatorDlg
Layout3	OptGeneralDlg.h	/^    QVBoxLayout* Layout3;$/;"	m	class:OptGeneralDlg
Layout3	SimulatorDlg.h	/^    QHBoxLayout* Layout3;$/;"	m	class:SimulatorDlg
Layout3	StatePropertiesDlg.h	/^    QHBoxLayout* Layout3;$/;"	m	class:StatePropertiesDlg
Layout4	ICheckDlg.h	/^    QGridLayout* Layout4;$/;"	m	class:ICheckDlg
Layout5	MachinePropertiesDlg.h	/^    QHBoxLayout* Layout5;$/;"	m	class:MachinePropertiesDlg
Layout8	MachinePropertiesDlg.h	/^    QHBoxLayout* Layout8;$/;"	m	class:MachinePropertiesDlg
Layout8	SimulatorDlg.h	/^    QHBoxLayout* Layout8;$/;"	m	class:SimulatorDlg
Layout8	TransitionPropertiesDlg.h	/^    QHBoxLayout* Layout8;$/;"	m	class:TransitionPropertiesDlg
Layout9	ICheckDlg.h	/^    QHBoxLayout* Layout9;$/;"	m	class:ICheckDlg
Layout9	MachinePropertiesDlg.h	/^    QGridLayout* Layout9;$/;"	m	class:MachinePropertiesDlg
MACHINEMANAGER_H	MachineManager.h	20;"	d
MACHINEPROPERTIESDLG_H	MachinePropertiesDlg.h	11;"	d
MACHINEPROPERTIESDLHIMPL_H	MachinePropertiesDlgImpl.h	20;"	d
MACHINE_H	Machine.h	20;"	d
MAINCONTROL_H	MainControl.h	20;"	d
MAINWINDOW_H	MainWindow.h	20;"	d
MAX_ASCII_INPUTLENGTH	Const.h	42;"	d
MAX_ASCII_OUTPUTLENGTH	Const.h	43;"	d
MAX_CHARARRAY_LENGTH	Const.h	46;"	d
MAX_MRUENTRIES	Const.h	40;"	d
MAX_TEXT_INPUTLENGTH	Const.h	44;"	d
MAX_TEXT_OUTPUTLENGTH	Const.h	45;"	d
MAX_ZOOM	Const.h	23;"	d
MIMEMACHINE_H	MimeMachine.h	20;"	d
MIN_ZOOM	Const.h	24;"	d
Machine	Machine.cpp	/^Machine::Machine(QObject* parent, const QString n, QString v, int t, int nb, QString onamesm, int ni,  		 QString inames, int no, QString onames, QFont sf, QFont tf, int atype)$/;"	f	class:Machine
Machine	Machine.cpp	/^Machine::Machine(QObject* parent\/*=NULL*\/, const char* n\/*=0*\/)$/;"	f	class:Machine
Machine	Machine.h	/^class Machine : public QObject$/;"	c
MachineManager	MachineManager.cpp	/^MachineManager::MachineManager(QObject* parent, const char* name)$/;"	f	class:MachineManager
MachineManager	MachineManager.h	/^class MachineManager : public QObject$/;"	c
MachinePropertiesDlg	MachinePropertiesDlg.cpp	/^MachinePropertiesDlg::MachinePropertiesDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:MachinePropertiesDlg
MachinePropertiesDlg	MachinePropertiesDlg.h	/^class MachinePropertiesDlg : public QDialog$/;"	c
MachinePropertiesDlgImpl	MachinePropertiesDlgImpl.cpp	/^MachinePropertiesDlgImpl::MachinePropertiesDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:MachinePropertiesDlgImpl
MachinePropertiesDlgImpl	MachinePropertiesDlgImpl.h	/^class MachinePropertiesDlgImpl : public MachinePropertiesDlg$/;"	c
MachinePropertiesDlgLayout	MachinePropertiesDlg.h	/^    QVBoxLayout* MachinePropertiesDlgLayout;$/;"	m	class:MachinePropertiesDlg
MainControl	MainControl.cpp	/^MainControl::MainControl(QString lang)$/;"	f	class:MainControl
MainControl	MainControl.h	/^class MainControl : public QObject$/;"	c
MainWindow	MainWindow.cpp	/^MainWindow::MainWindow(QObject* parent , const char* name )$/;"	f	class:MainWindow
MainWindow	MainWindow.h	/^class MainWindow : public QMainWindow$/;"	c
MimeMachine	MimeMachine.cpp	/^MimeMachine::MimeMachine(const QString& str)$/;"	f	class:MimeMachine
MimeMachine	MimeMachine.h	/^class MimeMachine : public QTextDrag$/;"	c
Mode	DocStatus.h	/^    enum Mode {$/;"	g	class:DocStatus
MoveMultiple	Undo.h	/^		 ChangeTransitions, MoveMultiple, $/;"	e	enum:UndoAction
NewState	DocStatus.h	/^      NewState, 	\/\/\/< Add new states$/;"	e	enum:DocStatus::Mode
NewTransition	DocStatus.h	/^      NewTransition, 	\/\/\/< Add new transitions$/;"	e	enum:DocStatus::Mode
NoT	Machine.h	/^enum ObjectType {NoT, StateT, TransitionT, ITransitionT};$/;"	e	enum:ObjectType
OPTDISPLAYDLGIMPL_H	OptDisplayDlgImpl.h	20;"	d
OPTDISPLAYDLG_H	OptDisplayDlg.h	11;"	d
OPTGENERALDLGIMPL_H	OptGeneralDlgImpl.h	20;"	d
OPTGENERALDLG_H	OptGeneralDlg.h	11;"	d
OPTGENERAL_H	OptGeneral.h	20;"	d
OPTIONS_H	Options.h	20;"	d
OPTPRINTINGDLGIMPL_H	OptPrintingDlgImpl.h	2;"	d
OPTPRINTINGDLG_H	OptPrintingDlg.h	11;"	d
ObjectType	Machine.h	/^enum ObjectType {NoT, StateT, TransitionT, ITransitionT};$/;"	g
Off	SimulatorDlgImpl.h	/^    enum simstate {Off, Busy, Finished};$/;"	e	enum:SimulatorDlgImpl::simstate
OptDisplayDlg	OptDisplayDlg.cpp	/^OptDisplayDlg::OptDisplayDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:OptDisplayDlg
OptDisplayDlg	OptDisplayDlg.h	/^class OptDisplayDlg : public QDialog$/;"	c
OptDisplayDlgImpl	OptDisplayDlgImpl.cpp	/^OptDisplayDlgImpl::OptDisplayDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:OptDisplayDlgImpl
OptDisplayDlgImpl	OptDisplayDlgImpl.h	/^class OptDisplayDlgImpl : public OptDisplayDlg$/;"	c
OptDisplayDlgLayout	OptDisplayDlg.h	/^    QVBoxLayout* OptDisplayDlgLayout;$/;"	m	class:OptDisplayDlg
OptGeneral	OptGeneral.cpp	/^OptGeneral::OptGeneral(QWidget* parent, const char* name)$/;"	f	class:OptGeneral
OptGeneral	OptGeneral.h	/^class OptGeneral : public QWidget$/;"	c
OptGeneralDlg	OptGeneralDlg.cpp	/^OptGeneralDlg::OptGeneralDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:OptGeneralDlg
OptGeneralDlg	OptGeneralDlg.h	/^class OptGeneralDlg : public QDialog$/;"	c
OptGeneralDlgImpl	OptGeneralDlgImpl.cpp	/^OptGeneralDlgImpl::OptGeneralDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:OptGeneralDlgImpl
OptGeneralDlgImpl	OptGeneralDlgImpl.h	/^class OptGeneralDlgImpl : public OptGeneralDlg$/;"	c
OptPrintingDlg	OptPrintingDlg.cpp	/^OptPrintingDlg::OptPrintingDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:OptPrintingDlg
OptPrintingDlg	OptPrintingDlg.h	/^class OptPrintingDlg : public QDialog$/;"	c
OptPrintingDlgImpl	OptPrintingDlgImpl.cpp	/^OptPrintingDlgImpl::OptPrintingDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:OptPrintingDlgImpl
OptPrintingDlgImpl	OptPrintingDlgImpl.h	/^class OptPrintingDlgImpl : public OptPrintingDlg$/;"	c
OptPrintingDlgLayout	OptPrintingDlg.h	/^    QHBoxLayout* OptPrintingDlgLayout;$/;"	m	class:OptPrintingDlg
Options	Options.cpp	/^Options::Options(QObject* parent\/*=NULL*\/, const char* name\/*=0*\/)$/;"	f	class:Options
Options	Options.h	/^class Options : public QObject$/;"	c
PI	Const.h	26;"	d
PRINTMANAGER_H	PrintManager.h	20;"	d
PROJECT_H	Project.h	20;"	d
Pan	DocStatus.h	/^      Pan,		\/\/\/< Pan view$/;"	e	enum:DocStatus::Mode
Paste	Undo.h	/^		 ChangeMachine, Paste};$/;"	e	enum:UndoAction
PrintManager	PrintManager.cpp	/^PrintManager::PrintManager(QWidget* parent)$/;"	f	class:PrintManager
PrintManager	PrintManager.h	/^class PrintManager : public QObject$/;"	c
Project	Project.cpp	/^Project::Project(QObject* parent\/*=NULL*\/, const char* name\/*=0*\/)$/;"	f	class:Project
Project	Project.h	/^class Project : public QObject$/;"	c
PushButton1	StatePropertiesDlg.h	/^    QPushButton* PushButton1;$/;"	m	class:StatePropertiesDlg
PushButton19	TransitionPropertiesDlg.h	/^    QPushButton* PushButton19;$/;"	m	class:TransitionPropertiesDlg
PushButton2	StatePropertiesDlg.h	/^    QPushButton* PushButton2;$/;"	m	class:StatePropertiesDlg
PushButton20	TransitionPropertiesDlg.h	/^    QPushButton* PushButton20;$/;"	m	class:TransitionPropertiesDlg
PushButton3	StatePropertiesDlg.h	/^    QPushButton* PushButton3;$/;"	m	class:StatePropertiesDlg
QXMLHANDLER_H	XMLHandler.h	20;"	d
SCROLLVIEW_H	ScrollView.h	20;"	d
SELECTION_H	Selection.h	20;"	d
SIMULATORDLGIMPL_H	SimulatorDlgImpl.h	20;"	d
SIMULATORDLG_H	SimulatorDlg.h	11;"	d
SIMULATOR_H	Simulator.h	20;"	d
START_DISTANCE	Const.h	33;"	d
STATEMANAGER_H	StateManager.h	20;"	d
STATEPROPERTIESDLGIMPL_H	StatePropertiesDlgImpl.h	20;"	d
STATEPROPERTIESDLG_H	StatePropertiesDlg.h	11;"	d
STATE_H	State.h	20;"	d
STATUSBAR_H	StatusBar.h	20;"	d
ScrollView	ScrollView.cpp	/^ScrollView::ScrollView(QWidget* parent, const char* name)$/;"	f	class:ScrollView
ScrollView	ScrollView.h	/^class ScrollView : public QScrollView$/;"	c
Select	DocStatus.h	/^      Select, 		\/\/\/< Select $/;"	e	enum:DocStatus::Mode
Selection	Selection.cpp	/^Selection::Selection(QWidget* parent, const char* name)$/;"	f	class:Selection
Selection	Selection.h	/^class Selection : public QObject$/;"	c
SetEndStates	Undo.h	/^		 ChangeInitialTransition, SetInitialState, SetEndStates,$/;"	e	enum:UndoAction
SetInitialState	Undo.h	/^		 ChangeInitialTransition, SetInitialState, SetEndStates,$/;"	e	enum:UndoAction
Simulating	DocStatus.h	/^      Simulating	\/\/\/< Simultate the machine$/;"	e	enum:DocStatus::Mode
Simulator	Simulator.cpp	/^Simulator::Simulator(MainWindow* m)$/;"	f	class:Simulator
Simulator	Simulator.h	/^class Simulator : public QObject$/;"	c
SimulatorDlg	SimulatorDlg.cpp	/^SimulatorDlg::SimulatorDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:SimulatorDlg
SimulatorDlg	SimulatorDlg.h	/^class SimulatorDlg : public QDialog$/;"	c
SimulatorDlgImpl	SimulatorDlgImpl.cpp	/^SimulatorDlgImpl::SimulatorDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:SimulatorDlgImpl
SimulatorDlgImpl	SimulatorDlgImpl.h	/^class SimulatorDlgImpl : public SimulatorDlg$/;"	c
SimulatorDlgLayout	SimulatorDlg.h	/^    QVBoxLayout* SimulatorDlgLayout;$/;"	m	class:SimulatorDlg
Spacer1	OptGeneralDlg.h	/^    QSpacerItem* Spacer1;$/;"	m	class:OptGeneralDlg
Spacer11	ICheckDlg.h	/^    QSpacerItem* Spacer11;$/;"	m	class:ICheckDlg
Spacer12	ICheckDlg.h	/^    QSpacerItem* Spacer12;$/;"	m	class:ICheckDlg
Spacer14	OptDisplayDlg.h	/^    QSpacerItem* Spacer14;$/;"	m	class:OptDisplayDlg
Spacer1_2	SimulatorDlg.h	/^    QSpacerItem* Spacer1_2;$/;"	m	class:SimulatorDlg
Spacer3	MachinePropertiesDlg.h	/^    QSpacerItem* Spacer3;$/;"	m	class:MachinePropertiesDlg
Spacer9	SimulatorDlg.h	/^    QSpacerItem* Spacer9;$/;"	m	class:SimulatorDlg
State	State.cpp	/^State::State()$/;"	f	class:State
State	State.cpp	/^State::State(Machine* m)$/;"	f	class:State
State	State.cpp	/^State::State(Machine* m, const QString n, QString d, int c, IOInfo* mooreout, bool ends)$/;"	f	class:State
State	State.cpp	/^State::State(const State& st)  $/;"	f	class:State
State	State.h	/^class State$/;"	c
StateAdd	StatePropertiesDlgImpl.h	/^    enum DialogMode { StateAdd, StateEdit };$/;"	e	enum:StatePropertiesDlgImpl::DialogMode
StateEdit	StatePropertiesDlgImpl.h	/^    enum DialogMode { StateAdd, StateEdit };$/;"	e	enum:StatePropertiesDlgImpl::DialogMode
StateManager	StateManager.cpp	/^StateManager::StateManager(MainWindow* parent)$/;"	f	class:StateManager
StateManager	StateManager.h	/^class StateManager : public QObject$/;"	c
StatePropertiesDlg	StatePropertiesDlg.cpp	/^StatePropertiesDlg::StatePropertiesDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:StatePropertiesDlg
StatePropertiesDlg	StatePropertiesDlg.h	/^class StatePropertiesDlg : public QDialog$/;"	c
StatePropertiesDlgImpl	StatePropertiesDlgImpl.cpp	/^StatePropertiesDlgImpl::StatePropertiesDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:StatePropertiesDlgImpl
StatePropertiesDlgImpl	StatePropertiesDlgImpl.h	/^class StatePropertiesDlgImpl : public StatePropertiesDlg$/;"	c
StatePropertiesDlgLayout	StatePropertiesDlg.h	/^    QVBoxLayout* StatePropertiesDlgLayout;$/;"	m	class:StatePropertiesDlg
StateT	Machine.h	/^enum ObjectType {NoT, StateT, TransitionT, ITransitionT};$/;"	e	enum:ObjectType
StatusBar	StatusBar.cpp	/^StatusBar::StatusBar(QWidget* parent, const char* name)$/;"	f	class:StatusBar
StatusBar	StatusBar.h	/^class StatusBar : public QStatusBar$/;"	c
TABLEBUILDERASCII_H	TableBuilderASCII.h	20;"	d
TABLEBUILDERHTML_H	TableBuilderHTML.h	20;"	d
TABLEBUILDERLATEX_H	TableBuilderLatex.h	20;"	d
TABLEBUILDER_H	TableBuilder.h	20;"	d
TOOLTIPSV_H	ToolTipSV.h	20;"	d
TRANSITIONINFOASCII_H	TransitionInfoASCII.h	20;"	d
TRANSITIONINFOBIN_H	TransitionInfoBin.h	20;"	d
TRANSITIONINFOTEXT_H	TransitionInfoText.h	20;"	d
TRANSITIONINFO_H	TransitionInfo.h	20;"	d
TRANSITIONMANAGER_H	TransitionManager.h	20;"	d
TRANSITIONPROPERTIESDLGIMPL_H	TransitionPropertiesDlgImpl.h	20;"	d
TRANSITIONPROPERTIESDLG_H	TransitionPropertiesDlg.h	11;"	d
TRANSITION_H	Transition.h	20;"	d
TableBuilder	TableBuilder.cpp	/^TableBuilder::TableBuilder(QObject* parent, Machine* m, Options* opt)$/;"	f	class:TableBuilder
TableBuilder	TableBuilder.h	/^class TableBuilder : public QObject$/;"	c
TableBuilderASCII	TableBuilderASCII.cpp	/^TableBuilderASCII::TableBuilderASCII(QObject* par, Machine* m, Options* opt)$/;"	f	class:TableBuilderASCII
TableBuilderASCII	TableBuilderASCII.h	/^class TableBuilderASCII : public TableBuilder$/;"	c
TableBuilderHTML	TableBuilderHTML.cpp	/^TableBuilderHTML::TableBuilderHTML(QObject* par, Machine* m, Options* opt)$/;"	f	class:TableBuilderHTML
TableBuilderHTML	TableBuilderHTML.h	/^class TableBuilderHTML : public TableBuilder$/;"	c
TableBuilderLatex	TableBuilderLatex.cpp	/^TableBuilderLatex::TableBuilderLatex(QObject* par, Machine* m, Options* opt)$/;"	f	class:TableBuilderLatex
TableBuilderLatex	TableBuilderLatex.h	/^class TableBuilderLatex : public TableBuilder$/;"	c
Text	TransitionInfo.h	/^enum TransitionType {Binary, Ascii, Text};$/;"	e	enum:TransitionType
TextLabel1	MachinePropertiesDlg.h	/^    QLabel* TextLabel1;$/;"	m	class:MachinePropertiesDlg
TextLabel1	OptGeneralDlg.h	/^    QLabel* TextLabel1;$/;"	m	class:OptGeneralDlg
TextLabel1	SimulatorDlg.h	/^    QLabel* TextLabel1;$/;"	m	class:SimulatorDlg
TextLabel1	StatePropertiesDlg.h	/^    QLabel* TextLabel1;$/;"	m	class:StatePropertiesDlg
TextLabel11	MachinePropertiesDlg.h	/^    QLabel* TextLabel11;$/;"	m	class:MachinePropertiesDlg
TextLabel12	OptGeneralDlg.h	/^    QLabel* TextLabel12;$/;"	m	class:OptGeneralDlg
TextLabel14	OptDisplayDlg.h	/^    QLabel* TextLabel14;$/;"	m	class:OptDisplayDlg
TextLabel1_2	StatePropertiesDlg.h	/^    QLabel* TextLabel1_2;$/;"	m	class:StatePropertiesDlg
TextLabel2	MachinePropertiesDlg.h	/^    QLabel* TextLabel2;$/;"	m	class:MachinePropertiesDlg
TextLabel2	StatePropertiesDlg.h	/^    QLabel* TextLabel2;$/;"	m	class:StatePropertiesDlg
TextLabel2_2	MachinePropertiesDlg.h	/^    QLabel* TextLabel2_2;$/;"	m	class:MachinePropertiesDlg
TextLabel3	MachinePropertiesDlg.h	/^    QLabel* TextLabel3;$/;"	m	class:MachinePropertiesDlg
TextLabel3	SimulatorDlg.h	/^    QLabel* TextLabel3;$/;"	m	class:SimulatorDlg
TextLabel3	StatePropertiesDlg.h	/^    QLabel* TextLabel3;$/;"	m	class:StatePropertiesDlg
TextLabel3	TransitionPropertiesDlg.h	/^    QLabel* TextLabel3;$/;"	m	class:TransitionPropertiesDlg
TextLabel4	MachinePropertiesDlg.h	/^    QLabel* TextLabel4;$/;"	m	class:MachinePropertiesDlg
TextLabel4	StatePropertiesDlg.h	/^    QLabel* TextLabel4;$/;"	m	class:StatePropertiesDlg
TextLabel5	MachinePropertiesDlg.h	/^    QLabel* TextLabel5;$/;"	m	class:MachinePropertiesDlg
TextLabel6	MachinePropertiesDlg.h	/^    QLabel* TextLabel6;$/;"	m	class:MachinePropertiesDlg
TextLabel6	TransitionPropertiesDlg.h	/^    QLabel* TextLabel6;$/;"	m	class:TransitionPropertiesDlg
TextLabel7	MachinePropertiesDlg.h	/^    QLabel* TextLabel7;$/;"	m	class:MachinePropertiesDlg
TextLabel7	TransitionPropertiesDlg.h	/^    QLabel* TextLabel7;$/;"	m	class:TransitionPropertiesDlg
ToolTipSV	ToolTipSV.cpp	/^ToolTipSV::ToolTipSV(QWidget* parent)$/;"	f	class:ToolTipSV
ToolTipSV	ToolTipSV.h	/^class ToolTipSV : public QToolTip$/;"	c
Transition	Transition.cpp	/^Transition::Transition(State* s, State* e, TransitionInfo* i)$/;"	f	class:Transition
Transition	Transition.cpp	/^Transition::Transition(const Transition& t)$/;"	f	class:Transition
Transition	Transition.h	/^class Transition$/;"	c
TransitionInfo	TransitionInfo.cpp	/^TransitionInfo::TransitionInfo()$/;"	f	class:TransitionInfo
TransitionInfo	TransitionInfo.h	/^class TransitionInfo$/;"	c
TransitionInfoASCII	TransitionInfoASCII.cpp	/^TransitionInfoASCII::TransitionInfoASCII()$/;"	f	class:TransitionInfoASCII
TransitionInfoASCII	TransitionInfoASCII.cpp	/^TransitionInfoASCII::TransitionInfoASCII(IOInfoASCII ain, IOInfoASCII aout)$/;"	f	class:TransitionInfoASCII
TransitionInfoASCII	TransitionInfoASCII.cpp	/^TransitionInfoASCII::TransitionInfoASCII(QString sin, QString sout)$/;"	f	class:TransitionInfoASCII
TransitionInfoASCII	TransitionInfoASCII.cpp	/^TransitionInfoASCII::TransitionInfoASCII(const TransitionInfoASCII& t) $/;"	f	class:TransitionInfoASCII
TransitionInfoASCII	TransitionInfoASCII.h	/^class TransitionInfoASCII : public TransitionInfo$/;"	c
TransitionInfoBin	TransitionInfoBin.cpp	/^TransitionInfoBin::TransitionInfoBin()$/;"	f	class:TransitionInfoBin
TransitionInfoBin	TransitionInfoBin.cpp	/^TransitionInfoBin::TransitionInfoBin(IOInfoBin bin, IOInfoBin bout\/*int numin, char* in, int numout, char* out*\/)$/;"	f	class:TransitionInfoBin
TransitionInfoBin	TransitionInfoBin.cpp	/^TransitionInfoBin::TransitionInfoBin(const TransitionInfoBin& t) $/;"	f	class:TransitionInfoBin
TransitionInfoBin	TransitionInfoBin.h	/^class TransitionInfoBin : public TransitionInfo$/;"	c
TransitionInfoText	TransitionInfoText.cpp	/^TransitionInfoText::TransitionInfoText()$/;"	f	class:TransitionInfoText
TransitionInfoText	TransitionInfoText.cpp	/^TransitionInfoText::TransitionInfoText(IOInfoText ain, IOInfoText aout)$/;"	f	class:TransitionInfoText
TransitionInfoText	TransitionInfoText.cpp	/^TransitionInfoText::TransitionInfoText(QString sin, QString sout)$/;"	f	class:TransitionInfoText
TransitionInfoText	TransitionInfoText.cpp	/^TransitionInfoText::TransitionInfoText(const TransitionInfoText& t) $/;"	f	class:TransitionInfoText
TransitionInfoText	TransitionInfoText.h	/^class TransitionInfoText : public TransitionInfo$/;"	c
TransitionManager	TransitionManager.cpp	/^TransitionManager::TransitionManager(MainWindow* m)$/;"	f	class:TransitionManager
TransitionManager	TransitionManager.h	/^class TransitionManager$/;"	c
TransitionPropertiesDlg	TransitionPropertiesDlg.cpp	/^TransitionPropertiesDlg::TransitionPropertiesDlg( QWidget* parent, const char* name, bool modal, WFlags fl )$/;"	f	class:TransitionPropertiesDlg
TransitionPropertiesDlg	TransitionPropertiesDlg.h	/^class TransitionPropertiesDlg : public QDialog$/;"	c
TransitionPropertiesDlgImpl	TransitionPropertiesDlgImpl.cpp	/^TransitionPropertiesDlgImpl::TransitionPropertiesDlgImpl( QWidget* parent,  const char* name, bool modal, WFlags fl )$/;"	f	class:TransitionPropertiesDlgImpl
TransitionPropertiesDlgImpl	TransitionPropertiesDlgImpl.h	/^class TransitionPropertiesDlgImpl : public TransitionPropertiesDlg$/;"	c
TransitionPropertiesDlgLayout	TransitionPropertiesDlg.h	/^    QVBoxLayout* TransitionPropertiesDlgLayout;$/;"	m	class:TransitionPropertiesDlg
TransitionT	Machine.h	/^enum ObjectType {NoT, StateT, TransitionT, ITransitionT};$/;"	e	enum:ObjectType
TransitionType	TransitionInfo.h	/^enum TransitionType {Binary, Ascii, Text};$/;"	g
UNDOBUFFER_H	UndoBuffer.h	20;"	d
UNDO_H	Undo.h	20;"	d
UTILS_H	Utils.h	20;"	d
Undo	Undo.cpp	/^Undo::Undo(Project* p)$/;"	f	class:Undo
Undo	Undo.h	/^class Undo$/;"	c
UndoAction	Undo.h	/^enum UndoAction {AddState, AddTransition, ChangeState, ChangeTransition,$/;"	g
UndoBuffer	UndoBuffer.cpp	/^UndoBuffer::UndoBuffer(QObject* parent)$/;"	f	class:UndoBuffer
UndoBuffer	UndoBuffer.h	/^class UndoBuffer $/;"	c
Utils	Utils.h	/^class Utils$/;"	c
WSPINBOX_H	WSpinBox.h	20;"	d
WSpinBox	WSpinBox.cpp	/^WSpinBox::WSpinBox(QWidget* parent, const char* name)$/;"	f	class:WSpinBox
WSpinBox	WSpinBox.h	/^class WSpinBox : public QSpinBox$/;"	c
X10ToASCII	Convert.cpp	/^bool Convert::X10ToASCII(IOInfoBin io, unsigned char* ascii, int asciiarraylen, int& length,$/;"	f	class:Convert
X10ToBinStr	Convert.cpp	/^QString Convert::X10ToBinStr(IOInfoBin io)$/;"	f	class:Convert
X10ToDec	Convert.cpp	/^bool Convert::X10ToDec(IOInfoBin io, int& dec)$/;"	f	class:Convert
X10ToHexStr	Convert.cpp	/^QString Convert::X10ToHexStr(\/*int len, char* bininv*\/IOInfoBin invio)$/;"	f	class:Convert
XMLHandler	XMLHandler.cpp	/^XMLHandler::XMLHandler(Project* newProject, Selection* sel\/*=NULL*\/, bool keepquiet\/*=TRUE*\/,$/;"	f	class:XMLHandler
XMLHandler	XMLHandler.h	/^class XMLHandler : public QObject, public QXmlDefaultHandler$/;"	c
ZOOM_FACTOR	Const.h	22;"	d
ZOOM_H	Zoom.h	20;"	d
Zoom	Zoom.cpp	/^Zoom::Zoom()$/;"	f	class:Zoom
Zoom	Zoom.h	/^class Zoom$/;"	c
Zooming	DocStatus.h	/^      Zooming, 		\/\/\/< Zoom in\/out$/;"	e	enum:DocStatus::Mode
about	AppInfo.cpp	/^void AppInfo::about()$/;"	f	class:AppInfo
aboutToClose	MainWindow.h	/^    bool aboutToClose;$/;"	m	class:MainWindow
act_dir	FileIO.h	/^    QDir act_dir;$/;"	m	class:FileIO
act_export_dir	FileIO.h	/^    QString act_export_dir;$/;"	m	class:FileIO
act_exportfile	FileIO.h	/^    QString act_exportfile;$/;"	m	class:FileIO
act_file	FileIO.h	/^    QString act_file;$/;"	m	class:FileIO
action	Undo.h	/^    int action;$/;"	m	class:Undo
addMRUEntry	MainControl.cpp	/^void MainControl::addMRUEntry(QString fileName)$/;"	f	class:MainControl
addMachine	MachineManager.cpp	/^int MachineManager::addMachine(Project* p)$/;"	f	class:MachineManager
addMachine	Project.cpp	/^void Project::addMachine(Machine* m)$/;"	f	class:Project
addMachine	Project.cpp	/^void Project::addMachine(QString n, QString v, int type, int nb, QString onamesm, int ni, $/;"	f	class:Project
addState	Machine.cpp	/^bool Machine::addState(GState* s, bool withundo\/*=TRUE*\/)$/;"	f	class:Machine
addState	Machine.cpp	/^bool Machine::addState(const QString sname, QString sdescription, int code, $/;"	f	class:Machine
addState	StateManager.cpp	/^bool StateManager::addState(double x, double y)$/;"	f	class:StateManager
addState	UndoBuffer.cpp	/^void UndoBuffer::addState(Machine* m, GState* s)$/;"	f	class:UndoBuffer
addTransition	GState.cpp	/^void GState::addTransition(Project* p, GState* s, TransitionInfo* i,$/;"	f	class:GState
addTransition	GState.cpp	/^void GState::addTransition(Project* p, GTransition* t, bool withundo\/*=TRUE*\/)$/;"	f	class:GState
addTransition	TransitionManager.cpp	/^bool TransitionManager::addTransition(GState* from, GState* to, int numin, $/;"	f	class:TransitionManager
addTransition	UndoBuffer.cpp	/^void UndoBuffer::addTransition(GTransition* t)$/;"	f	class:UndoBuffer
addstate	XMLHandler.h	/^    bool addstate;$/;"	m	class:XMLHandler
ahdl_export	MainWindow.h	/^    ExportAHDLDlgImpl* ahdl_export;$/;"	m	class:MainWindow
ahdl_sync_reset	Options.h	/^    bool ahdl_sync_reset;$/;"	m	class:Options
ahdl_use_moore	Options.h	/^    bool ahdl_use_moore;$/;"	m	class:Options
allSelected	ScrollView.cpp	/^void ScrollView::allSelected()$/;"	f	class:ScrollView
any	IOInfo.h	/^    bool any;$/;"	m	class:IOInfo
any	XMLHandler.h	/^    bool any;$/;"	m	class:XMLHandler
anyClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::anyClicked()$/;"	f	class:TransitionPropertiesDlg
anyClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::anyClicked()$/;"	f	class:TransitionPropertiesDlgImpl
anyInputDescChanged	OptDisplayDlg.ui.h	/^void OptDisplayDlg::anyInputDescChanged()$/;"	f	class:OptDisplayDlg
anyInputDescChanged	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::anyInputDescChanged()$/;"	f	class:OptDisplayDlgImpl
any_input_descriptor	OptDisplayDlgImpl.h	/^    QString any_input_descriptor;$/;"	m	class:OptDisplayDlgImpl
any_input_descriptor	Options.h	/^    QString any_input_descriptor;$/;"	m	class:Options
applyOptions	Options.cpp	/^void Options::applyOptions(MainWindow* pMain)$/;"	f	class:Options
arrow_type	Machine.h	/^    int arrow_type;$/;"	m	class:Machine
arrowtype	Undo.h	/^    int arrowtype;$/;"	m	class:Undo
asciiClicked	MachinePropertiesDlg.ui.h	/^void MachinePropertiesDlg::asciiClicked()$/;"	f	class:MachinePropertiesDlg
asciiClicked	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::asciiClicked()$/;"	f	class:MachinePropertiesDlgImpl
asciiClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::asciiClicked()$/;"	f	class:TransitionPropertiesDlg
asciiClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::asciiClicked()$/;"	f	class:TransitionPropertiesDlgImpl
asciiToBinStr	Convert.cpp	/^QString Convert::asciiToBinStr(int maxlen, const unsigned char ascii)$/;"	f	class:Convert
asciiToBinStr	Convert.cpp	/^QString Convert::asciiToBinStr(int maxlen, const unsigned char* ascii, int asciilen)$/;"	f	class:Convert
asciiToHexStr	Convert.cpp	/^QString Convert::asciiToHexStr(const unsigned char ascii)$/;"	f	class:Convert
asciiToHexStr	Convert.cpp	/^QString Convert::asciiToHexStr(const unsigned char* ascii, int asciilen)$/;"	f	class:Convert
asciiToIOList	Convert.cpp	/^void Convert::asciiToIOList(const unsigned char* asciiarray, int asciilength, IOInfoList& result, bool invert\/*=FALSE*\/)$/;"	f	class:Convert
asciiToReadableStr	Convert.cpp	/^QString Convert::asciiToReadableStr(const unsigned char* asciiarray, int asciilength)$/;"	f	class:Convert
asciiToX10	Convert.cpp	/^IOInfoBin Convert::asciiToX10(int maxlen, const unsigned char ascii, IOType t)$/;"	f	class:Convert
asciiToX10	Convert.cpp	/^IOInfoBin Convert::asciiToX10(int maxlen, const unsigned char* ascii, int asciilen, IOType t)$/;"	f	class:Convert
attachInitialTransition	Machine.cpp	/^void Machine::attachInitialTransition()$/;"	f	class:Machine
author	AppInfo.h	/^    QString author;$/;"	m	class:AppInfo
bcut	MainWindow.h	/^    bool bcut;$/;"	m	class:MainWindow
bdrawbox	OptDisplayDlgImpl.h	/^    bool bdrawbox;$/;"	m	class:OptDisplayDlgImpl
bdrawbox	Options.h	/^    bool bdrawbox;$/;"	m	class:Options
bezierCurve	GTransition.cpp	/^void GTransition::bezierCurve(double t, double& x, double& y)$/;"	f	class:GTransition
bg_lang	ExportRagelDlg.h	/^    QButtonGroup* bg_lang;$/;"	m	class:ExportRagelDlg
bg_langLayout	ExportRagelDlg.h	/^    QHBoxLayout* bg_langLayout;$/;"	m	class:ExportRagelDlg
bg_mealy	MachinePropertiesDlg.h	/^    QGroupBox* bg_mealy;$/;"	m	class:MachinePropertiesDlg
bg_mealyLayout	MachinePropertiesDlg.h	/^    QGridLayout* bg_mealyLayout;$/;"	m	class:MachinePropertiesDlg
bg_moore	MachinePropertiesDlg.h	/^    QGroupBox* bg_moore;$/;"	m	class:MachinePropertiesDlg
bg_mooreLayout	MachinePropertiesDlg.h	/^    QHBoxLayout* bg_mooreLayout;$/;"	m	class:MachinePropertiesDlg
bg_orientation	ExportStateTableDlg.h	/^    QButtonGroup* bg_orientation;$/;"	m	class:ExportStateTableDlg
bg_orientationLayout	ExportStateTableDlg.h	/^    QVBoxLayout* bg_orientationLayout;$/;"	m	class:ExportStateTableDlg
bg_transitions	OptDisplayDlg.h	/^    QButtonGroup* bg_transitions;$/;"	m	class:OptDisplayDlg
bg_transitionsLayout	OptDisplayDlg.h	/^    QVBoxLayout* bg_transitionsLayout;$/;"	m	class:OptDisplayDlg
bg_type	MachinePropertiesDlg.h	/^    QButtonGroup* bg_type;$/;"	m	class:MachinePropertiesDlg
bg_type	TransitionPropertiesDlg.h	/^    QButtonGroup* bg_type;$/;"	m	class:TransitionPropertiesDlg
bg_typeLayout	MachinePropertiesDlg.h	/^    QHBoxLayout* bg_typeLayout;$/;"	m	class:MachinePropertiesDlg
bg_typeLayout	TransitionPropertiesDlg.h	/^    QHBoxLayout* bg_typeLayout;$/;"	m	class:TransitionPropertiesDlg
binStrToASCII	Convert.cpp	/^bool Convert::binStrToASCII(const QString bin, unsigned char* ascii, int arraymaxlen, int& length,$/;"	f	class:Convert
binStrToHexStr	Convert.cpp	/^QString Convert::binStrToHexStr(const QString bin)$/;"	f	class:Convert
binStrToInt	Convert.cpp	/^int Convert::binStrToInt(QString s)$/;"	f	class:Convert
binStrToX10	Convert.cpp	/^IOInfoBin Convert::binStrToX10(int num, const QString cs, IOType t)$/;"	f	class:Convert
binStringValid	Utils.cpp	/^bool Utils::binStringValid(QString s)$/;"	f	class:Utils
binaryClicked	MachinePropertiesDlg.ui.h	/^void MachinePropertiesDlg::binaryClicked()$/;"	f	class:MachinePropertiesDlg
binaryClicked	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::binaryClicked()$/;"	f	class:MachinePropertiesDlgImpl
binaryClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::binaryClicked()$/;"	f	class:TransitionPropertiesDlg
binaryClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::binaryClicked()$/;"	f	class:TransitionPropertiesDlgImpl
binmax_in	TransitionPropertiesDlgImpl.h	/^    int binmax_in;$/;"	m	class:TransitionPropertiesDlgImpl
binmax_out	TransitionPropertiesDlgImpl.h	/^    int binmax_out;$/;"	m	class:TransitionPropertiesDlgImpl
bottom	DRect.h	/^    double bottom() \/** Returns y coordinate of bottom border.*\/ { return y2; };$/;"	f	class:DRect
brush	GState.h	/^    QBrush brush;$/;"	m	class:GState
bshadows	OptDisplayDlgImpl.h	/^    bool bshadows;$/;"	m	class:OptDisplayDlgImpl
btooltips	OptDisplayDlgImpl.h	/^    bool btooltips;$/;"	m	class:OptDisplayDlgImpl
button0Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button0Pressed()$/;"	f	class:SimulatorDlg
button0Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button0Pressed()$/;"	f	class:SimulatorDlgImpl
button10Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button10Pressed()$/;"	f	class:SimulatorDlg
button10Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button10Pressed()$/;"	f	class:SimulatorDlgImpl
button11Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button11Pressed()$/;"	f	class:SimulatorDlg
button11Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button11Pressed()$/;"	f	class:SimulatorDlgImpl
button12Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button12Pressed()$/;"	f	class:SimulatorDlg
button12Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button12Pressed()$/;"	f	class:SimulatorDlgImpl
button13Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button13Pressed()$/;"	f	class:SimulatorDlg
button13Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button13Pressed()$/;"	f	class:SimulatorDlgImpl
button14Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button14Pressed()$/;"	f	class:SimulatorDlg
button14Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button14Pressed()$/;"	f	class:SimulatorDlgImpl
button15Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button15Pressed()$/;"	f	class:SimulatorDlg
button15Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button15Pressed()$/;"	f	class:SimulatorDlgImpl
button1Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button1Pressed()$/;"	f	class:SimulatorDlg
button1Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button1Pressed()$/;"	f	class:SimulatorDlgImpl
button2Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button2Pressed()$/;"	f	class:SimulatorDlg
button2Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button2Pressed()$/;"	f	class:SimulatorDlgImpl
button3Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button3Pressed()$/;"	f	class:SimulatorDlg
button3Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button3Pressed()$/;"	f	class:SimulatorDlgImpl
button4Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button4Pressed()$/;"	f	class:SimulatorDlg
button4Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button4Pressed()$/;"	f	class:SimulatorDlgImpl
button5Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button5Pressed()$/;"	f	class:SimulatorDlg
button5Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button5Pressed()$/;"	f	class:SimulatorDlgImpl
button6Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button6Pressed()$/;"	f	class:SimulatorDlg
button6Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button6Pressed()$/;"	f	class:SimulatorDlgImpl
button7Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button7Pressed()$/;"	f	class:SimulatorDlg
button7Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button7Pressed()$/;"	f	class:SimulatorDlgImpl
button8Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button8Pressed()$/;"	f	class:SimulatorDlg
button8Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button8Pressed()$/;"	f	class:SimulatorDlgImpl
button9Pressed	SimulatorDlg.ui.h	/^void SimulatorDlg::button9Pressed()$/;"	f	class:SimulatorDlg
button9Pressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::button9Pressed()$/;"	f	class:SimulatorDlgImpl
calcArrow	Draw.cpp	/^void Draw::calcArrow(GITransition* t, double& xl, double& yl, double& xr,$/;"	f	class:Draw
calcArrow	Draw.cpp	/^void Draw::calcArrow(GTransition* t, double& xl, double& yl, double& xr,$/;"	f	class:Draw
calcArrow	Draw.cpp	/^void Draw::calcArrow(double p1x, double p1y, double p2x, double p2y, $/;"	f	class:Draw
calcCanvasSize	Machine.cpp	/^void Machine::calcCanvasSize()$/;"	f	class:Machine
calcLoop	GState.cpp	/^void GState::calcLoop(double x, double y, int rad, double mousex, $/;"	f	class:GState
canvas_size	Machine.h	/^    QSize canvas_size;$/;"	m	class:Machine
cb_actionfile	ExportRagelDlg.h	/^    QCheckBox* cb_actionfile;$/;"	m	class:ExportRagelDlg
cb_any	TransitionPropertiesDlg.h	/^    QCheckBox* cb_any;$/;"	m	class:TransitionPropertiesDlg
cb_default	TransitionPropertiesDlg.h	/^    QCheckBox* cb_default;$/;"	m	class:TransitionPropertiesDlg
cb_drawbox	OptDisplayDlg.h	/^    QCheckBox* cb_drawbox;$/;"	m	class:OptDisplayDlg
cb_includeout	ExportStateTableDlg.h	/^    QCheckBox* cb_includeout;$/;"	m	class:ExportStateTableDlg
cb_invert	TransitionPropertiesDlg.h	/^    QCheckBox* cb_invert;$/;"	m	class:TransitionPropertiesDlg
cb_iomark	OptDisplayDlg.h	/^    QCheckBox* cb_iomark;$/;"	m	class:OptDisplayDlg
cb_ionames	OptDisplayDlg.h	/^    QCheckBox* cb_ionames;$/;"	m	class:OptDisplayDlg
cb_print_header	OptPrintingDlg.h	/^    QCheckBox* cb_print_header;$/;"	m	class:OptPrintingDlg
cb_resolve_invert	ExportStateTableDlg.h	/^    QCheckBox* cb_resolve_invert;$/;"	m	class:ExportStateTableDlg
cb_shadows	OptDisplayDlg.h	/^    QCheckBox* cb_shadows;$/;"	m	class:OptDisplayDlg
cb_stdlogic	ExportVHDLDlg.h	/^    QCheckBox* cb_stdlogic;$/;"	m	class:ExportVHDLDlg
cb_symbolicstates	ExportVHDLDlg.h	/^    QCheckBox* cb_symbolicstates;$/;"	m	class:ExportVHDLDlg
cb_synchreset	ExportAHDLDlg.h	/^    QCheckBox* cb_synchreset;$/;"	m	class:ExportAHDLDlg
cb_synchreset	ExportVHDLDlg.h	/^    QCheckBox* cb_synchreset;$/;"	m	class:ExportVHDLDlg
cb_synchreset	ExportVerilogDlg.h	/^    QCheckBox* cb_synchreset;$/;"	m	class:ExportVerilogDlg
cb_tooltips	OptDisplayDlg.h	/^    QCheckBox* cb_tooltips;$/;"	m	class:OptDisplayDlg
cb_usemoore	ExportAHDLDlg.h	/^    QCheckBox* cb_usemoore;$/;"	m	class:ExportAHDLDlg
changeInitialTransition	UndoBuffer.cpp	/^void UndoBuffer::changeInitialTransition(GITransition* t)$/;"	f	class:UndoBuffer
changeMachine	UndoBuffer.cpp	/^void UndoBuffer::changeMachine(Machine* m)$/;"	f	class:UndoBuffer
changeState	UndoBuffer.cpp	/^void UndoBuffer::changeState(GState* old, GState* newSt, GITransition* oldit)$/;"	f	class:UndoBuffer
changeTransition	UndoBuffer.cpp	/^void UndoBuffer::changeTransition(GTransition* t)$/;"	f	class:UndoBuffer
changeTransitions	UndoBuffer.cpp	/^void UndoBuffer::changeTransitions(QList<GTransition>* tl)$/;"	f	class:UndoBuffer
changed	Project.h	/^    bool changed;$/;"	m	class:Project
charToEscape	IOInfoASCII.cpp	/^QString IOInfoASCII::charToEscape(char c)$/;"	f	class:IOInfoASCII
characters	XMLHandler.cpp	/^bool XMLHandler::characters ( const QString & ch ) $/;"	f	class:XMLHandler
checkCompleteness	ICheck.cpp	/^double ICheck::checkCompleteness(Machine* m)$/;"	f	class:ICheck
checkConnections	ICheck.cpp	/^double ICheck::checkConnections(Machine* m)$/;"	f	class:ICheck
checkDeadLocks	ICheck.cpp	/^bool ICheck::checkDeadLocks(Machine* m)$/;"	f	class:ICheck
checkEndState	ICheck.cpp	/^bool ICheck::checkEndState(Machine* m)$/;"	f	class:ICheck
checkEndStatesReachable	ICheck.cpp	/^double ICheck::checkEndStatesReachable(Machine* m)$/;"	f	class:ICheck
checkIntegrity	Machine.cpp	/^void Machine::checkIntegrity(ICheck* checker)$/;"	f	class:Machine
checkMachine	ICheck.cpp	/^int ICheck::checkMachine(Machine* m)$/;"	f	class:ICheck
checkStartState	ICheck.cpp	/^bool ICheck::checkStartState(Machine* m)$/;"	f	class:ICheck
checkStatesReachable	ICheck.cpp	/^double ICheck::checkStatesReachable(Machine* m)$/;"	f	class:ICheck
checkUnambigousCond	ICheck.cpp	/^bool ICheck::checkUnambigousCond(Machine* m)$/;"	f	class:ICheck
chooseFGColor	StatePropertiesDlg.ui.h	/^void StatePropertiesDlg::chooseFGColor()$/;"	f	class:StatePropertiesDlg
chooseFGColor	StatePropertiesDlgImpl.cpp	/^void StatePropertiesDlgImpl::chooseFGColor()$/;"	f	class:StatePropertiesDlgImpl
chooseGridColor	OptDisplayDlg.ui.h	/^void OptDisplayDlg::chooseGridColor()$/;"	f	class:OptDisplayDlg
chooseGridColor	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::chooseGridColor()$/;"	f	class:OptDisplayDlgImpl
chooseSFont	MachinePropertiesDlg.ui.h	/^void MachinePropertiesDlg::chooseSFont()$/;"	f	class:MachinePropertiesDlg
chooseSFont	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::chooseSFont()$/;"	f	class:MachinePropertiesDlgImpl
chooseShadowColor	OptDisplayDlg.ui.h	/^void OptDisplayDlg::chooseShadowColor()$/;"	f	class:OptDisplayDlg
chooseShadowColor	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::chooseShadowColor()$/;"	f	class:OptDisplayDlgImpl
chooseTFont	MachinePropertiesDlg.ui.h	/^void MachinePropertiesDlg::chooseTFont()$/;"	f	class:MachinePropertiesDlg
chooseTFont	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::chooseTFont()$/;"	f	class:MachinePropertiesDlgImpl
circleEdge	GState.cpp	/^void GState::circleEdge(double x, double y, int rad, double mousex, $/;"	f	class:GState
clear	Selection.h	/^    void clear() { ssel_list.clear(); tsel_list.clear(); };$/;"	f	class:Selection
clear	UndoBuffer.h	/^    void clear() { tidyUp(); undolist.clear(); };$/;"	f	class:UndoBuffer
clockPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::clockPressed()$/;"	f	class:SimulatorDlg
clockPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::clockPressed()$/;"	f	class:SimulatorDlgImpl
clone	IOInfoASCII.cpp	/^IOInfo* IOInfoASCII::clone() const$/;"	f	class:IOInfoASCII
clone	IOInfoBin.cpp	/^IOInfo* IOInfoBin::clone() const$/;"	f	class:IOInfoBin
clone	IOInfoText.cpp	/^IOInfo* IOInfoText::clone() const$/;"	f	class:IOInfoText
clone	TransitionInfoASCII.h	/^    TransitionInfo* clone() { return new TransitionInfoASCII(*this); };$/;"	f	class:TransitionInfoASCII
clone	TransitionInfoBin.h	/^    TransitionInfo* clone() { return new TransitionInfoBin(*this); };$/;"	f	class:TransitionInfoBin
clone	TransitionInfoText.h	/^    TransitionInfo* clone() { return new TransitionInfoText(*this); };$/;"	f	class:TransitionInfoText
closeDlg	Simulator.cpp	/^void Simulator::closeDlg()$/;"	f	class:Simulator
closeEvent	MainWindow.cpp	/^void MainWindow::closeEvent(QCloseEvent* )$/;"	f	class:MainWindow
closeEvent	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::closeEvent(QCloseEvent* e)$/;"	f	class:SimulatorDlgImpl
closeSim	SimulatorDlg.ui.h	/^void SimulatorDlg::closeSim()$/;"	f	class:SimulatorDlg
closeSim	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::closeSim()$/;"	f	class:SimulatorDlgImpl
cmb_language	OptGeneralDlg.h	/^    QComboBox* cmb_language;$/;"	m	class:OptGeneralDlg
cmenu_state	MainWindow.h	/^    QPopupMenu* cmenu_state;$/;"	m	class:MainWindow
cmenu_sview	MainWindow.h	/^    QPopupMenu* cmenu_sview;$/;"	m	class:MainWindow
cmenu_trans	MainWindow.h	/^    QPopupMenu* cmenu_trans;$/;"	m	class:MainWindow
co_type	Selection.h	/^    int co_type;$/;"	m	class:Selection
code	State.h	/^    int code;$/;"	m	class:State
codeValid	State.cpp	/^bool State::codeValid(int mtype, QString s)$/;"	f	class:State
codemap	XMLHandler.h	/^    QMap<int, int> codemap;$/;"	m	class:XMLHandler
color	StatePropertiesDlgImpl.h	/^    QColor color;$/;"	m	class:StatePropertiesDlgImpl
compareItems	IOInfoList.cpp	/^int IOInfoList::compareItems(QCollection::Item ci1, QCollection::Item ci2)$/;"	f	class:IOInfoList
conditionValid	Transition.cpp	/^int Transition::conditionValid(int type, QString string, bool input\/*=TRUE*\/)$/;"	f	class:Transition
contains	DRect.cpp	/^bool DRect::contains(double x, double y)$/;"	f	class:DRect
contains	GITransition.cpp	/^bool GITransition::contains(double x, double y)$/;"	f	class:GITransition
contains	GTransition.cpp	/^bool GTransition::contains(double x, double y)$/;"	f	class:GTransition
contentsMouseDoubleClickEvent	ScrollView.cpp	/^void ScrollView::contentsMouseDoubleClickEvent(QMouseEvent* e)$/;"	f	class:ScrollView
contentsMouseMoveEvent	ScrollView.cpp	/^void ScrollView::contentsMouseMoveEvent(QMouseEvent* e)$/;"	f	class:ScrollView
contentsMousePressEvent	ScrollView.cpp	/^void ScrollView::contentsMousePressEvent(QMouseEvent* e)$/;"	f	class:ScrollView
contentsMouseReleaseEvent	ScrollView.cpp	/^void ScrollView::contentsMouseReleaseEvent(QMouseEvent* e)$/;"	f	class:ScrollView
contextMenuHiding	ScrollView.cpp	/^void ScrollView::contextMenuHiding()$/;"	f	class:ScrollView
context_object	Selection.h	/^    GObject* context_object;$/;"	m	class:Selection
control	MainWindow.h	/^    MainControl* control;$/;"	m	class:MainWindow
control1x	GTransition.h	/^    double control1x; $/;"	m	class:GTransition
control1y	GTransition.h	/^    double control1y;$/;"	m	class:GTransition
control2x	GTransition.h	/^    double control2x;$/;"	m	class:GTransition
control2y	GTransition.h	/^    double control2y;$/;"	m	class:GTransition
controlPressed	MainWindow.h	/^    bool controlPressed() { return control_pressed; };$/;"	f	class:MainWindow
control_pressed	MainWindow.h	/^    bool control_pressed;$/;"	m	class:MainWindow
convertToASCII	IOInfoASCII.cpp	/^bool IOInfoASCII::convertToASCII(unsigned char* ascii, int maxlen, int& length, bool$/;"	f	class:IOInfoASCII
convertToASCII	IOInfoBin.cpp	/^bool IOInfoBin::convertToASCII(unsigned char* ascii, int maxlen, int& length, bool$/;"	f	class:IOInfoBin
convertToASCII	IOInfoText.cpp	/^bool IOInfoText::convertToASCII(unsigned char* ascii, int maxlen, int& length, bool$/;"	f	class:IOInfoText
convertToBin	IOInfoASCII.cpp	/^IOInfoBin IOInfoASCII::convertToBin(int numbits) const$/;"	f	class:IOInfoASCII
convertToBin	IOInfoBin.cpp	/^IOInfoBin IOInfoBin::convertToBin(int numbits) const$/;"	f	class:IOInfoBin
convertToBin	IOInfoText.cpp	/^IOInfoBin IOInfoText::convertToBin(int numbits) const$/;"	f	class:IOInfoText
convertToBinList	IOInfoASCII.cpp	/^void IOInfoASCII::convertToBinList(IOInfoList& list, bool resolve_invert\/*=TRUE*\/)$/;"	f	class:IOInfoASCII
convertToBinList	IOInfoBin.cpp	/^void IOInfoBin::convertToBinList(IOInfoList& list, bool resolve_invert\/*=TRUE*\/)$/;"	f	class:IOInfoBin
convertToBinList	IOInfoText.cpp	/^void IOInfoText::convertToBinList(IOInfoList& list, bool resolve_invert\/*=TRUE*\/)$/;"	f	class:IOInfoText
convertToBinStr	IOInfoASCII.cpp	/^QString IOInfoASCII::convertToBinStr(Machine* \/*m=TRUE*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoASCII
convertToBinStr	IOInfoBin.cpp	/^QString IOInfoBin::convertToBinStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:IOInfoBin
convertToBinStr	IOInfoText.cpp	/^QString IOInfoText::convertToBinStr(Machine* \/*m=TRUE*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoText
convertToComparableString	IOInfoASCII.cpp	/^QString IOInfoASCII::convertToComparableString(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoASCII
convertToComparableString	IOInfoBin.cpp	/^QString IOInfoBin::convertToComparableString(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:IOInfoBin
convertToComparableString	IOInfoText.cpp	/^QString IOInfoText::convertToComparableString(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoText
convertToHexStr	IOInfoASCII.cpp	/^QString IOInfoASCII::convertToHexStr()$/;"	f	class:IOInfoASCII
convertToHexStr	IOInfoBin.cpp	/^QString IOInfoBin::convertToHexStr()$/;"	f	class:IOInfoBin
convertToHexStr	IOInfoText.cpp	/^QString IOInfoText::convertToHexStr()$/;"	f	class:IOInfoText
convertToInt	IOInfoASCII.cpp	/^int IOInfoASCII::convertToInt()$/;"	f	class:IOInfoASCII
convertToInt	IOInfoBin.cpp	/^int IOInfoBin::convertToInt()$/;"	f	class:IOInfoBin
convertToInt	IOInfoText.cpp	/^int IOInfoText::convertToInt()$/;"	f	class:IOInfoText
convertToString	IOInfoASCII.cpp	/^QString IOInfoASCII::convertToString(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoASCII
convertToString	IOInfoBin.cpp	/^QString IOInfoBin::convertToString(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:IOInfoBin
convertToString	IOInfoText.cpp	/^QString IOInfoText::convertToString(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:IOInfoText
copy	Edit.cpp	/^bool Edit::copy(Selection* , Project* p, Machine* m, QString& s)$/;"	f	class:Edit
copyAttributes	GState.cpp	/^void GState::copyAttributes(GState* s)$/;"	f	class:GState
copyTransitionAttributes	GState.cpp	/^void GState::copyTransitionAttributes(GState* s, QList<GTransition>* clist)$/;"	f	class:GState
copyTransitions	GState.cpp	/^void GState::copyTransitions(GState* s, bool deleteold\/*=FALSE*\/)$/;"	f	class:GState
copylist	Undo.h	/^    QList<GTransition> copylist;$/;"	m	class:Undo
copyset	MainWindow.h	/^    QIconSet* copyset;$/;"	m	class:MainWindow
count	Selection.h	/^    int count() { return ssel_list.count()+tsel_list.count(); };$/;"	f	class:Selection
countRefTransitions	GState.cpp	/^int GState::countRefTransitions()$/;"	f	class:GState
countStates	Machine.cpp	/^int Machine::countStates()$/;"	f	class:Machine
countStates	Selection.h	/^    int countStates() { return ssel_list.count(); };$/;"	f	class:Selection
countTransitions	GState.cpp	/^int GState::countTransitions()$/;"	f	class:GState
countTransitions	Selection.h	/^    int countTransitions() { return tsel_list.count(); };$/;"	f	class:Selection
createActionClicked	ExportRagelDlg.cpp	/^void ExportRagelDlg::createActionClicked()$/;"	f	class:ExportRagelDlg
createActionClicked	ExportRagelDlgImpl.cpp	/^void ExportRagelDlgImpl::createActionClicked()$/;"	f	class:ExportRagelDlgImpl
createToolBar	MainWindow.cpp	/^void MainWindow::createToolBar()$/;"	f	class:MainWindow
create_action	ExportRagel.h	/^    bool create_action;$/;"	m	class:ExportRagel
create_action	ExportRagelDlgImpl.h	/^    bool create_action;$/;"	m	class:ExportRagelDlgImpl
create_new_machine	XMLHandler.h	/^    bool create_new_machine;$/;"	m	class:XMLHandler
current_state	Simulator.h	/^    GState* current_state;$/;"	m	class:Simulator
cutset	MainWindow.h	/^    QIconSet* cutset;$/;"	m	class:MainWindow
debugTransitions	GState.cpp	/^void GState::debugTransitions(\/*int numin, int numout*\/)$/;"	f	class:GState
def	IOInfo.h	/^    bool def;$/;"	m	class:IOInfo
def	XMLHandler.h	/^    bool def;$/;"	m	class:XMLHandler
defaultClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::defaultClicked()$/;"	f	class:TransitionPropertiesDlg
defaultClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::defaultClicked()$/;"	f	class:TransitionPropertiesDlgImpl
defaultDescChanged	OptDisplayDlg.ui.h	/^void OptDisplayDlg::defaultDescChanged()$/;"	f	class:OptDisplayDlg
defaultDescChanged	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::defaultDescChanged()$/;"	f	class:OptDisplayDlgImpl
default_descriptor	OptDisplayDlgImpl.h	/^    QString default_descriptor;$/;"	m	class:OptDisplayDlgImpl
default_descriptor	Options.h	/^    QString default_descriptor;$/;"	m	class:Options
deleteSelection	Edit.cpp	/^void Edit::deleteSelection(Selection* sel, Machine* m)$/;"	f	class:Edit
deleteSelection	UndoBuffer.cpp	/^void UndoBuffer::deleteSelection(QList<GState>* sl, QList<GTransition>* tl)$/;"	f	class:UndoBuffer
deleteState	UndoBuffer.cpp	/^void UndoBuffer::deleteState(GState* s)$/;"	f	class:UndoBuffer
deleteTransition	UndoBuffer.cpp	/^void UndoBuffer::deleteTransition(GTransition* t)$/;"	f	class:UndoBuffer
deleted	GObject.h	/^    bool deleted;$/;"	m	class:GObject
description	GTransition.h	/^    QString description;$/;"	m	class:GTransition
deselect	Selection.cpp	/^bool Selection::deselect(GITransition* t)$/;"	f	class:Selection
deselect	Selection.cpp	/^bool Selection::deselect(GState* s)$/;"	f	class:Selection
deselect	Selection.cpp	/^bool Selection::deselect(GTransition* t)$/;"	f	class:Selection
deselectAll	Selection.cpp	/^void Selection::deselectAll(Machine* m)$/;"	f	class:Selection
destroyToolBar	MainWindow.cpp	/^void MainWindow::destroyToolBar()$/;"	f	class:MainWindow
doExport	ExportAHDL.cpp	/^void ExportAHDL::doExport()$/;"	f	class:ExportAHDL
doExport	ExportKISS.cpp	/^void ExportKISS::doExport()$/;"	f	class:ExportKISS
doExport	ExportRagel.cpp	/^void ExportRagel::doExport()$/;"	f	class:ExportRagel
doExport	ExportStateTable.cpp	/^void ExportStateTable::doExport()$/;"	f	class:ExportStateTable
doExport	ExportVHDL.cpp	/^void ExportVHDL::doExport()$/;"	f	class:ExportVHDL
doExport	ExportVerilog.cpp	/^void ExportVerilog::doExport()$/;"	f	class:ExportVerilog
doSave	FileIO.cpp	/^bool FileIO::doSave(Project* p)$/;"	f	class:FileIO
doSaveXML	FileIO.cpp	/^bool FileIO::doSaveXML(Project* p)$/;"	f	class:FileIO
doc_options	MainWindow.h	/^    Options doc_options;$/;"	m	class:MainWindow
doc_status	MainWindow.h	/^    DocStatus doc_status;   $/;"	m	class:MainWindow
doubletlist	Undo.h	/^    QList<dtlist> doubletlist;$/;"	m	class:Undo
drag	ScrollView.h	/^    bool drag;$/;"	m	class:ScrollView
dragITransition	ScrollView.h	/^    GITransition* dragITransition;     $/;"	m	class:ScrollView
dragMultiple	ScrollView.h	/^    bool dragMultiple;$/;"	m	class:ScrollView
dragRect	ScrollView.h	/^    bool dragRect;$/;"	m	class:ScrollView
dragStartX	ScrollView.h	/^    double dragStartX;$/;"	m	class:ScrollView
dragStartY	ScrollView.h	/^    double dragStartY;$/;"	m	class:ScrollView
dragStartgX	ScrollView.h	/^    double dragStartgX;$/;"	m	class:ScrollView
dragStartgY	ScrollView.h	/^    double dragStartgY;$/;"	m	class:ScrollView
dragTransition	ScrollView.h	/^    GTransition* dragTransition;     $/;"	m	class:ScrollView
drag_middle	ScrollView.h	/^    bool drag_middle;$/;"	m	class:ScrollView
draw	PrintManager.h	/^    Draw* draw;$/;"	m	class:PrintManager
draw	ScrollView.h	/^    Draw* draw;$/;"	m	class:ScrollView
drawArrow	Draw.cpp	/^void Draw::drawArrow(GITransition* t, QPainter* p, QPen pen, int type)$/;"	f	class:Draw
drawArrow	Draw.cpp	/^void Draw::drawArrow(GTransition* t, QPainter* p, QPen pen, int type)$/;"	f	class:Draw
drawBoxClicked	OptDisplayDlg.ui.h	/^void OptDisplayDlg::drawBoxClicked()$/;"	f	class:OptDisplayDlg
drawBoxClicked	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::drawBoxClicked()$/;"	f	class:OptDisplayDlgImpl
drawCondition	Draw.cpp	/^void Draw::drawCondition(Machine* m, GTransition* t, QPainter* p, int contx, $/;"	f	class:Draw
drawControlLines	ScrollView.h	/^    bool drawControlLines;$/;"	m	class:ScrollView
drawGrid	Draw.cpp	/^void Draw::drawGrid(Grid* gr, QPainter* p, int contx, int conty, double scale)$/;"	f	class:Draw
drawHeadline	Draw.cpp	/^void Draw::drawHeadline(Machine* m, QPainter* p) \/\/, double scale)$/;"	f	class:Draw
drawInitialTransition	Draw.cpp	/^void Draw::drawInitialTransition(Machine* m, GITransition* t, QPainter* p, $/;"	f	class:Draw
drawInitialTransition	ScrollView.cpp	/^void ScrollView::drawInitialTransition(GITransition* t, bool clear\/*=FALSE*\/)$/;"	f	class:ScrollView
drawState	Draw.cpp	/^void Draw::drawState(Machine* m, GState* s, QPainter* p, int contx, int conty, $/;"	f	class:Draw
drawStates	Draw.cpp	/^void Draw::drawStates(Machine* m, QPainter* p, int contx, int conty, $/;"	f	class:Draw
drawTransition	Draw.cpp	/^void Draw::drawTransition(Machine* m, GTransition* t, QPainter* p, int contx, $/;"	f	class:Draw
drawTransition	ScrollView.cpp	/^void ScrollView::drawTransition(GTransition* t, bool clear\/*=FALSE*\/)$/;"	f	class:ScrollView
drawTransitions	Draw.cpp	/^void Draw::drawTransitions(Machine* m, QPainter* p, int contx, int conty, $/;"	f	class:Draw
dtlist	Undo.h	/^  dtlist() {tlist.setAutoDelete(FALSE); rlist.setAutoDelete(FALSE); };$/;"	f	struct:dtlist
dtlist	Undo.h	/^struct dtlist {$/;"	s
dval	WSpinBox.h	/^    QDoubleValidator* dval;$/;"	m	class:WSpinBox
edit	MainWindow.h	/^    Edit* edit;$/;"	m	class:MainWindow
editCopy	MainWindow.cpp	/^void MainWindow::editCopy()$/;"	f	class:MainWindow
editCut	MainWindow.cpp	/^void MainWindow::editCut()$/;"	f	class:MainWindow
editDelete	MainWindow.cpp	/^void MainWindow::editDelete()$/;"	f	class:MainWindow
editDeselectAll	MainWindow.cpp	/^void MainWindow::editDeselectAll()$/;"	f	class:MainWindow
editMachine	MachineManager.cpp	/^void MachineManager::editMachine(Project* p)$/;"	f	class:MachineManager
editMenuAboutToShow	MainWindow.cpp	/^void MainWindow::editMenuAboutToShow()$/;"	f	class:MainWindow
editOptions	MainWindow.cpp	/^void MainWindow::editOptions()$/;"	f	class:MainWindow
editPaste	MainWindow.cpp	/^void MainWindow::editPaste()$/;"	f	class:MainWindow
editSelect	MainWindow.cpp	/^void MainWindow::editSelect()$/;"	f	class:MainWindow
editSelectAll	MainWindow.cpp	/^void MainWindow::editSelectAll()$/;"	f	class:MainWindow
editState	StateManager.cpp	/^void StateManager::editState(GState* s)$/;"	f	class:StateManager
editTransition	TransitionManager.cpp	/^void TransitionManager::editTransition(Machine* m, GTransition* t)$/;"	f	class:TransitionManager
editUndo	MainWindow.cpp	/^void MainWindow::editUndo()$/;"	f	class:MainWindow
enable0	SimulatorDlgImpl.h	/^    void enable0(bool e) { pb_bin0->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable1	SimulatorDlgImpl.h	/^    void enable1(bool e) { pb_bin1->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable10	SimulatorDlgImpl.h	/^    void enable10(bool e) { pb_bin10->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable11	SimulatorDlgImpl.h	/^    void enable11(bool e) { pb_bin11->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable12	SimulatorDlgImpl.h	/^    void enable12(bool e) { pb_bin12->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable13	SimulatorDlgImpl.h	/^    void enable13(bool e) { pb_bin13->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable14	SimulatorDlgImpl.h	/^    void enable14(bool e) { pb_bin14->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable15	SimulatorDlgImpl.h	/^    void enable15(bool e) { pb_bin15->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable2	SimulatorDlgImpl.h	/^    void enable2(bool e) { pb_bin2->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable3	SimulatorDlgImpl.h	/^    void enable3(bool e) { pb_bin3->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable4	SimulatorDlgImpl.h	/^    void enable4(bool e) { pb_bin4->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable5	SimulatorDlgImpl.h	/^    void enable5(bool e) { pb_bin5->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable6	SimulatorDlgImpl.h	/^    void enable6(bool e) { pb_bin6->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable7	SimulatorDlgImpl.h	/^    void enable7(bool e) { pb_bin7->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable8	SimulatorDlgImpl.h	/^    void enable8(bool e) { pb_bin8->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enable9	SimulatorDlgImpl.h	/^    void enable9(bool e) { pb_bin9->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enableButtons	Simulator.cpp	/^void Simulator::enableButtons()$/;"	f	class:Simulator
enableCompleteness	ICheckDlgImpl.h	/^    void enableCompleteness(bool ec=TRUE) {$/;"	f	class:ICheckDlgImpl
enableFrequency	SimulatorDlgImpl.h	/^    void enableFrequency(bool e) { frequency->setEnabled(e);$/;"	f	class:SimulatorDlgImpl
enableSend	SimulatorDlgImpl.h	/^    void enableSend(bool e) { pb_send->setEnabled(e); };$/;"	f	class:SimulatorDlgImpl
enableType	MachinePropertiesDlgImpl.h	/^    void enableType(bool et=TRUE) { bg_type->setEnabled(et); };$/;"	f	class:MachinePropertiesDlgImpl
end	Transition.h	/^    State* end;$/;"	m	class:Transition
endElement	XMLHandler.cpp	/^bool XMLHandler::endElement( const QString&, const QString&, const QString& qName)$/;"	f	class:XMLHandler
endstate	State.h	/^    bool endstate;$/;"	m	class:State
endx	GITransition.h	/^    double endx;$/;"	m	class:GITransition
endx	GTransition.h	/^    double endx;$/;"	m	class:GTransition
endy	GITransition.h	/^    double endy;$/;"	m	class:GITransition
endy	GTransition.h	/^    double endy;$/;"	m	class:GTransition
equals	IOInfo.cpp	/^bool IOInfo::equals(IOInfo* io)$/;"	f	class:IOInfo
escapePressed	ScrollView.cpp	/^void ScrollView::escapePressed()$/;"	f	class:ScrollView
escapeToChar	IOInfoASCII.cpp	/^char IOInfoASCII::escapeToChar(char c)$/;"	f	class:IOInfoASCII
eventlist	TableBuilder.h	/^    IOInfoList eventlist;$/;"	m	class:TableBuilder
expandList	IOInfo.cpp	/^void IOInfo::expandList(IOInfoList& input, IOInfoList& list, bool resolve_invert)$/;"	f	class:IOInfo
exportFile	FileIO.cpp	/^bool FileIO::exportFile(Project* p, Export* exp)$/;"	f	class:FileIO
exportdlg	FileIO.h	/^    QFileDialog* exportdlg;$/;"	m	class:FileIO
fileClose	MainWindow.cpp	/^bool MainWindow::fileClose()$/;"	f	class:MainWindow
fileExportAHDL	MainWindow.cpp	/^bool MainWindow::fileExportAHDL()$/;"	f	class:MainWindow
fileExportKISS	MainWindow.cpp	/^bool MainWindow::fileExportKISS()$/;"	f	class:MainWindow
fileExportRagel	MainWindow.cpp	/^bool MainWindow::fileExportRagel()$/;"	f	class:MainWindow
fileExportSTASCII	MainWindow.cpp	/^bool MainWindow::fileExportSTASCII()$/;"	f	class:MainWindow
fileExportSTHTML	MainWindow.cpp	/^bool MainWindow::fileExportSTHTML()$/;"	f	class:MainWindow
fileExportSTLatex	MainWindow.cpp	/^bool MainWindow::fileExportSTLatex()$/;"	f	class:MainWindow
fileExportVHDL	MainWindow.cpp	/^bool MainWindow::fileExportVHDL()$/;"	f	class:MainWindow
fileExportVerilog	MainWindow.cpp	/^bool MainWindow::fileExportVerilog()$/;"	f	class:MainWindow
fileFilter	ExportAHDL.cpp	/^QString ExportAHDL::fileFilter()$/;"	f	class:ExportAHDL
fileFilter	ExportKISS.cpp	/^QString ExportKISS::fileFilter()$/;"	f	class:ExportKISS
fileFilter	ExportRagel.cpp	/^QString ExportRagel::fileFilter()$/;"	f	class:ExportRagel
fileFilter	ExportStateTable.cpp	/^QString ExportStateTable::fileFilter()$/;"	f	class:ExportStateTable
fileFilter	ExportVHDL.cpp	/^QString ExportVHDL::fileFilter()$/;"	f	class:ExportVHDL
fileFilter	ExportVerilog.cpp	/^QString ExportVerilog::fileFilter()$/;"	f	class:ExportVerilog
fileFilter	TableBuilderASCII.cpp	/^QString TableBuilderASCII::fileFilter()$/;"	f	class:TableBuilderASCII
fileFilter	TableBuilderHTML.cpp	/^QString TableBuilderHTML::fileFilter()$/;"	f	class:TableBuilderHTML
fileFilter	TableBuilderLatex.cpp	/^QString TableBuilderLatex::fileFilter()$/;"	f	class:TableBuilderLatex
fileNew	MainWindow.cpp	/^void MainWindow::fileNew()$/;"	f	class:MainWindow
fileOpen	MainWindow.cpp	/^void MainWindow::fileOpen()$/;"	f	class:MainWindow
fileOpenRecent	MainWindow.cpp	/^void MainWindow::fileOpenRecent(QString fileName)$/;"	f	class:MainWindow
fileOpenRecent0	MainWindow.cpp	/^void MainWindow::fileOpenRecent0()$/;"	f	class:MainWindow
fileOpenRecent1	MainWindow.cpp	/^void MainWindow::fileOpenRecent1()$/;"	f	class:MainWindow
fileOpenRecent2	MainWindow.cpp	/^void MainWindow::fileOpenRecent2()$/;"	f	class:MainWindow
fileOpenRecent3	MainWindow.cpp	/^void MainWindow::fileOpenRecent3()$/;"	f	class:MainWindow
fileOpenRecent4	MainWindow.cpp	/^void MainWindow::fileOpenRecent4()$/;"	f	class:MainWindow
fileOpenRecent5	MainWindow.cpp	/^void MainWindow::fileOpenRecent5()$/;"	f	class:MainWindow
fileOpenRecent6	MainWindow.cpp	/^void MainWindow::fileOpenRecent6()$/;"	f	class:MainWindow
fileOpenRecent7	MainWindow.cpp	/^void MainWindow::fileOpenRecent7()$/;"	f	class:MainWindow
fileOpenRecent8	MainWindow.cpp	/^void MainWindow::fileOpenRecent8()$/;"	f	class:MainWindow
fileOpenRecent9	MainWindow.cpp	/^void MainWindow::fileOpenRecent9()$/;"	f	class:MainWindow
filePrint	MainWindow.cpp	/^void MainWindow::filePrint()$/;"	f	class:MainWindow
fileQuit	MainWindow.cpp	/^void MainWindow::fileQuit()$/;"	f	class:MainWindow
fileSave	MainWindow.cpp	/^bool MainWindow::fileSave()$/;"	f	class:MainWindow
fileSaveAs	MainWindow.cpp	/^bool MainWindow::fileSaveAs()$/;"	f	class:MainWindow
filedlg	FileIO.h	/^    QFileDialog* filedlg;$/;"	m	class:FileIO
fileio	MainWindow.h	/^    FileIO* fileio;$/;"	m	class:MainWindow
findChar	IOInfoASCII.cpp	/^int IOInfoASCII::findChar(const unsigned char* ascii, int len, unsigned char c)$/;"	f	class:IOInfoASCII
firstTransitionDraw	ScrollView.h	/^    bool firstTransitionDraw;$/;"	m	class:ScrollView
focusInEvent	MainWindow.cpp	/^void MainWindow::focusInEvent(QFocusEvent* e)$/;"	f	class:MainWindow
format	MimeMachine.cpp	/^const char* MimeMachine::format(int i) const$/;"	f	class:MimeMachine
freeTextClicked	MachinePropertiesDlg.ui.h	/^void MachinePropertiesDlg::freeTextClicked()$/;"	f	class:MachinePropertiesDlg
freeTextClicked	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::freeTextClicked()$/;"	f	class:MachinePropertiesDlgImpl
freeTextClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::freeTextClicked()$/;"	f	class:TransitionPropertiesDlg
freeTextClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::freeTextClicked()$/;"	f	class:TransitionPropertiesDlgImpl
frequency	SimulatorDlg.h	/^    WSpinBox* frequency;$/;"	m	class:SimulatorDlg
from	XMLHandler.h	/^    QString from;$/;"	m	class:XMLHandler
fromcont	XMLHandler.h	/^    bool fromcont;$/;"	m	class:XMLHandler
getAHDLSyncReset	Options.h	/^    bool getAHDLSyncReset() { return ahdl_sync_reset; };$/;"	f	class:Options
getAHDLUseMoore	Options.h	/^    bool getAHDLUseMoore() { return ahdl_use_moore; };$/;"	f	class:Options
getActExportFileName	FileIO.h	/^    QString getActExportFileName() { QFileInfo fi(act_exportfile); return fi.fileName(); };$/;"	f	class:FileIO
getActFileName	FileIO.h	/^    QString getActFileName() { QFileInfo fi(act_file); return fi.fileName(); };$/;"	f	class:FileIO
getActFilePath	FileIO.h	/^    QString getActFilePath() \/\/\/ Gets actual file name.$/;"	f	class:FileIO
getAction	Undo.h	/^    int getAction() { return action; };$/;"	f	class:Undo
getAnyInput	IOInfo.h	/^    virtual bool getAnyInput() const { return any; };$/;"	f	class:IOInfo
getAnyInput	TransitionPropertiesDlgImpl.h	/^    bool getAnyInput() { return cb_any->isChecked(); };$/;"	f	class:TransitionPropertiesDlgImpl
getAnyInputDescriptor	OptDisplayDlgImpl.h	/^    QString getAnyInputDescriptor() { return any_input_descriptor; };$/;"	f	class:OptDisplayDlgImpl
getAnyInputDescriptor	Options.h	/^    QString getAnyInputDescriptor() { return any_input_descriptor; };$/;"	f	class:Options
getArrowType	Machine.h	/^    int getArrowType() { return arrow_type; };$/;"	f	class:Machine
getArrowType	MachinePropertiesDlgImpl.h	/^    int getArrowType() { return lbox_arrowtype->currentItem(); };$/;"	f	class:MachinePropertiesDlgImpl
getAuthor	AppInfo.h	/^    QString getAuthor() \/\/\/ returns author of application$/;"	f	class:AppInfo
getBody	TableBuilder.cpp	/^QString TableBuilder::getBody()$/;"	f	class:TableBuilder
getBoundingRect	Selection.cpp	/^void Selection::getBoundingRect(double& l, double& t, double& r, double& b,$/;"	f	class:Selection
getBrush	GState.h	/^    QBrush& getBrush() { return brush; };$/;"	f	class:GState
getCPoint1	GTransition.h	/^    void getCPoint1(double& x, double& y) { x = control1x; y = control1y; };$/;"	f	class:GTransition
getCPoint2	GTransition.h	/^    void getCPoint2(double& x, double& y) { x = control2x; y = control2y; };$/;"	f	class:GTransition
getCanvasSize	Machine.h	/^    void getCanvasSize(int& w, int& h) { w=canvas_size.width();$/;"	f	class:Machine
getCode	StatePropertiesDlgImpl.h	/^    QString getCode() {return le_code->text(); };$/;"	f	class:StatePropertiesDlgImpl
getCodeStr	State.cpp	/^QString State::getCodeStr(int type\/*=-1*\/)$/;"	f	class:State
getColor	GState.h	/^    QColor getColor() { return pen.color(); };$/;"	f	class:GState
getColor	StatePropertiesDlgImpl.h	/^    QColor getColor() { return color; };$/;"	f	class:StatePropertiesDlgImpl
getCommentEnd	TableBuilderASCII.h	/^    QString getCommentEnd() { return ""; };$/;"	f	class:TableBuilderASCII
getCommentEnd	TableBuilderHTML.h	/^    QString getCommentEnd() { return "-->"; };$/;"	f	class:TableBuilderHTML
getCommentEnd	TableBuilderLatex.h	/^    QString getCommentEnd() { return ""; };$/;"	f	class:TableBuilderLatex
getCommentStart	TableBuilderASCII.h	/^    QString getCommentStart() { return "#"; };$/;"	f	class:TableBuilderASCII
getCommentStart	TableBuilderHTML.h	/^    QString getCommentStart() { return "<!--"; };$/;"	f	class:TableBuilderHTML
getCommentStart	TableBuilderLatex.h	/^    QString getCommentStart() { return "%"; };$/;"	f	class:TableBuilderLatex
getContextObject	ScrollView.cpp	/^GObject* ScrollView::getContextObject(int& type)$/;"	f	class:ScrollView
getContextObject	Selection.h	/^    GObject* getContextObject(int& type) { type = co_type; return context_object; };$/;"	f	class:Selection
getCopyList	Undo.h	/^    QList<GTransition>* getCopyList() { return &copylist; };$/;"	f	class:Undo
getCreateAction	ExportRagelDlgImpl.h	/^    bool getCreateAction() { return create_action; };$/;"	f	class:ExportRagelDlgImpl
getDefaultDescriptor	OptDisplayDlgImpl.h	/^    QString getDefaultDescriptor() { return default_descriptor; };$/;"	f	class:OptDisplayDlgImpl
getDefaultTransition	TransitionPropertiesDlgImpl.h	/^    bool getDefaultTransition() { return cb_default->isChecked(); };$/;"	f	class:TransitionPropertiesDlgImpl
getDefaultTransitionDescriptor	Options.h	/^    QString getDefaultTransitionDescriptor() { return default_descriptor; };$/;"	f	class:Options
getDescription	GTransition.h	/^    QString getDescription() {return description; };$/;"	f	class:GTransition
getDescription	State.h	/^    QString getDescription() { return sdescription; };$/;"	f	class:State
getDescription	StatePropertiesDlgImpl.h	/^    QString getDescription() {return te_description->text(); };$/;"	f	class:StatePropertiesDlgImpl
getDescription	TransitionPropertiesDlgImpl.h	/^    QString getDescription() { return te_description->text(); };$/;"	f	class:TransitionPropertiesDlgImpl
getDisplayIONames	OptDisplayDlgImpl.h	/^    bool getDisplayIONames() { return ionames; };$/;"	f	class:OptDisplayDlgImpl
getDisplayIONames	Options.h	/^    bool getDisplayIONames() { return ionames; };$/;"	f	class:Options
getDomDocument	Project.cpp	/^QDomDocument Project::getDomDocument(bool onlyselected\/*=FALSE*\/, GObject* obj\/*=NULL*\/)$/;"	f	class:Project
getDoubleTList	Undo.h	/^    QList<dtlist>* getDoubleTList() { return &doubletlist; };$/;"	f	class:Undo
getDragMultiple	ScrollView.h	/^    bool getDragMultiple() { return dragMultiple; };$/;"	f	class:ScrollView
getDrawBox	OptDisplayDlgImpl.h	/^    bool getDrawBox() { return bdrawbox; };$/;"	f	class:OptDisplayDlgImpl
getDrawBox	Options.h	/^    bool getDrawBox() { return bdrawbox; };$/;"	f	class:Options
getEmptyFieldString	FileIO.h	/^    QString getEmptyFieldString() { return "<none>"; };$/;"	f	class:FileIO
getEncoding	State.h	/^    int getEncoding() { return code; };$/;"	f	class:State
getEnd	Transition.h	/^    State* getEnd() { return end; };$/;"	f	class:Transition
getEndPos	GITransition.h	/^    void getEndPos(double& x, double& y) \/\/\/ Gets coordinates of end point$/;"	f	class:GITransition
getEndPos	GTransition.h	/^    void getEndPos(double& x, double& y) { x = endx; y = endy; };$/;"	f	class:GTransition
getEndStates	Machine.cpp	/^QList<GState> Machine::getEndStates()$/;"	f	class:Machine
getEventList	Machine.cpp	/^void Machine::getEventList(IOInfoList& list, Options* opt)$/;"	f	class:Machine
getExportAHDL	MainWindow.h	/^    ExportAHDLDlgImpl* getExportAHDL() { return ahdl_export; };$/;"	f	class:MainWindow
getExportDir	FileIO.h	/^    QString getExportDir() { return act_export_dir; };$/;"	f	class:FileIO
getExportRagel	MainWindow.h	/^    ExportRagelDlgImpl* getExportRagel() { return ragel_export; };$/;"	f	class:MainWindow
getExportStateTable	MainWindow.h	/^    ExportStateTableDlgImpl* getExportStateTable() {return statetable_export;};$/;"	f	class:MainWindow
getExportVHDL	MainWindow.h	/^    ExportVHDLDlgImpl* getExportVHDL() { return vhdl_export; };$/;"	f	class:MainWindow
getExportVerilog	MainWindow.h	/^    ExportVerilogDlgImpl* getExportVerilog() { return ver_export; };$/;"	f	class:MainWindow
getFoot	TableBuilderASCII.cpp	/^QString TableBuilderASCII::getFoot()$/;"	f	class:TableBuilderASCII
getFoot	TableBuilderHTML.cpp	/^QString TableBuilderHTML::getFoot()$/;"	f	class:TableBuilderHTML
getFoot	TableBuilderLatex.cpp	/^QString TableBuilderLatex::getFoot()$/;"	f	class:TableBuilderLatex
getGridColor	OptDisplayDlgImpl.h	/^    QColor getGridColor() { return gridcolor; };$/;"	f	class:OptDisplayDlgImpl
getGridColor	Options.h	/^    QColor getGridColor() { return gridColor; };$/;"	f	class:Options
getGridSize	OptDisplayDlgImpl.h	/^    int getGridSize() { return sb_gridsize->value(); };$/;"	f	class:OptDisplayDlgImpl
getGridSize	Options.h	/^    int getGridSize() { return gridSize; };$/;"	f	class:Options
getHead	TableBuilderASCII.cpp	/^QString TableBuilderASCII::getHead()$/;"	f	class:TableBuilderASCII
getHead	TableBuilderHTML.cpp	/^QString TableBuilderHTML::getHead()$/;"	f	class:TableBuilderHTML
getHead	TableBuilderLatex.cpp	/^QString TableBuilderLatex::getHead()$/;"	f	class:TableBuilderLatex
getIOMark	OptDisplayDlgImpl.h	/^    bool getIOMark() { return iomark; };$/;"	f	class:OptDisplayDlgImpl
getIOMark	Options.h	/^    bool getIOMark() { return iomark; };$/;"	f	class:Options
getIncludeOutputs	ExportStateTableDlgImpl.h	/^    bool getIncludeOutputs() { return includeout; };$/;"	f	class:ExportStateTableDlgImpl
getInfo	IOInfoASCII.h	/^    QString getInfo() { return info; };$/;"	f	class:IOInfoASCII
getInfo	IOInfoBin.h	/^    char* getInfo() { return info; };$/;"	f	class:IOInfoBin
getInfo	IOInfoText.h	/^    QString getInfo() { return info; };$/;"	f	class:IOInfoText
getInfo	Transition.h	/^    TransitionInfo* getInfo() { return info; };$/;"	f	class:Transition
getInitialState	Machine.h	/^    GState* getInitialState() { return initial_state; };$/;"	f	class:Machine
getInitialState	Undo.h	/^    GState* getInitialState() { return istate; };$/;"	f	class:Undo
getInitialTransition	Machine.h	/^    GITransition* getInitialTransition() { return initial_transition; };$/;"	f	class:Machine
getInitialTransition	Undo.h	/^    GITransition* getInitialTransition() { return itrans; };$/;"	f	class:Undo
getInitialTransition2	Undo.h	/^    GITransition* getInitialTransition2() { return itrans2; };$/;"	f	class:Undo
getInputInfo	TransitionInfo.h	/^    IOInfo* getInputInfo() { return inputs; };$/;"	f	class:TransitionInfo
getInputNameList	Machine.h	/^    QStringList getInputNameList() { return input_names; };$/;"	f	class:Machine
getInputs	SimulatorDlgImpl.h	/^    QString getInputs() { return le_inputs->text(); };$/;"	f	class:SimulatorDlgImpl
getInputs	TransitionInfoBin.h	/^    \/*char**\/ IOInfoBin getInputs() const { return *(IOInfoBin*)inputs; };$/;"	f	class:TransitionInfoBin
getInputs	TransitionPropertiesDlgImpl.h	/^    QString getInputs() { return le_input->text(); };$/;"	f	class:TransitionPropertiesDlgImpl
getInputsStr	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getInputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoASCII
getInputsStr	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getInputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoBin
getInputsStr	TransitionInfoText.cpp	/^QString TransitionInfoText::getInputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoText
getInputsStrASCII	TransitionInfo.h	/^    virtual QString getInputsStrASCII() { return ""; };$/;"	f	class:TransitionInfo
getInputsStrASCII	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getInputsStrASCII()$/;"	f	class:TransitionInfoASCII
getInputsStrASCII	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getInputsStrASCII()$/;"	f	class:TransitionInfoBin
getInputsStrASCII	TransitionInfoText.cpp	/^QString TransitionInfoText::getInputsStrASCII()$/;"	f	class:TransitionInfoText
getInputsStrBin	TransitionInfo.h	/^    virtual QString getInputsStrBin(Machine* =NULL, Options* =NULL) { return ""; };$/;"	f	class:TransitionInfo
getInputsStrBin	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getInputsStrBin(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoBin
getInputsStrHex	TransitionInfo.h	/^    virtual QString getInputsStrHex(\/*int*\/) { return ""; };$/;"	f	class:TransitionInfo
getInputsStrHex	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getInputsStrHex(\/*int numin*\/)$/;"	f	class:TransitionInfoBin
getInversionDescriptor	OptDisplayDlgImpl.h	/^    QString getInversionDescriptor() { return inversion_descriptor; };$/;"	f	class:OptDisplayDlgImpl
getInversionDescriptor	Options.h	/^    QString getInversionDescriptor() { return inversion_descriptor; };$/;"	f	class:Options
getInvert	TransitionPropertiesDlgImpl.h	/^    bool getInvert() { return cb_invert->isChecked(); };$/;"	f	class:TransitionPropertiesDlgImpl
getLangAction	ExportRagelDlgImpl.h	/^    int getLangAction() { return lang_action; };$/;"	f	class:ExportRagelDlgImpl
getLanguage	MainWindow.h	/^    QString getLanguage() { return language; };$/;"	f	class:MainWindow
getLanguage	OptGeneralDlgImpl.cpp	/^QString OptGeneralDlgImpl::getLanguage()$/;"	f	class:OptGeneralDlgImpl
getLength	IOInfoASCII.h	/^    int getLength() const { return info.length()*8; } ;$/;"	f	class:IOInfoASCII
getLength	IOInfoBin.cpp	/^int IOInfoBin::getLength() const$/;"	f	class:IOInfoBin
getLength	IOInfoText.h	/^    int getLength() const { return info.length()*8; } ;$/;"	f	class:IOInfoText
getLineWidth	GState.h	/^    int getLineWidth() { return pen.width(); };$/;"	f	class:GState
getLineWidth	StatePropertiesDlgImpl.h	/^    QString getLineWidth() {return le_linewidth->text(); };$/;"	f	class:StatePropertiesDlgImpl
getLockStates	Options.h	/^    bool getLockStates() { return lockstates; };$/;"	f	class:Options
getLockTransitions	Options.h	/^    bool getLockTransitions() { return locktransitions; };$/;"	f	class:Options
getMRUList	MainControl.h	/^    QStringList& getMRUList() { return mru_list; };$/;"	f	class:MainControl
getMachineInfo	Undo.cpp	/^void Undo::getMachineInfo(Machine*& m, QString& n, int& t, int& nb, QStringList& olistm, $/;"	f	class:Undo
getMain	Project.h	/^    MainWindow* getMain() { return main; };$/;"	f	class:Project
getMaxRect	GState.cpp	/^DRect GState::getMaxRect()$/;"	f	class:GState
getMealyInputNames	Machine.cpp	/^QString Machine::getMealyInputNames(QString separator\/*=", "*\/)$/;"	f	class:Machine
getMealyInputNames	MachinePropertiesDlgImpl.h	/^    QString getMealyInputNames() { return le_mealyin->text(); };$/;"	f	class:MachinePropertiesDlgImpl
getMealyOutputNames	Machine.cpp	/^QString Machine::getMealyOutputNames(QString separator\/*=", "*\/)$/;"	f	class:Machine
getMealyOutputNames	MachinePropertiesDlgImpl.h	/^    QString getMealyOutputNames() { return le_mealyout->text(); };$/;"	f	class:MachinePropertiesDlgImpl
getMinus1	IOInfoASCII.cpp	/^IOInfo* IOInfoASCII::getMinus1()$/;"	f	class:IOInfoASCII
getMinus1	IOInfoBin.cpp	/^IOInfo* IOInfoBin::getMinus1()$/;"	f	class:IOInfoBin
getMinus1	IOInfoText.cpp	/^IOInfo* IOInfoText::getMinus1()$/;"	f	class:IOInfoText
getMode	DocStatus.h	/^    int getMode() \/\/\/ Gets the current mode of the document. $/;"	f	class:DocStatus
getMode	MainWindow.h	/^    int getMode() { return doc_status.getMode(); };$/;"	f	class:MainWindow
getModified	Undo.h	/^    bool getModified() { return modified; };$/;"	f	class:Undo
getMooreOutputList	Machine.h	/^    QStringList getMooreOutputList() { return output_names_moore; };$/;"	f	class:Machine
getMooreOutputNames	Machine.cpp	/^QString Machine::getMooreOutputNames(QString separator\/*=", "*\/)$/;"	f	class:Machine
getMooreOutputNames	MachinePropertiesDlgImpl.h	/^    QString getMooreOutputNames() { return le_mooreout->text(); };$/;"	f	class:MachinePropertiesDlgImpl
getMooreOutputNamesAsync	Machine.cpp	/^QString Machine::getMooreOutputNamesAsync(QString separator\/*=", "*\/)$/;"	f	class:Machine
getMooreOutputs	State.h	/^    IOInfo* getMooreOutputs() { return moore_outputs; };$/;"	f	class:State
getMooreOutputs	StatePropertiesDlgImpl.h	/^    QString getMooreOutputs() {return le_mooreoutputs->text(); };$/;"	f	class:StatePropertiesDlgImpl
getMooreOutputsStr	State.cpp	/^QString State::getMooreOutputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:State
getMovedBy	Undo.h	/^    void getMovedBy(double& x, double& y) { x=movedbyx; y=movedbyy; };$/;"	f	class:Undo
getName	Machine.h	/^    QString getName() { return name; };$/;"	f	class:Machine
getName	MachinePropertiesDlgImpl.h	/^    QString getName() { return le_name->text(); };$/;"	f	class:MachinePropertiesDlgImpl
getName	StatePropertiesDlgImpl.h	/^    QString getName() {return le_name->text(); };$/;"	f	class:StatePropertiesDlgImpl
getNewBinCode	StateManager.cpp	/^QString StateManager::getNewBinCode()$/;"	f	class:StateManager
getNewCode	Machine.cpp	/^int Machine::getNewCode()$/;"	f	class:Machine
getNewCode	StateManager.cpp	/^int StateManager::getNewCode()$/;"	f	class:StateManager
getNewName	StateManager.cpp	/^QString StateManager::getNewName()$/;"	f	class:StateManager
getNumEncodingBits	Machine.cpp	/^int Machine::getNumEncodingBits()$/;"	f	class:Machine
getNumInputs	Machine.h	/^    int getNumInputs() { return num_input; };$/;"	f	class:Machine
getNumInputs	MachinePropertiesDlgImpl.h	/^    int getNumInputs() { return sb_mealyin->value(); };$/;"	f	class:MachinePropertiesDlgImpl
getNumInputs	Undo.h	/^    int getNumInputs() { return numin; };$/;"	f	class:Undo
getNumMooreOutputs	Machine.h	/^    int getNumMooreOutputs() { return num_moore_output; };$/;"	f	class:Machine
getNumMooreOutputs	MachinePropertiesDlgImpl.h	/^    int getNumMooreOutputs() { return sb_mooreout->value(); };$/;"	f	class:MachinePropertiesDlgImpl
getNumMooreOutputs	Undo.h	/^    int getNumMooreOutputs() { return nummooreout; };$/;"	f	class:Undo
getNumOutputs	Machine.h	/^    int getNumOutputs() { return num_output; };$/;"	f	class:Machine
getNumOutputs	MachinePropertiesDlgImpl.h	/^    int getNumOutputs() { return sb_mealyout->value(); };$/;"	f	class:MachinePropertiesDlgImpl
getNumOutputs	Undo.h	/^    int getNumOutputs() { return numout; };$/;"	f	class:Undo
getNumStates	Machine.cpp	/^int Machine::getNumStates()$/;"	f	class:Machine
getObject	Machine.cpp	/^GObject* Machine::getObject(QPoint p, double scale, int& type)$/;"	f	class:Machine
getOptDisplay	MainWindow.h	/^    OptDisplayDlgImpl* getOptDisplay() { return opt_display; };$/;"	f	class:MainWindow
getOptGeneral	MainWindow.h	/^    OptGeneralDlgImpl* getOptGeneral() { return opt_general; };$/;"	f	class:MainWindow
getOptPrinting	MainWindow.h	/^    OptPrintingDlgImpl* getOptPrinting() { return opt_printing; };$/;"	f	class:MainWindow
getOptions	MainWindow.h	/^    Options* getOptions() { return &doc_options; };$/;"	f	class:MainWindow
getOrientation	ExportStateTableDlgImpl.h	/^    int getOrientation() { return orientation; };$/;"	f	class:ExportStateTableDlgImpl
getOutputInfo	TransitionInfo.h	/^    IOInfo* getOutputInfo() { return outputs; };$/;"	f	class:TransitionInfo
getOutputNameList	Machine.h	/^    QStringList getOutputNameList() { return output_names; };$/;"	f	class:Machine
getOutputs	TransitionInfoBin.h	/^    \/*char**\/ IOInfoBin getOutputs() const { return *(IOInfoBin*)outputs; };$/;"	f	class:TransitionInfoBin
getOutputs	TransitionPropertiesDlgImpl.h	/^    QString getOutputs() { return le_output->text(); };$/;"	f	class:TransitionPropertiesDlgImpl
getOutputsStr	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getOutputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoASCII
getOutputsStr	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getOutputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoBin
getOutputsStr	TransitionInfoText.cpp	/^QString TransitionInfoText::getOutputsStr(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoText
getOutputsStrASCII	TransitionInfo.h	/^    virtual QString getOutputsStrASCII() { return ""; };$/;"	f	class:TransitionInfo
getOutputsStrASCII	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getOutputsStrASCII()$/;"	f	class:TransitionInfoASCII
getOutputsStrASCII	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getOutputsStrASCII()$/;"	f	class:TransitionInfoBin
getOutputsStrASCII	TransitionInfoText.cpp	/^QString TransitionInfoText::getOutputsStrASCII()$/;"	f	class:TransitionInfoText
getOutputsStrBin	TransitionInfo.h	/^    virtual QString getOutputsStrBin(Machine* =NULL, Options* =NULL) { return ""; };$/;"	f	class:TransitionInfo
getOutputsStrBin	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getOutputsStrBin(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:TransitionInfoASCII
getOutputsStrBin	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getOutputsStrBin(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:TransitionInfoBin
getOutputsStrBin	TransitionInfoText.cpp	/^QString TransitionInfoText::getOutputsStrBin(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:TransitionInfoText
getOutputsStrHex	TransitionInfo.h	/^    virtual QString getOutputsStrHex(\/*int*\/) { return ""; };$/;"	f	class:TransitionInfo
getOutputsStrHex	TransitionInfoASCII.cpp	/^QString TransitionInfoASCII::getOutputsStrHex()$/;"	f	class:TransitionInfoASCII
getOutputsStrHex	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getOutputsStrHex(\/*int numout*\/)$/;"	f	class:TransitionInfoBin
getOutputsStrHex	TransitionInfoText.cpp	/^QString TransitionInfoText::getOutputsStrHex()$/;"	f	class:TransitionInfoText
getPen	GState.h	/^    QPen& getPen() { return pen; };$/;"	f	class:GState
getPhantomState	Machine.h	/^    GState* getPhantomState() { return phantom_state; };$/;"	f	class:Machine
getPlus1	IOInfoASCII.cpp	/^IOInfo* IOInfoASCII::getPlus1()$/;"	f	class:IOInfoASCII
getPlus1	IOInfoBin.cpp	/^IOInfo* IOInfoBin::getPlus1()$/;"	f	class:IOInfoBin
getPlus1	IOInfoText.cpp	/^IOInfo* IOInfoText::getPlus1()$/;"	f	class:IOInfoText
getPoint	Grid.cpp	/^void Grid::getPoint(double x, double y, double& gx, double& gy)$/;"	f	class:Grid
getPos	GObject.h	/^    void getPos(double& x, double& y) { x=xpos; y=ypos; };$/;"	f	class:GObject
getPrintHeader	OptPrintingDlgImpl.h	/^    bool getPrintHeader() { return print_header; };$/;"	f	class:OptPrintingDlgImpl
getPrintHeader	Options.h	/^    bool getPrintHeader() { return print_header; };$/;"	f	class:Options
getProject	Machine.h	/^    Project* getProject() { return project; };$/;"	f	class:Machine
getProject	Undo.h	/^    Project* getProject() { return project; };$/;"	f	class:Undo
getQRect	DRect.cpp	/^QRect DRect::getQRect()$/;"	f	class:DRect
getQRect	DRect.cpp	/^QRect DRect::getQRect(double scale)$/;"	f	class:DRect
getRadius	GState.h	/^    int getRadius() { return radius; };$/;"	f	class:GState
getRadius	StatePropertiesDlgImpl.h	/^    QString getRadius() {return le_radius->text(); };$/;"	f	class:StatePropertiesDlgImpl
getRagelConditions	IOInfoASCII.cpp	/^QStringList IOInfoASCII::getRagelConditions()$/;"	f	class:IOInfoASCII
getRagelConditions	IOInfoBin.cpp	/^QStringList IOInfoBin::getRagelConditions()$/;"	f	class:IOInfoBin
getRagelConditions	IOInfoText.h	/^    QStringList getRagelConditions() { QStringList sl; return sl; };$/;"	f	class:IOInfoText
getRagelCreateAction	Options.h	/^    bool getRagelCreateAction() { return ragel_create_action; };$/;"	f	class:Options
getRagelLangAction	Options.h	/^    int getRagelLangAction() { return ragel_lang_action; };$/;"	f	class:Options
getResolveInverted	ExportStateTableDlgImpl.h	/^    bool getResolveInverted() { return resolve_inverted; };$/;"	f	class:ExportStateTableDlgImpl
getRole	IOInfo.h	/^    bool getRole() const { return role; };$/;"	f	class:IOInfo
getRow	TableBuilderASCII.cpp	/^QString TableBuilderASCII::getRow(GState* s)$/;"	f	class:TableBuilderASCII
getRow	TableBuilderASCII.cpp	/^QString TableBuilderASCII::getRow(IOInfo* io)$/;"	f	class:TableBuilderASCII
getRow	TableBuilderHTML.cpp	/^QString TableBuilderHTML::getRow(GState* s)$/;"	f	class:TableBuilderHTML
getRow	TableBuilderHTML.cpp	/^QString TableBuilderHTML::getRow(IOInfo* io)$/;"	f	class:TableBuilderHTML
getRow	TableBuilderLatex.cpp	/^QString TableBuilderLatex::getRow(GState* s)$/;"	f	class:TableBuilderLatex
getRow	TableBuilderLatex.cpp	/^QString TableBuilderLatex::getRow(IOInfo* io)$/;"	f	class:TableBuilderLatex
getSFont	Machine.h	/^    QFont& getSFont() { return state_font; };$/;"	f	class:Machine
getSFont	MachinePropertiesDlgImpl.h	/^    QFont getSFont() { return sfont; };$/;"	f	class:MachinePropertiesDlgImpl
getSList	Machine.h	/^    QList<GState>& getSList() { return state_list; };$/;"	f	class:Machine
getSList	Selection.h	/^    QList<GState>& getSList() { return ssel_list; };$/;"	f	class:Selection
getSList	Undo.h	/^    QList<GState>* getSList() { return &slist; };$/;"	f	class:Undo
getSList2	Undo.h	/^    QList<GState>* getSList2() { return &slist2; };$/;"	f	class:Undo
getScale	ScrollView.cpp	/^double ScrollView::getScale()$/;"	f	class:ScrollView
getScale	Zoom.h	/^    double getScale() { return scale; };$/;"	f	class:Zoom
getScrollView	MainWindow.h	/^    ScrollView* getScrollView() { return wscroll; };$/;"	f	class:MainWindow
getSelection	ScrollView.h	/^    Selection* getSelection() { return selection; };$/;"	f	class:ScrollView
getSelectionRect	ScrollView.h	/^    DRect getSelectionRect() { return selectionRect; };$/;"	f	class:ScrollView
getSeparator	TransitionInfo.h	/^    virtual QString getSeparator(Options*) { return ""; };$/;"	f	class:TransitionInfo
getSeparator	TransitionInfoASCII.h	/^    QString getSeparator(Options* ) { return "\/"; };$/;"	f	class:TransitionInfoASCII
getSeparator	TransitionInfoBin.cpp	/^QString TransitionInfoBin::getSeparator(Options* opt)$/;"	f	class:TransitionInfoBin
getSeparator	TransitionInfoText.h	/^    QString getSeparator(Options* ) { return " \/ "; };$/;"	f	class:TransitionInfoText
getShadowColor	OptDisplayDlgImpl.h	/^    QColor getShadowColor() { return shadowcolor; };$/;"	f	class:OptDisplayDlgImpl
getShadows	OptDisplayDlgImpl.h	/^    bool getShadows() { return bshadows; };$/;"	f	class:OptDisplayDlgImpl
getSingles	IOInfoASCII.cpp	/^QList<IOInfo> IOInfoASCII::getSingles()$/;"	f	class:IOInfoASCII
getSingles	IOInfoBin.cpp	/^QList<IOInfo> IOInfoBin::getSingles()$/;"	f	class:IOInfoBin
getSingles	IOInfoText.cpp	/^QList<IOInfo> IOInfoText::getSingles()$/;"	f	class:IOInfoText
getSinglesInversion	IOInfoASCII.cpp	/^QList<IOInfo> IOInfoASCII::getSinglesInversion()$/;"	f	class:IOInfoASCII
getSinglesInversion	IOInfoBin.cpp	/^QList<IOInfo> IOInfoBin::getSinglesInversion()$/;"	f	class:IOInfoBin
getSinglesInversion	IOInfoText.cpp	/^QList<IOInfo> IOInfoText::getSinglesInversion()$/;"	f	class:IOInfoText
getStart	Transition.h	/^    State* getStart() { return start; };$/;"	f	class:Transition
getStartDescriptor	OptDisplayDlgImpl.h	/^    QString getStartDescriptor() { return start_descriptor; };$/;"	f	class:OptDisplayDlgImpl
getStartDescriptor	Options.h	/^    QString getStartDescriptor() { return start_descriptor; };$/;"	f	class:Options
getState	Machine.cpp	/^GState* Machine::getState(QPoint p, double scale)$/;"	f	class:Machine
getState	Machine.cpp	/^GState* Machine::getState(int code)$/;"	f	class:Machine
getState	Undo.h	/^    GState* getState() { return state; };$/;"	f	class:Undo
getState2	Undo.h	/^    GState* getState2() { return state2; };$/;"	f	class:Undo
getStateEncodingOutputNames	Machine.cpp	/^QString Machine::getStateEncodingOutputNames(QString separator\/*=", "*\/)$/;"	f	class:Machine
getStateName	State.h	/^    QString getStateName() { return sname; };$/;"	f	class:State
getStateShadowColor	Options.h	/^    QColor getStateShadowColor() { return stateShadowColor; };$/;"	f	class:Options
getStateShadows	Options.h	/^    bool getStateShadows() { return stateShadows; };$/;"	f	class:Options
getStateTableIncludeOut	Options.h	/^    bool getStateTableIncludeOut() { return statetable_includeout; };$/;"	f	class:Options
getStateTableOrientation	Options.h	/^    int getStateTableOrientation() { return statetable_orientation; };$/;"	f	class:Options
getStateTableResolveInverted	Options.h	/^    bool getStateTableResolveInverted() { return statetable_resolve_inverted; };$/;"	f	class:Options
getStatusBar	MainWindow.h	/^    StatusBar* getStatusBar() { return statusbar; };$/;"	f	class:MainWindow
getStdLogic	ExportVHDLDlgImpl.h	/^    bool getStdLogic() { return stdlogic; };$/;"	f	class:ExportVHDLDlgImpl
getSymbolicStates	ExportVHDLDlgImpl.h	/^    bool getSymbolicStates() { return symbolic_states; };$/;"	f	class:ExportVHDLDlgImpl
getSyncReset	ExportAHDLDlgImpl.h	/^    bool getSyncReset() { return sync_reset; };$/;"	f	class:ExportAHDLDlgImpl
getSyncReset	ExportVHDLDlgImpl.h	/^    bool getSyncReset() { return sync_reset; };$/;"	f	class:ExportVHDLDlgImpl
getSyncReset	ExportVerilogDlgImpl.h	/^    bool getSyncReset() { return sync_reset; };$/;"	f	class:ExportVerilogDlgImpl
getTFont	Machine.h	/^    QFont& getTFont() { return transition_font; };$/;"	f	class:Machine
getTFont	MachinePropertiesDlgImpl.h	/^    QFont getTFont() { return tfont; };$/;"	f	class:MachinePropertiesDlgImpl
getTList	Selection.h	/^    QList<GTransition>& getTList() { return tsel_list; };$/;"	f	class:Selection
getTList	Undo.h	/^    QList<GTransition>* getTList() { return &tlist; };$/;"	f	class:Undo
getTList2	Undo.h	/^    QList<GTransition>* getTList2() { return &tlist2; };$/;"	f	class:Undo
getToolTipInfo	GITransition.cpp	/^QString GITransition::getToolTipInfo(Machine* , Options*)$/;"	f	class:GITransition
getToolTipInfo	GState.cpp	/^QString GState::getToolTipInfo(Machine* \/*m=NULL*\/, Options* \/*opt=NULL*\/)$/;"	f	class:GState
getToolTipInfo	GTransition.cpp	/^QString GTransition::getToolTipInfo(Machine* m\/*=NULL*\/, Options* opt\/*=NULL*\/)$/;"	f	class:GTransition
getToolTipRect	GITransition.cpp	/^QRect GITransition::getToolTipRect(const QPoint& p)$/;"	f	class:GITransition
getToolTipRect	GState.cpp	/^QRect GState::getToolTipRect(const QPoint& )$/;"	f	class:GState
getToolTipRect	GTransition.cpp	/^QRect GTransition::getToolTipRect(const QPoint& p)$/;"	f	class:GTransition
getToolTips	OptDisplayDlgImpl.h	/^    bool getToolTips() { return btooltips; };$/;"	f	class:OptDisplayDlgImpl
getToolTips	Options.h	/^    bool getToolTips() { return tooltips; };$/;"	f	class:Options
getTransition	Undo.h	/^    GTransition* getTransition() { return transition; };$/;"	f	class:Undo
getTransition2	Undo.h	/^    GTransition* getTransition2() { return transition2; };$/;"	f	class:Undo
getType	IOInfo.h	/^    IOType getType() const { return type; };$/;"	f	class:IOInfo
getType	Machine.h	/^    int getType() { return type; };$/;"	f	class:Machine
getType	MachinePropertiesDlgImpl.cpp	/^int MachinePropertiesDlgImpl::getType()$/;"	f	class:MachinePropertiesDlgImpl
getType	TransitionInfo.h	/^    int getType() { return type; };$/;"	f	class:TransitionInfo
getType	TransitionPropertiesDlgImpl.cpp	/^int TransitionPropertiesDlgImpl::getType()$/;"	f	class:TransitionPropertiesDlgImpl
getUndoBuffer	Project.h	/^    UndoBuffer* getUndoBuffer() { return undobuffer; };$/;"	f	class:Project
getUseMoore	ExportAHDLDlgImpl.h	/^    bool getUseMoore() { return use_moore; };$/;"	f	class:ExportAHDLDlgImpl
getVHDLStdLogic	Options.h	/^    bool getVHDLStdLogic() { return vhdl_stdlogic; };$/;"	f	class:Options
getVHDLSymbolicStates	Options.h	/^    bool getVHDLSymbolicStates() { return vhdl_symbolic_states; };$/;"	f	class:Options
getVHDLSyncReset	Options.h	/^    bool getVHDLSyncReset() { return vhdl_sync_reset; };$/;"	f	class:Options
getVerilogSyncReset	Options.h	/^    bool getVerilogSyncReset() { return ver_sync_reset; };$/;"	f	class:Options
getVersion	AppInfo.h	/^    QString getVersion() \/\/\/ returns version string.$/;"	f	class:AppInfo
getVersion	Machine.h	/^    QString getVersion() { return version; };$/;"	f	class:Machine
getVersion	MachinePropertiesDlgImpl.h	/^    QString getVersion() { return le_version->text(); };$/;"	f	class:MachinePropertiesDlgImpl
getVersionDouble	AppInfo.cpp	/^double AppInfo::getVersionDouble()$/;"	f	class:AppInfo
getVersionMajor	AppInfo.h	/^    int getVersionMajor() \/\/\/ returns major version number. $/;"	f	class:AppInfo
getVersionMinor	AppInfo.h	/^    int getVersionMinor() \/\/\/ returns minor version number. $/;"	f	class:AppInfo
getViewGrid	Options.h	/^    bool getViewGrid() { return viewGrid; };$/;"	f	class:Options
getViewMealyIn	Options.h	/^    bool getViewMealyIn() { return viewMealyIn; };$/;"	f	class:Options
getViewMealyOut	Options.h	/^    bool getViewMealyOut() { return viewMealyOut; };$/;"	f	class:Options
getViewMoore	Options.h	/^    bool getViewMoore() { return viewMoore; };$/;"	f	class:Options
getViewStateEncoding	Options.h	/^    bool getViewStateEncoding() { return viewStateEncoding; };$/;"	f	class:Options
greenlight	SimulatorDlgImpl.h	/^    QPixmap* greenlight;$/;"	m	class:SimulatorDlgImpl
greylight	SimulatorDlgImpl.h	/^    QPixmap* greylight;$/;"	m	class:SimulatorDlgImpl
grid	ScrollView.h	/^    Grid* grid;$/;"	m	class:ScrollView
gridColor	Options.h	/^    QColor gridColor;$/;"	m	class:Options
gridSize	Options.h	/^    int gridSize;$/;"	m	class:Options
gridcolor	OptDisplayDlgImpl.h	/^    QColor gridcolor;$/;"	m	class:OptDisplayDlgImpl
groupBox3	OptDisplayDlg.h	/^    QGroupBox* groupBox3;$/;"	m	class:OptDisplayDlg
groupBox3Layout	OptDisplayDlg.h	/^    QHBoxLayout* groupBox3Layout;$/;"	m	class:OptDisplayDlg
h	ListBoxItems.h	/^    int h;$/;"	m	class:LBArrowFilled
h	ListBoxItems.h	/^    int h;$/;"	m	class:LBArrowFilledPointed
h	ListBoxItems.h	/^    int h;$/;"	m	class:LBArrowLine
h	ListBoxItems.h	/^    int h;$/;"	m	class:LBArrowWhite
h	ListBoxItems.h	/^    int h;$/;"	m	class:LBArrowWhitePointed
hasChanged	Project.h	/^    bool hasChanged() { return changed; };$/;"	f	class:Project
hascode	XMLHandler.h	/^    bool hascode;$/;"	m	class:XMLHandler
hasfrom	XMLHandler.h	/^    bool hasfrom;$/;"	m	class:XMLHandler
hasinitialstate	XMLHandler.h	/^    bool hasinitialstate;$/;"	m	class:XMLHandler
hasto	XMLHandler.h	/^    bool hasto;$/;"	m	class:XMLHandler
height	ListBoxItems.cpp	/^int LBArrowFilled::height(const QListBox* ) const$/;"	f	class:LBArrowFilled
height	ListBoxItems.cpp	/^int LBArrowFilledPointed::height(const QListBox* ) const$/;"	f	class:LBArrowFilledPointed
height	ListBoxItems.cpp	/^int LBArrowLine::height(const QListBox* ) const$/;"	f	class:LBArrowLine
height	ListBoxItems.cpp	/^int LBArrowWhite::height(const QListBox* ) const$/;"	f	class:LBArrowWhite
height	ListBoxItems.cpp	/^int LBArrowWhitePointed::height(const QListBox* ) const$/;"	f	class:LBArrowWhitePointed
helpAbout	MainWindow.cpp	/^void MainWindow::helpAbout()$/;"	f	class:MainWindow
helpAboutQt	MainWindow.cpp	/^void MainWindow::helpAboutQt()$/;"	f	class:MainWindow
hexStrToASCII	Convert.cpp	/^bool Convert::hexStrToASCII(const QString hex, unsigned char* ascii, int maxarraylen, int& length,$/;"	f	class:Convert
hexStrToBinStr	Convert.cpp	/^QString Convert::hexStrToBinStr(int maxlen, const QString hex)$/;"	f	class:Convert
hexStrToInt	Convert.cpp	/^bool Convert::hexStrToInt(QString hex, int& ires)$/;"	f	class:Convert
hexStrToX10	Convert.cpp	/^IOInfoBin Convert::hexStrToX10(int len, const QString hex, IOType t)$/;"	f	class:Convert
hideDlg	ICheck.h	/^    void hideDlg() { icheckdlg->hide(); };$/;"	f	class:ICheck
iASCIIPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::iASCIIPressed()$/;"	f	class:SimulatorDlg
iASCIIPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::iASCIIPressed()$/;"	f	class:SimulatorDlgImpl
iBinPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::iBinPressed()$/;"	f	class:SimulatorDlg
iBinPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::iBinPressed()$/;"	f	class:SimulatorDlgImpl
iHexPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::iHexPressed()$/;"	f	class:SimulatorDlg
iHexPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::iHexPressed()$/;"	f	class:SimulatorDlgImpl
icheckdlg	ICheck.h	/^    ICheckDlgImpl* icheckdlg;$/;"	m	class:ICheck
ichecker	MainWindow.h	/^    ICheck* ichecker;$/;"	m	class:MainWindow
id_ceditstate	MainWindow.h	/^    int id_ceditstate;		\/\/\/< Context menu id 'Edit state'$/;"	m	class:MainWindow
id_cedittrans	MainWindow.h	/^    int id_cedittrans;		\/\/\/< Context menu id 'Edit transition'$/;"	m	class:MainWindow
id_close	MainWindow.h	/^    int id_close; 		\/\/\/< Menu id 'File->Close'$/;"	m	class:MainWindow
id_copy	MainWindow.h	/^    int id_copy;		\/\/\/< Menu id 'Edit->Copy'$/;"	m	class:MainWindow
id_cscopy	MainWindow.h	/^    int id_cscopy;		\/\/\/< Context menu id 'Copy' (State)$/;"	m	class:MainWindow
id_cscut	MainWindow.h	/^    int id_cscut;		\/\/\/< Context menu id 'Cut' (State)$/;"	m	class:MainWindow
id_csdelete	MainWindow.h	/^    int id_csdelete; 		\/\/\/< Context menu id 'Delete' (State)$/;"	m	class:MainWindow
id_csetend	MainWindow.h	/^    int id_csetend;		\/\/\/< Context menu id 'Toggle end state'$/;"	m	class:MainWindow
id_csetinitial	MainWindow.h	/^    int id_csetinitial;		\/\/\/< Context menu id 'Set initial state'$/;"	m	class:MainWindow
id_csundo	MainWindow.h	/^    int id_csundo;		\/\/\/< Context menu id 'Undo' (State)$/;"	m	class:MainWindow
id_ctcopy	MainWindow.h	/^    int id_ctcopy;		\/\/\/< Context menu id 'Copy' (Transition)$/;"	m	class:MainWindow
id_ctcut	MainWindow.h	/^    int id_ctcut;		\/\/\/< Context menu id 'Cut' (Transition)$/;"	m	class:MainWindow
id_ctdelete	MainWindow.h	/^    int id_ctdelete; 		\/\/\/< Context menu id 'Delete' (Transition)$/;"	m	class:MainWindow
id_ctrans_straight	MainWindow.h	/^    int id_ctrans_straight;	\/\/\/< Context menu id 'Straighten transition'$/;"	m	class:MainWindow
id_ctundo	MainWindow.h	/^    int id_ctundo;		\/\/\/< Context menu id 'Undo' (Transition)$/;"	m	class:MainWindow
id_cut	MainWindow.h	/^    int id_cut;			\/\/\/< Menu id 'Edit->Cut'$/;"	m	class:MainWindow
id_delete	MainWindow.h	/^    int id_delete;		\/\/\/< Menu id 'Edit->Delete'$/;"	m	class:MainWindow
id_deselectall	MainWindow.h	/^    int id_deselectall;		\/\/\/< Menu id 'Edit->Deselect all'$/;"	m	class:MainWindow
id_editstate	MainWindow.h	/^    int id_editstate;		\/\/\/< Menu id 'State->Edit'$/;"	m	class:MainWindow
id_edittrans	MainWindow.h	/^    int id_edittrans;		\/\/\/< Menu id 'Transition->Edit'$/;"	m	class:MainWindow
id_export	MainWindow.h	/^    int id_export;		\/\/\/< Menu id 'File->Export'$/;"	m	class:MainWindow
id_export_ahdl	MainWindow.h	/^    int id_export_ahdl;		\/\/\/< Menu id 'File->Export->AHDL'$/;"	m	class:MainWindow
id_export_kiss	MainWindow.h	/^    int id_export_kiss;		\/\/\/< Menu id 'File->Export->KISS'$/;"	m	class:MainWindow
id_export_ragel	MainWindow.h	/^    int id_export_ragel;	\/\/\/< Menu id 'File->Export->Ragel'$/;"	m	class:MainWindow
id_export_stascii	MainWindow.h	/^    int id_export_stascii;	\/\/\/< Menu id 'File->Export->ASCII state table'$/;"	m	class:MainWindow
id_export_sthtml	MainWindow.h	/^    int id_export_sthtml;	\/\/\/< Menu id 'File->Export->HTML state table'$/;"	m	class:MainWindow
id_export_stlat	MainWindow.h	/^    int id_export_stlat;	\/\/\/< Menu id 'File->Export->Latex state table'$/;"	m	class:MainWindow
id_export_verilog	MainWindow.h	/^    int id_export_verilog;	\/\/\/< Menu id 'File->Export->Verilog HDL'$/;"	m	class:MainWindow
id_export_vhdl	MainWindow.h	/^    int id_export_vhdl;		\/\/\/< Menu id 'File->Export->VDHL'$/;"	m	class:MainWindow
id_machineedit	MainWindow.h	/^    int id_machineedit;		\/\/\/< Menu id 'Machine->Edit'$/;"	m	class:MainWindow
id_machineicheck	MainWindow.h	/^    int id_machineicheck;	\/\/\/< Menu id 'Machine->Check integrity'$/;"	m	class:MainWindow
id_machinesim	MainWindow.h	/^    int id_machinesim;		\/\/\/< Menu id 'Machine->Simulate'$/;"	m	class:MainWindow
id_newstate	MainWindow.h	/^    int id_newstate;		\/\/\/< Menu id 'State->New'$/;"	m	class:MainWindow
id_newtrans	MainWindow.h	/^    int id_newtrans;		\/\/\/< Menu id 'Transition->New'$/;"	m	class:MainWindow
id_open	MainWindow.h	/^    int id_open;		\/\/\/< Menu id 'File->Open'$/;"	m	class:MainWindow
id_pan	MainWindow.h	/^    int id_pan; 		\/\/\/< Menu id 'View->Pan'$/;"	m	class:MainWindow
id_paste	MainWindow.h	/^    int id_paste;		\/\/\/< Menu id 'Edit->Paste'$/;"	m	class:MainWindow
id_print	MainWindow.h	/^    int id_print;		\/\/\/< Menu id 'File->Print'$/;"	m	class:MainWindow
id_save	MainWindow.h	/^    int id_save;		\/\/\/< Menu id 'File->Save'$/;"	m	class:MainWindow
id_saveas	MainWindow.h	/^    int id_saveas;		\/\/\/< Menu id 'File->Save as'$/;"	m	class:MainWindow
id_select	MainWindow.h	/^    int id_select; 		\/\/\/< Menu id 'Edit->Select'$/;"	m	class:MainWindow
id_selectall	MainWindow.h	/^    int id_selectall;		\/\/\/< Menu id 'Edit->Select all'$/;"	m	class:MainWindow
id_setend	MainWindow.h	/^    int id_setend;		\/\/\/< Menu id 'State->Toggle end state'$/;"	m	class:MainWindow
id_setinitial	MainWindow.h	/^    int id_setinitial;		\/\/\/< Menu id 'State->Set initial'$/;"	m	class:MainWindow
id_trans_straight	MainWindow.h	/^    int id_trans_straight;	\/\/\/< Menu id 'Transition->Straighten'$/;"	m	class:MainWindow
id_undo	MainWindow.h	/^    int id_undo;		\/\/\/< Menu id 'Edit->Undo'$/;"	m	class:MainWindow
id_viewgrid	MainWindow.h	/^    int id_viewgrid;		\/\/\/< Menu id 'View->Grid'$/;"	m	class:MainWindow
id_viewmealyin	MainWindow.h	/^    int id_viewmealyin;		\/\/\/< Menu id 'View->Mealy inputs'$/;"	m	class:MainWindow
id_viewmealyout	MainWindow.h	/^    int id_viewmealyout;	\/\/\/< Menu id 'View->Mealy outputs'$/;"	m	class:MainWindow
id_viewmoore	MainWindow.h	/^    int id_viewmoore;		\/\/\/< Menu id 'View->Moore outputs'$/;"	m	class:MainWindow
id_viewshadows	MainWindow.h	/^    int id_viewshadows;		\/\/\/< Menu id 'View->Shadows'$/;"	m	class:MainWindow
id_viewstateenc	MainWindow.h	/^    int id_viewstateenc;	\/\/\/< Menu id 'View->State codes'$/;"	m	class:MainWindow
id_zoom	MainWindow.h	/^    int id_zoom;		\/\/\/< Menu id 'View->Zoom'$/;"	m	class:MainWindow
id_zoom100	MainWindow.h	/^    int id_zoom100;		\/\/\/< Menu id 'View->Zoom 100%'$/;"	m	class:MainWindow
id_zoomin	MainWindow.h	/^    int id_zoomin;		\/\/\/< Menu id 'View->Zoom in'$/;"	m	class:MainWindow
id_zoomout	MainWindow.h	/^    int id_zoomout;		\/\/\/< Menu id 'View->Zoom out'$/;"	m	class:MainWindow
iinfo	XMLHandler.h	/^    QString iinfo;$/;"	m	class:XMLHandler
image0	ICheckDlg.h	/^    QPixmap image0;$/;"	m	class:ICheckDlg
image0	SimulatorDlg.h	/^    QPixmap image0;$/;"	m	class:SimulatorDlg
image0_data	ICheckDlg.cpp	/^static const unsigned char image0_data[] = { $/;"	v	file:
image0_data	SimulatorDlg.cpp	/^static const char* const image0_data[] = { $/;"	v	file:
image1	ICheckDlg.h	/^    QPixmap image1;$/;"	m	class:ICheckDlg
image1	SimulatorDlg.h	/^    QPixmap image1;$/;"	m	class:SimulatorDlg
image1_data	ICheckDlg.cpp	/^static const unsigned char image1_data[] = { $/;"	v	file:
inames	XMLHandler.h	/^    QString inames;$/;"	m	class:XMLHandler
inamescont	XMLHandler.h	/^    bool inamescont;$/;"	m	class:XMLHandler
includeOutputsClicked	ExportStateTableDlg.ui.h	/^void ExportStateTableDlg::includeOutputsClicked()$/;"	f	class:ExportStateTableDlg
includeOutputsClicked	ExportStateTableDlgImpl.cpp	/^void ExportStateTableDlgImpl::includeOutputsClicked()$/;"	f	class:ExportStateTableDlgImpl
includeout	ExportStateTableDlgImpl.h	/^    bool includeout;$/;"	m	class:ExportStateTableDlgImpl
info	Error.cpp	/^int Error::info(QString text)$/;"	f	class:Error
info	IOInfoASCII.h	/^    QString info;$/;"	m	class:IOInfoASCII
info	IOInfoBin.h	/^    char* info;$/;"	m	class:IOInfoBin
info	IOInfoText.h	/^    QString info;$/;"	m	class:IOInfoText
info	Transition.h	/^    TransitionInfo* info;$/;"	m	class:Transition
init	Export.cpp	/^void Export::init(ofstream* o, Machine* m)$/;"	f	class:Export
init	ExportAHDLDlgImpl.cpp	/^void ExportAHDLDlgImpl::init(Options* opt)$/;"	f	class:ExportAHDLDlgImpl
init	ExportRagelDlgImpl.cpp	/^void ExportRagelDlgImpl::init(Options* opt)$/;"	f	class:ExportRagelDlgImpl
init	ExportStateTableDlgImpl.cpp	/^void ExportStateTableDlgImpl::init(Options* opt)$/;"	f	class:ExportStateTableDlgImpl
init	ExportVHDLDlgImpl.cpp	/^void ExportVHDLDlgImpl::init(Options* opt)$/;"	f	class:ExportVHDLDlgImpl
init	ExportVerilogDlgImpl.cpp	/^void ExportVerilogDlgImpl::init(Options* opt)$/;"	f	class:ExportVerilogDlgImpl
init	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::init(Options* opt)$/;"	f	class:OptDisplayDlgImpl
init	OptGeneralDlgImpl.cpp	/^void OptGeneralDlgImpl::init()$/;"	f	class:OptGeneralDlgImpl
init	OptPrintingDlgImpl.cpp	/^void OptPrintingDlgImpl::init(Options* opt)$/;"	f	class:OptPrintingDlgImpl
init	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::init()$/;"	f	class:SimulatorDlgImpl
initial_state	Machine.h	/^    GState* initial_state;$/;"	m	class:Machine
initial_transition	Machine.h	/^    GITransition* initial_transition;$/;"	m	class:Machine
input_names	Machine.h	/^    QStringList input_names;$/;"	m	class:Machine
inputs	TransitionInfo.h	/^    IOInfo* inputs;$/;"	m	class:TransitionInfo
inputsChanged	SimulatorDlg.ui.h	/^void SimulatorDlg::inputsChanged( const QString & )$/;"	f	class:SimulatorDlg
inputsChanged	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::inputsChanged(const QString& in)$/;"	f	class:SimulatorDlgImpl
intToBinStr	Convert.cpp	/^QString Convert::intToBinStr(int c, int len)$/;"	f	class:Convert
intersection	TransitionInfo.cpp	/^bool TransitionInfo::intersection(TransitionInfo* ti)$/;"	f	class:TransitionInfo
inversionDescChanged	OptDisplayDlg.ui.h	/^void OptDisplayDlg::inversionDescChanged()$/;"	f	class:OptDisplayDlg
inversionDescChanged	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::inversionDescChanged()$/;"	f	class:OptDisplayDlgImpl
inversion_descriptor	OptDisplayDlgImpl.h	/^    QString inversion_descriptor;$/;"	m	class:OptDisplayDlgImpl
inversion_descriptor	Options.h	/^    QString inversion_descriptor;$/;"	m	class:Options
invert	IOInfo.h	/^    bool invert;$/;"	m	class:IOInfo
invert	IOInfoList.h	/^    bool invert;$/;"	m	class:IOInfoList
invert	XMLHandler.h	/^    bool invert;$/;"	m	class:XMLHandler
invertBits	IOInfoBin.cpp	/^void IOInfoBin::invertBits()$/;"	f	class:IOInfoBin
invertClicked	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::invertClicked()$/;"	f	class:TransitionPropertiesDlg
invertClicked	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::invertClicked()$/;"	f	class:TransitionPropertiesDlgImpl
ioMarkClicked	OptDisplayDlg.ui.h	/^void OptDisplayDlg::ioMarkClicked()$/;"	f	class:OptDisplayDlg
ioMarkClicked	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::ioMarkClicked()$/;"	f	class:OptDisplayDlgImpl
ioNamesClicked	OptDisplayDlg.ui.h	/^void OptDisplayDlg::ioNamesClicked()$/;"	f	class:OptDisplayDlg
ioNamesClicked	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::ioNamesClicked()$/;"	f	class:OptDisplayDlgImpl
iomark	OptDisplayDlgImpl.h	/^    bool iomark;$/;"	m	class:OptDisplayDlgImpl
iomark	Options.h	/^    bool iomark;$/;"	m	class:Options
ionames	OptDisplayDlgImpl.h	/^    bool ionames;$/;"	m	class:OptDisplayDlgImpl
ionames	Options.h	/^    bool ionames;$/;"	m	class:Options
isClockOn	SimulatorDlgImpl.h	/^    bool isClockOn() { return pb_clock->isOn(); };$/;"	f	class:SimulatorDlgImpl
isDefault	IOInfo.h	/^    virtual bool isDefault() const { return def; };$/;"	f	class:IOInfo
isDeleted	GObject.h	/^    bool isDeleted() { return deleted; };$/;"	f	class:GObject
isEmpty	UndoBuffer.h	/^    bool isEmpty() { return undolist.isEmpty(); };$/;"	f	class:UndoBuffer
isEndState	State.h	/^    bool isEndState() { return endstate; }$/;"	f	class:State
isIASCIIChecked	SimulatorDlgImpl.h	/^    bool isIASCIIChecked() { return rb_iascii->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isIBinChecked	SimulatorDlgImpl.h	/^    bool isIBinChecked() { return rb_ibin->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isIHexChecked	SimulatorDlgImpl.h	/^    bool isIHexChecked() { return rb_ihex->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isITransSelected	Selection.h	/^    bool isITransSelected() { return itrans; };$/;"	f	class:Selection
isInverted	IOInfo.h	/^    bool isInverted() const { return invert; };$/;"	f	class:IOInfo
isOASCIIChecked	SimulatorDlgImpl.h	/^    bool isOASCIIChecked() { return rb_oascii->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isOBinChecked	SimulatorDlgImpl.h	/^    bool isOBinChecked() { return rb_obin->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isOHexChecked	SimulatorDlgImpl.h	/^    bool isOHexChecked() { return rb_ohex->isChecked(); };$/;"	f	class:SimulatorDlgImpl
isRange	IOInfo.h	/^    virtual bool isRange(int& start, int& end) const { start=range_start; end=range_end; return range; };$/;"	f	class:IOInfo
isReadable	IOInfoASCII.cpp	/^bool IOInfoASCII::isReadable(unsigned char cp)$/;"	f	class:IOInfoASCII
isSelected	GObject.h	/^    bool isSelected() { return selected; };$/;"	f	class:GObject
isSingle	IOInfoASCII.cpp	/^bool IOInfoASCII::isSingle()$/;"	f	class:IOInfoASCII
isSingle	IOInfoBin.cpp	/^bool IOInfoBin::isSingle()$/;"	f	class:IOInfoBin
isSingle	IOInfoText.cpp	/^bool IOInfoText::isSingle()$/;"	f	class:IOInfoText
isStateReachable	ICheck.cpp	/^bool ICheck::isStateReachable(Machine* m, GState* from, GState* state, $/;"	f	class:ICheck
isStateSelected	Selection.cpp	/^bool Selection::isStateSelected(State* sels)$/;"	f	class:Selection
isStraight	GTransition.h	/^    bool isStraight() { return straight; };$/;"	f	class:GTransition
isTransitionSelected	Selection.cpp	/^bool Selection::isTransitionSelected(Transition* selt)$/;"	f	class:Selection
istate	Undo.h	/^    GState* istate;$/;"	m	class:Undo
itrans	Selection.h	/^    bool itrans;$/;"	m	class:Selection
itrans	Undo.h	/^    GITransition *itrans;$/;"	m	class:Undo
itrans2	Undo.h	/^    GITransition *itrans2;$/;"	m	class:Undo
itransition	XMLHandler.h	/^    GITransition* itransition;$/;"	m	class:XMLHandler
keyPressEvent	MainWindow.cpp	/^void MainWindow::keyPressEvent(QKeyEvent* k)$/;"	f	class:MainWindow
keyReleaseEvent	MainWindow.cpp	/^void MainWindow::keyReleaseEvent(QKeyEvent* k)$/;"	f	class:MainWindow
langCClicked	ExportRagelDlg.cpp	/^void ExportRagelDlg::langCClicked()$/;"	f	class:ExportRagelDlg
langCClicked	ExportRagelDlgImpl.cpp	/^void ExportRagelDlgImpl::langCClicked()$/;"	f	class:ExportRagelDlgImpl
langJavaClicked	ExportRagelDlg.cpp	/^void ExportRagelDlg::langJavaClicked()$/;"	f	class:ExportRagelDlg
langJavaClicked	ExportRagelDlgImpl.cpp	/^void ExportRagelDlgImpl::langJavaClicked()$/;"	f	class:ExportRagelDlgImpl
langRubyClicked	ExportRagelDlg.cpp	/^void ExportRagelDlg::langRubyClicked()$/;"	f	class:ExportRagelDlg
langRubyClicked	ExportRagelDlgImpl.cpp	/^void ExportRagelDlgImpl::langRubyClicked()$/;"	f	class:ExportRagelDlgImpl
lang_action	ExportRagel.h	/^    int lang_action;$/;"	m	class:ExportRagel
lang_action	ExportRagelDlgImpl.h	/^    int lang_action;$/;"	m	class:ExportRagelDlgImpl
language	MainControl.h	/^    QString language;$/;"	m	class:MainControl
language	MainWindow.h	/^    QString language;$/;"	m	class:MainWindow
languageChange	ExportAHDLDlg.cpp	/^void ExportAHDLDlg::languageChange()$/;"	f	class:ExportAHDLDlg
languageChange	ExportRagelDlg.cpp	/^void ExportRagelDlg::languageChange()$/;"	f	class:ExportRagelDlg
languageChange	ExportStateTableDlg.cpp	/^void ExportStateTableDlg::languageChange()$/;"	f	class:ExportStateTableDlg
languageChange	ExportVHDLDlg.cpp	/^void ExportVHDLDlg::languageChange()$/;"	f	class:ExportVHDLDlg
languageChange	ExportVerilogDlg.cpp	/^void ExportVerilogDlg::languageChange()$/;"	f	class:ExportVerilogDlg
languageChange	ICheckDlg.cpp	/^void ICheckDlg::languageChange()$/;"	f	class:ICheckDlg
languageChange	MachinePropertiesDlg.cpp	/^void MachinePropertiesDlg::languageChange()$/;"	f	class:MachinePropertiesDlg
languageChange	OptDisplayDlg.cpp	/^void OptDisplayDlg::languageChange()$/;"	f	class:OptDisplayDlg
languageChange	OptGeneralDlg.cpp	/^void OptGeneralDlg::languageChange()$/;"	f	class:OptGeneralDlg
languageChange	OptPrintingDlg.cpp	/^void OptPrintingDlg::languageChange()$/;"	f	class:OptPrintingDlg
languageChange	SimulatorDlg.cpp	/^void SimulatorDlg::languageChange()$/;"	f	class:SimulatorDlg
languageChange	StatePropertiesDlg.cpp	/^void StatePropertiesDlg::languageChange()$/;"	f	class:StatePropertiesDlg
languageChange	TransitionPropertiesDlg.cpp	/^void TransitionPropertiesDlg::languageChange()$/;"	f	class:TransitionPropertiesDlg
lastLClicked	ScrollView.h	/^    QPoint lastLClicked;$/;"	m	class:ScrollView
lastMousePosX	ScrollView.h	/^    double lastMousePosX;	$/;"	m	class:ScrollView
lastMousePosY	ScrollView.h	/^    double lastMousePosY;$/;"	m	class:ScrollView
lastMovePosCont1X	ScrollView.h	/^    double lastMovePosCont1X;$/;"	m	class:ScrollView
lastMovePosCont1Y	ScrollView.h	/^    double lastMovePosCont1Y;$/;"	m	class:ScrollView
lastMovePosCont2X	ScrollView.h	/^    double lastMovePosCont2X;$/;"	m	class:ScrollView
lastMovePosCont2Y	ScrollView.h	/^    double lastMovePosCont2Y;$/;"	m	class:ScrollView
lastMovePosX	ScrollView.h	/^    double lastMovePosX;	$/;"	m	class:ScrollView
lastMovePosY	ScrollView.h	/^    double lastMovePosY;$/;"	m	class:ScrollView
lastObjectRClicked	ScrollView.h	/^    GObject* lastObjectRClicked;$/;"	m	class:ScrollView
lastStateClicked	ScrollView.h	/^    GState* lastStateClicked;$/;"	m	class:ScrollView
lastTransitionClicked	ScrollView.h	/^    GTransition* lastTransitionClicked;$/;"	m	class:ScrollView
lastTransitionControl	ScrollView.h	/^    int lastTransitionControl;$/;"	m	class:ScrollView
lastTransitionDragged	ScrollView.h	/^    GTransition* lastTransitionDragged;$/;"	m	class:ScrollView
layout10	StatePropertiesDlg.h	/^    QVBoxLayout* layout10;$/;"	m	class:StatePropertiesDlg
layout14	ExportRagelDlg.h	/^    QVBoxLayout* layout14;$/;"	m	class:ExportRagelDlg
layout15	ExportRagelDlg.h	/^    QHBoxLayout* layout15;$/;"	m	class:ExportRagelDlg
layout18	ExportAHDLDlg.h	/^    QVBoxLayout* layout18;$/;"	m	class:ExportAHDLDlg
layout19	ExportAHDLDlg.h	/^    QHBoxLayout* layout19;$/;"	m	class:ExportAHDLDlg
layout2	OptDisplayDlg.h	/^    QHBoxLayout* layout2;$/;"	m	class:OptDisplayDlg
layout3	OptDisplayDlg.h	/^    QVBoxLayout* layout3;$/;"	m	class:OptDisplayDlg
layout3	TransitionPropertiesDlg.h	/^    QGridLayout* layout3;$/;"	m	class:TransitionPropertiesDlg
layout4	ExportStateTableDlg.h	/^    QVBoxLayout* layout4;$/;"	m	class:ExportStateTableDlg
layout4	OptDisplayDlg.h	/^    QHBoxLayout* layout4;$/;"	m	class:OptDisplayDlg
layout5	ExportStateTableDlg.h	/^    QHBoxLayout* layout5;$/;"	m	class:ExportStateTableDlg
layout5	OptDisplayDlg.h	/^    QHBoxLayout* layout5;$/;"	m	class:OptDisplayDlg
layout6	ExportAHDLDlg.h	/^    QHBoxLayout* layout6;$/;"	m	class:ExportAHDLDlg
layout6	ExportRagelDlg.h	/^    QHBoxLayout* layout6;$/;"	m	class:ExportRagelDlg
layout6	ExportStateTableDlg.h	/^    QVBoxLayout* layout6;$/;"	m	class:ExportStateTableDlg
layout6	ExportVHDLDlg.h	/^    QHBoxLayout* layout6;$/;"	m	class:ExportVHDLDlg
layout6	ExportVerilogDlg.h	/^    QHBoxLayout* layout6;$/;"	m	class:ExportVerilogDlg
layout6	OptDisplayDlg.h	/^    QVBoxLayout* layout6;$/;"	m	class:OptDisplayDlg
layout6_2	ExportStateTableDlg.h	/^    QHBoxLayout* layout6_2;$/;"	m	class:ExportStateTableDlg
layout7	ExportVHDLDlg.h	/^    QVBoxLayout* layout7;$/;"	m	class:ExportVHDLDlg
layout7	ExportVerilogDlg.h	/^    QVBoxLayout* layout7;$/;"	m	class:ExportVerilogDlg
layout8	ExportVHDLDlg.h	/^    QHBoxLayout* layout8;$/;"	m	class:ExportVHDLDlg
layout8	ExportVerilogDlg.h	/^    QHBoxLayout* layout8;$/;"	m	class:ExportVerilogDlg
layout8	OptDisplayDlg.h	/^    QGridLayout* layout8;$/;"	m	class:OptDisplayDlg
layout9	StatePropertiesDlg.h	/^    QGridLayout* layout9;$/;"	m	class:StatePropertiesDlg
lb1	MachinePropertiesDlgImpl.h	/^    LBArrowLine* lb1;$/;"	m	class:MachinePropertiesDlgImpl
lb2	MachinePropertiesDlgImpl.h	/^    LBArrowFilled* lb2;$/;"	m	class:MachinePropertiesDlgImpl
lb3	MachinePropertiesDlgImpl.h	/^    LBArrowWhite* lb3;$/;"	m	class:MachinePropertiesDlgImpl
lb4	MachinePropertiesDlgImpl.h	/^    LBArrowFilledPointed* lb4;$/;"	m	class:MachinePropertiesDlgImpl
lb5	MachinePropertiesDlgImpl.h	/^    LBArrowWhitePointed* lb5;$/;"	m	class:MachinePropertiesDlgImpl
lb_colorpreview	StatePropertiesDlg.h	/^    QLabel* lb_colorpreview;$/;"	m	class:StatePropertiesDlg
lb_completeness	ICheckDlg.h	/^    QLabel* lb_completeness;$/;"	m	class:ICheckDlg
lb_completeness_val	ICheckDlg.h	/^    QLabel* lb_completeness_val;$/;"	m	class:ICheckDlg
lb_deadlocks	ICheckDlg.h	/^    QLabel* lb_deadlocks;$/;"	m	class:ICheckDlg
lb_endstate	ICheckDlg.h	/^    QLabel* lb_endstate;$/;"	m	class:ICheckDlg
lb_endstatesreachable	ICheckDlg.h	/^    QLabel* lb_endstatesreachable;$/;"	m	class:ICheckDlg
lb_endstatesreachable_val	ICheckDlg.h	/^    QLabel* lb_endstatesreachable_val;$/;"	m	class:ICheckDlg
lb_frequency	SimulatorDlg.h	/^    QLabel* lb_frequency;$/;"	m	class:SimulatorDlg
lb_gridcolor	OptDisplayDlg.h	/^    QLabel* lb_gridcolor;$/;"	m	class:OptDisplayDlg
lb_outputs	SimulatorDlg.h	/^    QLabel* lb_outputs;$/;"	m	class:SimulatorDlg
lb_scode	SimulatorDlg.h	/^    QLabel* lb_scode;$/;"	m	class:SimulatorDlg
lb_shadowcolor	OptDisplayDlg.h	/^    QLabel* lb_shadowcolor;$/;"	m	class:OptDisplayDlg
lb_sname	SimulatorDlg.h	/^    QLabel* lb_sname;$/;"	m	class:SimulatorDlg
lb_start	OptDisplayDlg.h	/^    QLabel* lb_start;$/;"	m	class:OptDisplayDlg
lb_startstate	ICheckDlg.h	/^    QLabel* lb_startstate;$/;"	m	class:ICheckDlg
lb_statefont	MachinePropertiesDlg.h	/^    QLabel* lb_statefont;$/;"	m	class:MachinePropertiesDlg
lb_statesreachable	ICheckDlg.h	/^    QLabel* lb_statesreachable;$/;"	m	class:ICheckDlg
lb_statesreachable_val	ICheckDlg.h	/^    QLabel* lb_statesreachable_val;$/;"	m	class:ICheckDlg
lb_transconnected	ICheckDlg.h	/^    QLabel* lb_transconnected;$/;"	m	class:ICheckDlg
lb_transconnected_val	ICheckDlg.h	/^    QLabel* lb_transconnected_val;$/;"	m	class:ICheckDlg
lb_transfont	MachinePropertiesDlg.h	/^    QLabel* lb_transfont;$/;"	m	class:MachinePropertiesDlg
lb_unambcond	ICheckDlg.h	/^    QLabel* lb_unambcond;$/;"	m	class:ICheckDlg
lbox_arrowtype	MachinePropertiesDlg.h	/^    QListBox* lbox_arrowtype;$/;"	m	class:MachinePropertiesDlg
le_any	OptDisplayDlg.h	/^    QLineEdit* le_any;$/;"	m	class:OptDisplayDlg
le_code	StatePropertiesDlg.h	/^    QLineEdit* le_code;$/;"	m	class:StatePropertiesDlg
le_default	OptDisplayDlg.h	/^    QLineEdit* le_default;$/;"	m	class:OptDisplayDlg
le_input	TransitionPropertiesDlg.h	/^    QLineEdit* le_input;$/;"	m	class:TransitionPropertiesDlg
le_inputs	SimulatorDlg.h	/^    QLineEdit* le_inputs;$/;"	m	class:SimulatorDlg
le_inversion	OptDisplayDlg.h	/^    QLineEdit* le_inversion;$/;"	m	class:OptDisplayDlg
le_linewidth	StatePropertiesDlg.h	/^    QLineEdit* le_linewidth;$/;"	m	class:StatePropertiesDlg
le_mealyin	MachinePropertiesDlg.h	/^    QLineEdit* le_mealyin;$/;"	m	class:MachinePropertiesDlg
le_mealyout	MachinePropertiesDlg.h	/^    QLineEdit* le_mealyout;$/;"	m	class:MachinePropertiesDlg
le_mooreout	MachinePropertiesDlg.h	/^    QLineEdit* le_mooreout;$/;"	m	class:MachinePropertiesDlg
le_mooreoutputs	StatePropertiesDlg.h	/^    QLineEdit* le_mooreoutputs;$/;"	m	class:StatePropertiesDlg
le_name	MachinePropertiesDlg.h	/^    QLineEdit* le_name;$/;"	m	class:MachinePropertiesDlg
le_name	StatePropertiesDlg.h	/^    QLineEdit* le_name;$/;"	m	class:StatePropertiesDlg
le_output	TransitionPropertiesDlg.h	/^    QLineEdit* le_output;$/;"	m	class:TransitionPropertiesDlg
le_radius	StatePropertiesDlg.h	/^    QLineEdit* le_radius;$/;"	m	class:StatePropertiesDlg
le_start	OptDisplayDlg.h	/^    QLineEdit* le_start;$/;"	m	class:OptDisplayDlg
le_version	MachinePropertiesDlg.h	/^    QLineEdit* le_version;$/;"	m	class:MachinePropertiesDlg
left	DRect.h	/^    double left() \/** Returns x coordinate of left border. *\/ { return x1; };$/;"	f	class:DRect
left_down	ScrollView.h	/^    bool left_down;$/;"	m	class:ScrollView
lmessage	StatusBar.h	/^    QLabel* lmessage;$/;"	m	class:StatusBar
loadLanguage	main.cpp	/^QString loadLanguage(QTranslator* trans)$/;"	f
loadMRU	FileIO.cpp	/^bool FileIO::loadMRU(QStringList& _list)$/;"	f	class:FileIO
loadOptions	FileIO.cpp	/^int FileIO::loadOptions(Options* opt)$/;"	f	class:FileIO
lockstates	Options.h	/^    bool lockstates;$/;"	m	class:Options
locktransitions	Options.h	/^    bool locktransitions;$/;"	m	class:Options
machine	Export.h	/^    Machine* machine;$/;"	m	class:Export
machine	Project.h	/^    Machine* machine;$/;"	m	class:Project
machine	Simulator.h	/^    Machine* machine;$/;"	m	class:Simulator
machine	State.h	/^    Machine* machine;$/;"	m	class:State
machine	TableBuilder.h	/^    Machine* machine;$/;"	m	class:TableBuilder
machine	Undo.h	/^    Machine* machine;$/;"	m	class:Undo
machine	XMLHandler.h	/^    Machine* machine;$/;"	m	class:XMLHandler
machineEdit	MainWindow.cpp	/^void MainWindow::machineEdit()$/;"	f	class:MainWindow
machineICheck	MainWindow.cpp	/^void MainWindow::machineICheck()$/;"	f	class:MainWindow
machineSimulate	MainWindow.cpp	/^void MainWindow::machineSimulate()$/;"	f	class:MainWindow
machine_props	MachineManager.h	/^    MachinePropertiesDlgImpl* machine_props;$/;"	m	class:MachineManager
machinemanager	MainWindow.h	/^    MachineManager* machinemanager;$/;"	m	class:MainWindow
machinesimset	MainWindow.h	/^    QIconSet* machinesimset;$/;"	m	class:MainWindow
main	FileIO.h	/^    MainWindow* main;$/;"	m	class:FileIO
main	ICheck.h	/^    MainWindow* main;$/;"	m	class:ICheck
main	MachineManager.h	/^    MainWindow* main;$/;"	m	class:MachineManager
main	PrintManager.h	/^    MainWindow* main;$/;"	m	class:PrintManager
main	Project.h	/^    MainWindow* main;$/;"	m	class:Project
main	ScrollView.h	/^    MainWindow* main;$/;"	m	class:ScrollView
main	Simulator.h	/^    MainWindow* main;$/;"	m	class:Simulator
main	SimulatorDlgImpl.h	/^    MainWindow* main;$/;"	m	class:SimulatorDlgImpl
main	StateManager.h	/^    MainWindow* main;$/;"	m	class:StateManager
main	StatePropertiesDlgImpl.h	/^    MainWindow* main;$/;"	m	class:StatePropertiesDlgImpl
main	TransitionManager.h	/^    MainWindow* main;$/;"	m	class:TransitionManager
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
mapTextToValue	WSpinBox.cpp	/^int WSpinBox::mapTextToValue( bool* ok )$/;"	f	class:WSpinBox
mapValueToText	WSpinBox.cpp	/^QString WSpinBox::mapValueToText( int value )$/;"	f	class:WSpinBox
matches	IOInfo.cpp	/^bool IOInfo::matches(IOInfo* io)$/;"	f	class:IOInfo
matches	TransitionInfoASCII.cpp	/^bool TransitionInfoASCII::matches(IOInfo* io)$/;"	f	class:TransitionInfoASCII
matches	TransitionInfoBin.cpp	/^bool TransitionInfoBin::matches(IOInfo* io)$/;"	f	class:TransitionInfoBin
matches	TransitionInfoText.cpp	/^bool TransitionInfoText::matches(IOInfo* io)$/;"	f	class:TransitionInfoText
maybeTip	ToolTipSV.cpp	/^void ToolTipSV::maybeTip(const QPoint& p)$/;"	f	class:ToolTipSV
mb_changed	MainWindow.h	/^    QMessageBox* mb_changed;$/;"	m	class:MainWindow
menuItemActivated	MainWindow.cpp	/^void MainWindow::menuItemActivated(int )$/;"	f	class:MainWindow
menu_edit	MainWindow.h	/^    QPopupMenu* menu_edit;$/;"	m	class:MainWindow
menu_export	MainWindow.h	/^    QPopupMenu* menu_export;$/;"	m	class:MainWindow
menu_file	MainWindow.h	/^    QPopupMenu* menu_file;$/;"	m	class:MainWindow
menu_help	MainWindow.h	/^    QPopupMenu* menu_help;$/;"	m	class:MainWindow
menu_machine	MainWindow.h	/^    QPopupMenu* menu_machine;$/;"	m	class:MainWindow
menu_mru	MainWindow.h	/^    QPopupMenu* menu_mru;$/;"	m	class:MainWindow
menu_state	MainWindow.h	/^    QPopupMenu* menu_state;$/;"	m	class:MainWindow
menu_trans	MainWindow.h	/^    QPopupMenu* menu_trans;$/;"	m	class:MainWindow
menu_view	MainWindow.h	/^    QPopupMenu* menu_view;$/;"	m	class:MainWindow
menubar	MainWindow.h	/^    QMenuBar* menubar;$/;"	m	class:MainWindow
middle_down	ScrollView.h	/^    bool middle_down;$/;"	m	class:ScrollView
mname	ExportVHDL.h	/^    QString mname;$/;"	m	class:ExportVHDL
mname	Undo.h	/^    QString mname;$/;"	m	class:Undo
mode	DocStatus.h	/^    int mode;$/;"	m	class:DocStatus
mode	StatePropertiesDlgImpl.h	/^    int mode;$/;"	m	class:StatePropertiesDlgImpl
modified	Undo.h	/^    bool modified;		$/;"	m	class:Undo
monames	XMLHandler.h	/^    QString monames;$/;"	m	class:XMLHandler
monamescont	XMLHandler.h	/^    bool monamescont;$/;"	m	class:XMLHandler
mooreOutputValid	State.cpp	/^bool State::mooreOutputValid(int mtype, QString s)$/;"	f	class:State
moore_outputs	State.h	/^    IOInfo* moore_outputs;$/;"	m	class:State
move	GITransition.cpp	/^void GITransition::move(double x, double y)$/;"	f	class:GITransition
move	GObject.cpp	/^void GObject::move(double x, double y)$/;"	f	class:GObject
move	GState.cpp	/^void GState::move(double x, double y, ScrollView* sv, Machine* m, $/;"	f	class:GState
move	GTransition.cpp	/^void GTransition::move(double x, double y)$/;"	f	class:GTransition
move	Selection.cpp	/^void Selection::move(double x, double y, ScrollView* sv, Machine* m)$/;"	f	class:Selection
moveBy	DRect.cpp	/^void DRect::moveBy(double x, double y)$/;"	f	class:DRect
moveCPoint1	GTransition.cpp	/^void GTransition::moveCPoint1(double x, double y)$/;"	f	class:GTransition
moveCPoint2	GTransition.cpp	/^void GTransition::moveCPoint2(double x, double y)$/;"	f	class:GTransition
moveEnd	GTransition.cpp	/^void GTransition::moveEnd(double x, double y, bool move_cont_rel\/*=TRUE*\/,$/;"	f	class:GTransition
moveMultiple	UndoBuffer.cpp	/^void UndoBuffer::moveMultiple(QList<GState>* sl, QList<GTransition>* tl,$/;"	f	class:UndoBuffer
moveStart	GTransition.cpp	/^void GTransition::moveStart(double x, double y, bool move_cont_rel\/*=TRUE*\/,$/;"	f	class:GTransition
movedbyx	Undo.h	/^    double movedbyx;$/;"	m	class:Undo
movedbyy	Undo.h	/^    double movedbyy;$/;"	m	class:Undo
mru_list	MainControl.h	/^    QStringList mru_list;$/;"	m	class:MainControl
name	Machine.h	/^    QString name;$/;"	m	class:Machine
newWindow	MainControl.cpp	/^void MainControl::newWindow()$/;"	f	class:MainControl
newWindow	MainControl.cpp	/^void MainControl::newWindow(const char* fileName)$/;"	f	class:MainControl
newinitialstate	XMLHandler.h	/^    GState *newinitialstate;$/;"	m	class:XMLHandler
newinitialtrans	XMLHandler.h	/^    GITransition *newinitialtrans;$/;"	m	class:XMLHandler
next	GState.cpp	/^GState* GState::next(IOInfo* in, IOInfo*& out)$/;"	f	class:GState
next	Simulator.cpp	/^GState* Simulator::next(IOInfo* in, QString& out)$/;"	f	class:Simulator
next	Simulator.cpp	/^void Simulator::next()$/;"	f	class:Simulator
noWS	Utils.cpp	/^QString Utils::noWS(QString s)$/;"	f	class:Utils
normalize	DRect.cpp	/^void DRect::normalize()$/;"	f	class:DRect
num_input	Machine.h	/^    int num_input;$/;"	m	class:Machine
num_moore_output	Machine.h	/^    int num_moore_output;$/;"	m	class:Machine
num_output	Machine.h	/^    int num_output;$/;"	m	class:Machine
numin	Undo.h	/^    int numin;$/;"	m	class:Undo
numin	XMLHandler.h	/^    int numin;$/;"	m	class:XMLHandler
nummooreout	Undo.h	/^    int nummooreout;$/;"	m	class:Undo
nummooreout	XMLHandler.h	/^    int nummooreout;$/;"	m	class:XMLHandler
numout	Undo.h	/^    int numout;$/;"	m	class:Undo
numout	XMLHandler.h	/^    int numout;$/;"	m	class:XMLHandler
oASCIIPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::oASCIIPressed()$/;"	f	class:SimulatorDlg
oASCIIPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::oASCIIPressed()$/;"	f	class:SimulatorDlgImpl
oBinPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::oBinPressed()$/;"	f	class:SimulatorDlg
oBinPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::oBinPressed()$/;"	f	class:SimulatorDlgImpl
oHexPressed	SimulatorDlg.ui.h	/^void SimulatorDlg::oHexPressed()$/;"	f	class:SimulatorDlg
oHexPressed	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::oHexPressed()$/;"	f	class:SimulatorDlgImpl
objectsPasted	ScrollView.cpp	/^void ScrollView::objectsPasted()$/;"	f	class:ScrollView
oinfo	XMLHandler.h	/^    QString oinfo;$/;"	m	class:XMLHandler
oldCursor	ScrollView.h	/^    QCursor oldCursor;$/;"	m	class:ScrollView
oldinitialstate	XMLHandler.h	/^    GState *oldinitialstate;$/;"	m	class:XMLHandler
oldinitialtrans	XMLHandler.h	/^    GITransition *oldinitialtrans;$/;"	m	class:XMLHandler
oldnumin	XMLHandler.h	/^    int oldnumin;$/;"	m	class:XMLHandler
oldnummooreout	XMLHandler.h	/^    int oldnummooreout;$/;"	m	class:XMLHandler
oldnumout	XMLHandler.h	/^    int oldnumout;$/;"	m	class:XMLHandler
onControlPoint	GITransition.cpp	/^int GITransition::onControlPoint(double x, double y, double scale)$/;"	f	class:GITransition
onControlPoint	GTransition.cpp	/^int GTransition::onControlPoint(double x, double y, double scale)$/;"	f	class:GTransition
onSelection	ScrollView.h	/^    bool onSelection;$/;"	m	class:ScrollView
onSelection	Selection.cpp	/^bool Selection::onSelection(Machine* m, QPoint p, double scale)$/;"	f	class:Selection
onSelectionOld	Selection.cpp	/^bool Selection::onSelectionOld(QPoint p, double scale)$/;"	f	class:Selection
onames	XMLHandler.h	/^    QString onames;$/;"	m	class:XMLHandler
onamescont	XMLHandler.h	/^    bool onamescont;$/;"	m	class:XMLHandler
openFile	FileIO.cpp	/^Project* FileIO::openFile(QString mrufile \/*=QString::null*\/)$/;"	f	class:FileIO
openFileXML	FileIO.cpp	/^Project* FileIO::openFileXML(QString mrufile \/*=QString::null*\/)$/;"	f	class:FileIO
operator =	IOInfoBin.cpp	/^IOInfoBin& IOInfoBin::operator=(const IOInfoBin& io)$/;"	f	class:IOInfoBin
operator =	State.cpp	/^State& State::operator=(const State& st) $/;"	f	class:State
operator =	Transition.cpp	/^Transition& Transition::operator=(const Transition& t)$/;"	f	class:Transition
operator =	TransitionInfoASCII.cpp	/^TransitionInfoASCII& TransitionInfoASCII::operator=(const TransitionInfoASCII& t)$/;"	f	class:TransitionInfoASCII
operator =	TransitionInfoBin.cpp	/^TransitionInfoBin& TransitionInfoBin::operator=(const TransitionInfoBin& t)$/;"	f	class:TransitionInfoBin
operator =	TransitionInfoText.cpp	/^TransitionInfoText& TransitionInfoText::operator=(const TransitionInfoText& t)$/;"	f	class:TransitionInfoText
opt_display	MainWindow.h	/^    OptDisplayDlgImpl* opt_display;$/;"	m	class:MainWindow
opt_general	MainWindow.h	/^    OptGeneralDlgImpl* opt_general;$/;"	m	class:MainWindow
opt_printing	MainWindow.h	/^    OptPrintingDlgImpl* opt_printing;$/;"	m	class:MainWindow
options	Draw.h	/^    Options* options;$/;"	m	class:Draw
options	Export.h	/^    Options* options;$/;"	m	class:Export
options	Grid.h	/^    Options* options;$/;"	m	class:Grid
options	TableBuilder.h	/^    Options* options;$/;"	m	class:TableBuilder
orientation	ExportStateTableDlgImpl.h	/^    int orientation;$/;"	m	class:ExportStateTableDlgImpl
orientationClicked	ExportStateTableDlg.ui.h	/^void ExportStateTableDlg::orientationClicked( int )$/;"	f	class:ExportStateTableDlg
orientationClicked	ExportStateTableDlgImpl.cpp	/^void ExportStateTableDlgImpl::orientationClicked(int id)$/;"	f	class:ExportStateTableDlgImpl
out	Export.h	/^    ofstream* out;$/;"	m	class:Export
output_names	Machine.h	/^    QStringList output_names;$/;"	m	class:Machine
output_names_moore	Machine.h	/^    QStringList output_names_moore;$/;"	m	class:Machine
outputs	TransitionInfo.h	/^    IOInfo* outputs;$/;"	m	class:TransitionInfo
paint	ListBoxItems.cpp	/^void LBArrowFilled::paint(QPainter* p)$/;"	f	class:LBArrowFilled
paint	ListBoxItems.cpp	/^void LBArrowFilledPointed::paint(QPainter* p)$/;"	f	class:LBArrowFilledPointed
paint	ListBoxItems.cpp	/^void LBArrowLine::paint(QPainter* p)$/;"	f	class:LBArrowLine
paint	ListBoxItems.cpp	/^void LBArrowWhite::paint(QPainter* p)$/;"	f	class:LBArrowWhite
paint	ListBoxItems.cpp	/^void LBArrowWhitePointed::paint(QPainter* p)$/;"	f	class:LBArrowWhitePointed
panset	MainWindow.h	/^    QIconSet* panset;$/;"	m	class:MainWindow
pappicon	MainWindow.h	/^    QPixmap* pappicon;$/;"	m	class:MainWindow
parent_widget	AppInfo.h	/^    QWidget* parent_widget;  $/;"	m	class:AppInfo
paste	Edit.cpp	/^bool Edit::paste(Selection* sel, Project* p, Machine* m, QString data)$/;"	f	class:Edit
paste	UndoBuffer.cpp	/^void UndoBuffer::paste(QList<GState>* sl, QList<GTransition>* tl, GState* oldistate,$/;"	f	class:UndoBuffer
pasteset	MainWindow.h	/^    QIconSet* pasteset;$/;"	m	class:MainWindow
pb_bin0	SimulatorDlg.h	/^    QPushButton* pb_bin0;$/;"	m	class:SimulatorDlg
pb_bin1	SimulatorDlg.h	/^    QPushButton* pb_bin1;$/;"	m	class:SimulatorDlg
pb_bin10	SimulatorDlg.h	/^    QPushButton* pb_bin10;$/;"	m	class:SimulatorDlg
pb_bin11	SimulatorDlg.h	/^    QPushButton* pb_bin11;$/;"	m	class:SimulatorDlg
pb_bin12	SimulatorDlg.h	/^    QPushButton* pb_bin12;$/;"	m	class:SimulatorDlg
pb_bin13	SimulatorDlg.h	/^    QPushButton* pb_bin13;$/;"	m	class:SimulatorDlg
pb_bin14	SimulatorDlg.h	/^    QPushButton* pb_bin14;$/;"	m	class:SimulatorDlg
pb_bin15	SimulatorDlg.h	/^    QPushButton* pb_bin15;$/;"	m	class:SimulatorDlg
pb_bin2	SimulatorDlg.h	/^    QPushButton* pb_bin2;$/;"	m	class:SimulatorDlg
pb_bin3	SimulatorDlg.h	/^    QPushButton* pb_bin3;$/;"	m	class:SimulatorDlg
pb_bin4	SimulatorDlg.h	/^    QPushButton* pb_bin4;$/;"	m	class:SimulatorDlg
pb_bin5	SimulatorDlg.h	/^    QPushButton* pb_bin5;$/;"	m	class:SimulatorDlg
pb_bin6	SimulatorDlg.h	/^    QPushButton* pb_bin6;$/;"	m	class:SimulatorDlg
pb_bin7	SimulatorDlg.h	/^    QPushButton* pb_bin7;$/;"	m	class:SimulatorDlg
pb_bin8	SimulatorDlg.h	/^    QPushButton* pb_bin8;$/;"	m	class:SimulatorDlg
pb_bin9	SimulatorDlg.h	/^    QPushButton* pb_bin9;$/;"	m	class:SimulatorDlg
pb_cancel	ExportAHDLDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:ExportAHDLDlg
pb_cancel	ExportRagelDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:ExportRagelDlg
pb_cancel	ExportStateTableDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:ExportStateTableDlg
pb_cancel	ExportVHDLDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:ExportVHDLDlg
pb_cancel	ExportVerilogDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:ExportVerilogDlg
pb_cancel	MachinePropertiesDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:MachinePropertiesDlg
pb_cancel	SimulatorDlg.h	/^    QPushButton* pb_cancel;$/;"	m	class:SimulatorDlg
pb_clock	SimulatorDlg.h	/^    QPushButton* pb_clock;$/;"	m	class:SimulatorDlg
pb_export	ExportAHDLDlg.h	/^    QPushButton* pb_export;$/;"	m	class:ExportAHDLDlg
pb_export	ExportRagelDlg.h	/^    QPushButton* pb_export;$/;"	m	class:ExportRagelDlg
pb_export	ExportStateTableDlg.h	/^    QPushButton* pb_export;$/;"	m	class:ExportStateTableDlg
pb_export	ExportVHDLDlg.h	/^    QPushButton* pb_export;$/;"	m	class:ExportVHDLDlg
pb_export	ExportVerilogDlg.h	/^    QPushButton* pb_export;$/;"	m	class:ExportVerilogDlg
pb_gridcolor	OptDisplayDlg.h	/^    QPushButton* pb_gridcolor;$/;"	m	class:OptDisplayDlg
pb_ok	ICheckDlg.h	/^    QPushButton* pb_ok;$/;"	m	class:ICheckDlg
pb_ok	MachinePropertiesDlg.h	/^    QPushButton* pb_ok;$/;"	m	class:MachinePropertiesDlg
pb_reset	SimulatorDlg.h	/^    QPushButton* pb_reset;$/;"	m	class:SimulatorDlg
pb_send	SimulatorDlg.h	/^    QPushButton* pb_send;$/;"	m	class:SimulatorDlg
pb_shadowcolor	OptDisplayDlg.h	/^    QPushButton* pb_shadowcolor;$/;"	m	class:OptDisplayDlg
pb_statefont	MachinePropertiesDlg.h	/^    QPushButton* pb_statefont;$/;"	m	class:MachinePropertiesDlg
pb_transfont	MachinePropertiesDlg.h	/^    QPushButton* pb_transfont;$/;"	m	class:MachinePropertiesDlg
pen	GState.h	/^    QPen pen;$/;"	m	class:GState
phantom_state	Machine.h	/^    GState* phantom_state;$/;"	m	class:Machine
pm_cross	ICheckDlgImpl.h	/^    QPixmap* pm_cross;$/;"	m	class:ICheckDlgImpl
pm_deadlocks	ICheckDlg.h	/^    QLabel* pm_deadlocks;$/;"	m	class:ICheckDlg
pm_end	SimulatorDlg.h	/^    QLabel* pm_end;$/;"	m	class:SimulatorDlg
pm_endstate	ICheckDlg.h	/^    QLabel* pm_endstate;$/;"	m	class:ICheckDlg
pm_startstate	ICheckDlg.h	/^    QLabel* pm_startstate;$/;"	m	class:ICheckDlg
pm_tick	ICheckDlgImpl.h	/^    QPixmap* pm_tick;$/;"	m	class:ICheckDlgImpl
pm_unambcond	ICheckDlg.h	/^    QLabel* pm_unambcond;$/;"	m	class:ICheckDlg
pnew	MainWindow.h	/^    QPixmap* pnew;$/;"	m	class:MainWindow
popen	MainWindow.h	/^    QPixmap* popen;$/;"	m	class:MainWindow
position	StatusBar.h	/^    QLabel* position;$/;"	m	class:StatusBar
previous_viewcursor	MainWindow.h	/^    QCursor previous_viewcursor;$/;"	m	class:MainWindow
print	PrintManager.cpp	/^void PrintManager::print()$/;"	f	class:PrintManager
printHeaderClicked	OptPrintingDlg.cpp	/^void OptPrintingDlg::printHeaderClicked()$/;"	f	class:OptPrintingDlg
printHeaderClicked	OptPrintingDlgImpl.cpp	/^void OptPrintingDlgImpl::printHeaderClicked()$/;"	f	class:OptPrintingDlgImpl
print_header	OptPrintingDlgImpl.h	/^    bool print_header;$/;"	m	class:OptPrintingDlgImpl
print_header	Options.h	/^    bool print_header;$/;"	m	class:Options
printer	PrintManager.h	/^    QPrinter* printer;$/;"	m	class:PrintManager
printmanager	MainWindow.h	/^    PrintManager* printmanager;$/;"	m	class:MainWindow
printset	MainWindow.h	/^    QIconSet* printset;$/;"	m	class:MainWindow
project	Machine.h	/^    Project* project;$/;"	m	class:Machine
project	MainWindow.h	/^    Project* project;$/;"	m	class:MainWindow
project	Undo.h	/^    Project* project;$/;"	m	class:Undo
project	UndoBuffer.h	/^    Project* project;$/;"	m	class:UndoBuffer
project	XMLHandler.h	/^    Project* project;$/;"	m	class:XMLHandler
pzoomin	MainWindow.h	/^    QPixmap* pzoomin;$/;"	m	class:MainWindow
pzoomout	MainWindow.h	/^    QPixmap* pzoomout;$/;"	m	class:MainWindow
quiet	XMLHandler.h	/^    bool quiet;$/;"	m	class:XMLHandler
quitWindow	MainControl.cpp	/^void MainControl::quitWindow(MainWindow* w)$/;"	f	class:MainControl
radius	GState.h	/^    int radius;$/;"	m	class:GState
ragel_create_action	Options.h	/^    bool ragel_create_action;$/;"	m	class:Options
ragel_export	MainWindow.h	/^    ExportRagelDlgImpl* ragel_export;$/;"	m	class:MainWindow
ragel_lang_action	Options.h	/^    int ragel_lang_action;$/;"	m	class:Options
range	IOInfo.h	/^    bool range;$/;"	m	class:IOInfo
range_end	IOInfo.h	/^    int range_end;$/;"	m	class:IOInfo
range_start	IOInfo.h	/^    int range_start;$/;"	m	class:IOInfo
rb_C	ExportRagelDlg.h	/^    QRadioButton* rb_C;$/;"	m	class:ExportRagelDlg
rb_ascii	MachinePropertiesDlg.h	/^    QRadioButton* rb_ascii;$/;"	m	class:MachinePropertiesDlg
rb_ascii	TransitionPropertiesDlg.h	/^    QRadioButton* rb_ascii;$/;"	m	class:TransitionPropertiesDlg
rb_bin	TransitionPropertiesDlg.h	/^    QRadioButton* rb_bin;$/;"	m	class:TransitionPropertiesDlg
rb_binary	MachinePropertiesDlg.h	/^    QRadioButton* rb_binary;$/;"	m	class:MachinePropertiesDlg
rb_iascii	SimulatorDlg.h	/^    QRadioButton* rb_iascii;$/;"	m	class:SimulatorDlg
rb_ibin	SimulatorDlg.h	/^    QRadioButton* rb_ibin;$/;"	m	class:SimulatorDlg
rb_ihex	SimulatorDlg.h	/^    QRadioButton* rb_ihex;$/;"	m	class:SimulatorDlg
rb_java	ExportRagelDlg.h	/^    QRadioButton* rb_java;$/;"	m	class:ExportRagelDlg
rb_oascii	SimulatorDlg.h	/^    QRadioButton* rb_oascii;$/;"	m	class:SimulatorDlg
rb_obin	SimulatorDlg.h	/^    QRadioButton* rb_obin;$/;"	m	class:SimulatorDlg
rb_ohex	SimulatorDlg.h	/^    QRadioButton* rb_ohex;$/;"	m	class:SimulatorDlg
rb_orientation0	ExportStateTableDlg.h	/^    QRadioButton* rb_orientation0;$/;"	m	class:ExportStateTableDlg
rb_orientation1	ExportStateTableDlg.h	/^    QRadioButton* rb_orientation1;$/;"	m	class:ExportStateTableDlg
rb_ruby	ExportRagelDlg.h	/^    QRadioButton* rb_ruby;$/;"	m	class:ExportRagelDlg
rb_text	MachinePropertiesDlg.h	/^    QRadioButton* rb_text;$/;"	m	class:MachinePropertiesDlg
rb_text	TransitionPropertiesDlg.h	/^    QRadioButton* rb_text;$/;"	m	class:TransitionPropertiesDlg
redlight	SimulatorDlgImpl.h	/^    QPixmap* redlight;$/;"	m	class:SimulatorDlgImpl
reflist	GState.h	/^    QList<GTransition> reflist;$/;"	m	class:GState
refreshMRU	MainWindow.cpp	/^void MainWindow::refreshMRU()$/;"	f	class:MainWindow
registerOutClicked	ExportVerilogDlg.ui.h	/^void ExportVerilogDlg::registerOutClicked()$/;"	f	class:ExportVerilogDlg
removeMRUEntry	MainControl.cpp	/^void MainControl::removeMRUEntry(QString fileName)$/;"	f	class:MainControl
removeState	Machine.cpp	/^void Machine::removeState(GState* s)$/;"	f	class:Machine
removeTransition	GState.cpp	/^void GState::removeTransition(GTransition* trem)$/;"	f	class:GState
removeTransitionEnd	GState.cpp	/^void GState::removeTransitionEnd(GTransition* trem)$/;"	f	class:GState
repaintViewport	MainWindow.cpp	/^void MainWindow::repaintViewport()$/;"	f	class:MainWindow
replaceChar	Machine.cpp	/^void Machine::replaceChar(QString& s, QChar c1, QChar c2)$/;"	f	class:Machine
reset	ScrollView.cpp	/^void ScrollView::reset()$/;"	f	class:ScrollView
reset	Simulator.cpp	/^void Simulator::reset()$/;"	f	class:Simulator
reset	SimulatorDlg.ui.h	/^void SimulatorDlg::reset()$/;"	f	class:SimulatorDlg
reset	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::reset()$/;"	f	class:SimulatorDlgImpl
resetButtons	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::resetButtons()$/;"	f	class:SimulatorDlgImpl
resetContext	ScrollView.cpp	/^void ScrollView::resetContext()$/;"	f	class:ScrollView
resetState	ScrollView.cpp	/^void ScrollView::resetState()$/;"	f	class:ScrollView
resetZoom	Zoom.cpp	/^void Zoom::resetZoom(ScrollView* sview)$/;"	f	class:Zoom
resolveEscapes	Convert.cpp	/^void Convert::resolveEscapes(QString estr, unsigned char* cres, int arraymaxlen, int& length)$/;"	f	class:Convert
resolveInvertedClicked	ExportStateTableDlg.ui.h	/^void ExportStateTableDlg::resolveInvertedClicked()$/;"	f	class:ExportStateTableDlg
resolveInvertedClicked	ExportStateTableDlgImpl.cpp	/^void ExportStateTableDlgImpl::resolveInvertedClicked()$/;"	f	class:ExportStateTableDlgImpl
resolveX	IOInfoBin.cpp	/^void IOInfoBin::resolveX(IOInfoBin bin, IOInfoList& list)$/;"	f	class:IOInfoBin
resolve_inverted	ExportStateTableDlgImpl.h	/^    bool resolve_inverted;$/;"	m	class:ExportStateTableDlgImpl
returnPressedInputs	SimulatorDlg.ui.h	/^void SimulatorDlg::returnPressedInputs()$/;"	f	class:SimulatorDlg
returnPressedInputs	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::returnPressedInputs()$/;"	f	class:SimulatorDlgImpl
right	DRect.h	/^    double right() \/** Returns x coordinate of right border. *\/ { return x2; };$/;"	f	class:DRect
rlist	Undo.h	/^  QList<GTransition> rlist;$/;"	m	struct:dtlist
role	IOInfo.h	/^    bool role;$/;"	m	class:IOInfo
rstatelist	XMLHandler.h	/^    QValueList<int> rstatelist;$/;"	m	class:XMLHandler
saveFile	FileIO.cpp	/^bool FileIO::saveFile(Project* p)$/;"	f	class:FileIO
saveFileAs	FileIO.cpp	/^bool FileIO::saveFileAs(Project* p)$/;"	f	class:FileIO
saveMRU	FileIO.cpp	/^bool FileIO::saveMRU(QStringList list)$/;"	f	class:FileIO
saveOptions	FileIO.cpp	/^int FileIO::saveOptions(Options* opt)$/;"	f	class:FileIO
savedITrans	ScrollView.h	/^    GITransition savedITrans;$/;"	m	class:ScrollView
savedState	ScrollView.h	/^    GState savedState;		     $/;"	m	class:ScrollView
saved_numbits	MachinePropertiesDlgImpl.h	/^    int saved_numbits;$/;"	m	class:MachinePropertiesDlgImpl
saved_numin	MachinePropertiesDlgImpl.h	/^    int saved_numin;$/;"	m	class:MachinePropertiesDlgImpl
saved_numout	MachinePropertiesDlgImpl.h	/^    int saved_numout;$/;"	m	class:MachinePropertiesDlgImpl
saveinitialstate	XMLHandler.h	/^    int saveinitialstate;$/;"	m	class:XMLHandler
saveset	MainWindow.h	/^    QIconSet* saveset;$/;"	m	class:MainWindow
sbMessage	MainWindow.cpp	/^void MainWindow::sbMessage(QString s)$/;"	f	class:MainWindow
sbMessage	MainWindow.cpp	/^void MainWindow::sbMessage(QString s, int t)$/;"	f	class:MainWindow
sb_gridsize	OptDisplayDlg.h	/^    QSpinBox* sb_gridsize;$/;"	m	class:OptDisplayDlg
sb_mealyin	MachinePropertiesDlg.h	/^    QSpinBox* sb_mealyin;$/;"	m	class:MachinePropertiesDlg
sb_mealyout	MachinePropertiesDlg.h	/^    QSpinBox* sb_mealyout;$/;"	m	class:MachinePropertiesDlg
sb_mooreout	MachinePropertiesDlg.h	/^    QSpinBox* sb_mooreout;$/;"	m	class:MachinePropertiesDlg
scale	Zoom.h	/^    double scale;$/;"	m	class:Zoom
sdescription	State.h	/^    QString sdescription;$/;"	m	class:State
select	GObject.h	/^    void select(bool select=TRUE) { selected = select; };$/;"	f	class:GObject
select	Selection.cpp	/^GObject* Selection::select(ScrollView* sview, Machine* m, QPoint p,$/;"	f	class:Selection
select	Selection.cpp	/^void Selection::select(GITransition* t, bool sel\/*=TRUE*\/)$/;"	f	class:Selection
select	Selection.cpp	/^void Selection::select(GState* s, bool sel\/*=TRUE*\/)$/;"	f	class:Selection
select	Selection.cpp	/^void Selection::select(GTransition* t, bool sel\/*=TRUE*\/)$/;"	f	class:Selection
selectAdd	Selection.cpp	/^bool Selection::selectAdd(ScrollView* sview, Machine* m, QPoint p, double scale)$/;"	f	class:Selection
selectAll	Selection.cpp	/^bool Selection::selectAll(Machine* m, DRect& r)$/;"	f	class:Selection
selectControl	Selection.cpp	/^int Selection::selectControl(Machine* m, QPoint p, double scale, $/;"	f	class:Selection
selectFirst	MachinePropertiesDlgImpl.h	/^    void selectFirst() { le_name->selectAll(); le_name->setFocus(); };$/;"	f	class:MachinePropertiesDlgImpl
selectFirst	SimulatorDlg.ui.h	/^void SimulatorDlg::selectFirst()$/;"	f	class:SimulatorDlg
selectFirst	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::selectFirst()$/;"	f	class:SimulatorDlgImpl
selectFirst	StatePropertiesDlgImpl.h	/^    void selectFirst() { le_name->selectAll(); le_name->setFocus(); };$/;"	f	class:StatePropertiesDlgImpl
selectFirst	TransitionPropertiesDlgImpl.h	/^    void selectFirst() { le_input->selectAll(); le_input->setFocus(); };$/;"	f	class:TransitionPropertiesDlgImpl
selectITrans	Selection.h	/^    void selectITrans(bool s=TRUE) { itrans = s; };$/;"	f	class:Selection
selectRect	Selection.cpp	/^bool Selection::selectRect(Machine* m, DRect& r, bool add)$/;"	f	class:Selection
selected	GObject.h	/^    bool selected;$/;"	m	class:GObject
selected	StatusBar.h	/^    QLabel* selected;$/;"	m	class:StatusBar
selection	ScrollView.h	/^    Selection* selection;$/;"	m	class:ScrollView
selection	XMLHandler.h	/^    Selection* selection;$/;"	m	class:XMLHandler
selectionRect	ScrollView.h	/^    DRect selectionRect;$/;"	m	class:ScrollView
selset	MainWindow.h	/^    QIconSet* selset;$/;"	m	class:MainWindow
send	SimulatorDlg.ui.h	/^void SimulatorDlg::send()$/;"	f	class:SimulatorDlg
send	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::send()$/;"	f	class:SimulatorDlgImpl
setAHDLSyncReset	Options.h	/^    void setAHDLSyncReset(bool sr) { ahdl_sync_reset = sr; };$/;"	f	class:Options
setAHDLUseMoore	Options.h	/^    void setAHDLUseMoore(bool um) { ahdl_use_moore = um; };$/;"	f	class:Options
setASCII	IOInfoASCII.cpp	/^void IOInfoASCII::setASCII(const unsigned char* ascii, int asciilen, int )$/;"	f	class:IOInfoASCII
setASCII	IOInfoBin.cpp	/^void IOInfoBin::setASCII(const unsigned char* ascii, int asciilen, int numbits)$/;"	f	class:IOInfoBin
setASCII	IOInfoText.cpp	/^void IOInfoText::setASCII(const unsigned char* ascii, int asciilen, int )$/;"	f	class:IOInfoText
setActFilePath	FileIO.h	/^    void setActFilePath(QString file) \/\/\/ Sets actual file name.$/;"	f	class:FileIO
setAction	Undo.h	/^    void setAction(int a) { action=a; };$/;"	f	class:Undo
setAnyInput	IOInfo.h	/^    virtual void setAnyInput(bool ai) { any = ai; if (ai) {def=FALSE; invert=FALSE;} };$/;"	f	class:IOInfo
setAnyInput	IOInfoASCII.cpp	/^void IOInfoASCII::setAnyInput(bool ai) $/;"	f	class:IOInfoASCII
setAnyInput	IOInfoBin.cpp	/^void IOInfoBin::setAnyInput(bool ai)$/;"	f	class:IOInfoBin
setAnyInput	TransitionPropertiesDlgImpl.h	/^    void setAnyInput(bool i) { cb_any->setChecked(i); };$/;"	f	class:TransitionPropertiesDlgImpl
setAnyInputDescriptor	OptDisplayDlgImpl.h	/^    void setAnyInputDescriptor(QString ad) { any_input_descriptor = ad; };$/;"	f	class:OptDisplayDlgImpl
setAnyInputDescriptor	Options.h	/^    void setAnyInputDescriptor(QString ad) { any_input_descriptor = ad; };$/;"	f	class:Options
setArrowType	Machine.h	/^    void setArrowType(int t) { arrow_type=t; };$/;"	f	class:Machine
setArrowType	MachinePropertiesDlgImpl.h	/^    void setArrowType(int at) { lbox_arrowtype->setCurrentItem(at); };$/;"	f	class:MachinePropertiesDlgImpl
setBin	IOInfoASCII.cpp	/^void IOInfoASCII::setBin(QString bin, int )$/;"	f	class:IOInfoASCII
setBin	IOInfoBin.cpp	/^void IOInfoBin::setBin(QString bin, int numbits)$/;"	f	class:IOInfoBin
setBin	IOInfoText.cpp	/^void IOInfoText::setBin(QString bin, int )$/;"	f	class:IOInfoText
setBinMaxLength	TransitionPropertiesDlgImpl.h	/^    void setBinMaxLength(int in, int out) { binmax_in=in; binmax_out=out; };$/;"	f	class:TransitionPropertiesDlgImpl
setBrush	GState.h	/^    void setBrush(const QBrush& b) { brush = b; };$/;"	f	class:GState
setCPoint1	GTransition.h	/^    void setCPoint1(double x, double y) { control1x = x; control1y = y; };$/;"	f	class:GTransition
setCPoint1X	GTransition.h	/^    void setCPoint1X(double x) { control1x = x; };$/;"	f	class:GTransition
setCPoint1Y	GTransition.h	/^    void setCPoint1Y(double y) { control1y = y; };$/;"	f	class:GTransition
setCPoint2	GTransition.h	/^    void setCPoint2(double x, double y) { control2x = x; control2y = y; };$/;"	f	class:GTransition
setCPoint2X	GTransition.h	/^    void setCPoint2X(double x) { control2x = x; };$/;"	f	class:GTransition
setCPoint2Y	GTransition.h	/^    void setCPoint2Y(double y) { control2y = y; };$/;"	f	class:GTransition
setCanvasSize	Machine.cpp	/^void Machine::setCanvasSize(int x, int y)$/;"	f	class:Machine
setChanged	Project.h	/^    void setChanged(bool ch = TRUE) { changed=ch; };$/;"	f	class:Project
setCode	StatePropertiesDlgImpl.h	/^    void setCode(const QString& s) {le_code->setText(s); };$/;"	f	class:StatePropertiesDlgImpl
setCodeMaxLength	StatePropertiesDlgImpl.h	/^    void setCodeMaxLength(int l) { le_code->setMaxLength(l); };$/;"	f	class:StatePropertiesDlgImpl
setColor	GState.h	/^    void setColor(QColor c) { pen.setColor(c); };$/;"	f	class:GState
setColor	StatePropertiesDlgImpl.h	/^    void setColor(QColor c) { color=c; lb_colorpreview->setBackgroundColor(c); };$/;"	f	class:StatePropertiesDlgImpl
setComplete	ICheckDlgImpl.h	/^    void setComplete(QString s ) { lb_completeness_val->setText(s); };$/;"	f	class:ICheckDlgImpl
setContextObject	Selection.h	/^    void setContextObject(GObject* obj, int type) { context_object = obj; co_type=type; };$/;"	f	class:Selection
setCoords	DRect.cpp	/^void DRect::setCoords(double dx1, double dy1, double dx2, double dy2)$/;"	f	class:DRect
setCreateAction	ExportRagelDlgImpl.h	/^    void setCreateAction(bool ca) { create_action = ca; };$/;"	f	class:ExportRagelDlgImpl
setCurrentState	Simulator.cpp	/^void Simulator::setCurrentState(GState* s)$/;"	f	class:Simulator
setDefault	IOInfo.h	/^    virtual void setDefault(bool de) { def = de; if (de) {any=FALSE; invert=FALSE;} };$/;"	f	class:IOInfo
setDefaultDesriptor	OptDisplayDlgImpl.h	/^    void setDefaultDesriptor(QString dd) { default_descriptor = dd; };$/;"	f	class:OptDisplayDlgImpl
setDefaultTransition	TransitionPropertiesDlgImpl.h	/^    void setDefaultTransition(bool i) { cb_default->setChecked(i); };$/;"	f	class:TransitionPropertiesDlgImpl
setDefaultTransitionDescriptor	Options.h	/^    void setDefaultTransitionDescriptor(QString dd) { default_descriptor = dd; };$/;"	f	class:Options
setDeleted	GObject.h	/^    void setDeleted(bool d=TRUE) { deleted = d; };$/;"	f	class:GObject
setDescription	GTransition.h	/^    void setDescription(QString d) {description = d; };$/;"	f	class:GTransition
setDescription	State.h	/^    void setDescription(QString d ) { sdescription = d; };   $/;"	f	class:State
setDescription	StatePropertiesDlgImpl.h	/^    void setDescription(QString s) {te_description->setText(s); };$/;"	f	class:StatePropertiesDlgImpl
setDescription	TransitionPropertiesDlgImpl.h	/^    void setDescription(QString s) { te_description->setText(s); };$/;"	f	class:TransitionPropertiesDlgImpl
setDisplayIONames	OptDisplayDlgImpl.h	/^    void setDisplayIONames(bool dio) { ionames = dio; };$/;"	f	class:OptDisplayDlgImpl
setDisplayIONames	Options.h	/^    void setDisplayIONames(bool dio) { ionames = dio; };$/;"	f	class:Options
setDragMultiple	ScrollView.h	/^    void setDragMultiple(bool dm=TRUE) { dragMultiple=dm; };$/;"	f	class:ScrollView
setDrawBox	OptDisplayDlgImpl.h	/^    void setDrawBox(bool db) { bdrawbox = db; };$/;"	f	class:OptDisplayDlgImpl
setDrawBox	Options.h	/^    void setDrawBox(bool db) { bdrawbox = db; };$/;"	f	class:Options
setEncoding	State.h	/^    void setEncoding(int c) { code = c; };   $/;"	f	class:State
setEnd	ICheckDlgImpl.cpp	/^void ICheckDlgImpl::setEnd(bool b)$/;"	f	class:ICheckDlgImpl
setEnd	Transition.h	/^    void setEnd(State* s) { end = s; };$/;"	f	class:Transition
setEndPos	GITransition.h	/^    void setEndPos(double x, double y) \/\/\/ Sets coordinates of end point$/;"	f	class:GITransition
setEndPos	GTransition.cpp	/^void GTransition::setEndPos(double x, double y)$/;"	f	class:GTransition
setEndPosX	GITransition.h	/^    void setEndPosX(double x) $/;"	f	class:GITransition
setEndPosX	GTransition.cpp	/^void GTransition::setEndPosX(double x)$/;"	f	class:GTransition
setEndPosY	GITransition.h	/^    void setEndPosY(double y)$/;"	f	class:GITransition
setEndPosY	GTransition.cpp	/^void GTransition::setEndPosY(double y)$/;"	f	class:GTransition
setEndState	State.h	/^    void setEndState(bool es=TRUE) { endstate = es; };$/;"	f	class:State
setEndStates	StateManager.cpp	/^void StateManager::setEndStates(Machine* m, const QList<GState>& sl)$/;"	f	class:StateManager
setEndStates	UndoBuffer.cpp	/^void UndoBuffer::setEndStates(const QList<GState>& sl)$/;"	f	class:UndoBuffer
setEndStatesReachable	ICheckDlgImpl.h	/^    void setEndStatesReachable(QString s) { lb_endstatesreachable_val->setText(s); };$/;"	f	class:ICheckDlgImpl
setGridColor	OptDisplayDlgImpl.h	/^    void setGridColor(QColor c) { gridcolor=c; };$/;"	f	class:OptDisplayDlgImpl
setGridColor	Options.h	/^    void setGridColor(QColor c) { gridColor = c; };$/;"	f	class:Options
setGridSize	OptDisplayDlgImpl.h	/^    void setGridSize(int s) { sb_gridsize->setValue(s); };$/;"	f	class:OptDisplayDlgImpl
setGridSize	Options.h	/^    void setGridSize(int s) { gridSize = s; };$/;"	f	class:Options
setIOMark	OptDisplayDlgImpl.h	/^    void setIOMark(bool m) { iomark = m; };$/;"	f	class:OptDisplayDlgImpl
setIOMark	Options.h	/^    void setIOMark(bool m) { iomark = m; };$/;"	f	class:Options
setIncludeOutputs	ExportStateTableDlgImpl.h	/^    void setIncludeOutputs(bool io) { includeout = io; };$/;"	f	class:ExportStateTableDlgImpl
setInfo	IOInfoASCII.h	/^    void setInfo(QString i) { info = i.stripWhiteSpace(); };$/;"	f	class:IOInfoASCII
setInfo	IOInfoBin.cpp	/^void IOInfoBin::setInfo(char* io)$/;"	f	class:IOInfoBin
setInfo	IOInfoText.h	/^    void setInfo(QString i) { info = i.stripWhiteSpace(); };$/;"	f	class:IOInfoText
setInfo	Transition.h	/^    void setInfo(TransitionInfo* i) { info=i; };$/;"	f	class:Transition
setInitialState	Machine.h	/^    void setInitialState(GState* s) { initial_state = s; };$/;"	f	class:Machine
setInitialState	StateManager.cpp	/^void StateManager::setInitialState(Machine* m, GState* s)$/;"	f	class:StateManager
setInitialState	Undo.h	/^    void setInitialState(GState* s) { istate=s; };$/;"	f	class:Undo
setInitialState	UndoBuffer.cpp	/^void UndoBuffer::setInitialState(GITransition* t)$/;"	f	class:UndoBuffer
setInitialTransition	Machine.h	/^    void setInitialTransition(GITransition* t) { initial_transition = t; };$/;"	f	class:Machine
setInitialTransition	Undo.h	/^    void setInitialTransition(GITransition* t) { itrans= t; };$/;"	f	class:Undo
setInitialTransition2	Undo.h	/^    void setInitialTransition2(GITransition* t) { itrans2 = t; };$/;"	f	class:Undo
setInputMaxLength	TransitionPropertiesDlgImpl.h	/^    void setInputMaxLength(int l) { le_input->setMaxLength(l); };$/;"	f	class:TransitionPropertiesDlgImpl
setInputNameList	Machine.h	/^    void setInputNameList(QStringList l) { input_names = l; };$/;"	f	class:Machine
setInputs	SimulatorDlgImpl.h	/^    void setInputs(QString s) { le_inputs->setText(s); };$/;"	f	class:SimulatorDlgImpl
setInputs	TransitionInfoASCII.cpp	/^void TransitionInfoASCII::setInputs(QString sin, int numbits)$/;"	f	class:TransitionInfoASCII
setInputs	TransitionInfoBin.cpp	/^void TransitionInfoBin::setInputs(QString s, int numin\/*=-1*\/)$/;"	f	class:TransitionInfoBin
setInputs	TransitionInfoText.cpp	/^void TransitionInfoText::setInputs(QString sin, int numbits)$/;"	f	class:TransitionInfoText
setInputs	TransitionPropertiesDlgImpl.h	/^    void setInputs(QString s) { le_input->setText(s); };$/;"	f	class:TransitionPropertiesDlgImpl
setInputsSize	TransitionInfoASCII.cpp	/^void TransitionInfoASCII::setInputsSize(int )$/;"	f	class:TransitionInfoASCII
setInputsSize	TransitionInfoBin.cpp	/^void TransitionInfoBin::setInputsSize(int newin)$/;"	f	class:TransitionInfoBin
setInputsSize	TransitionInfoText.cpp	/^void TransitionInfoText::setInputsSize(int )$/;"	f	class:TransitionInfoText
setInversionDescriptor	OptDisplayDlgImpl.h	/^    void setInversionDescriptor(QString id) { inversion_descriptor = id; };$/;"	f	class:OptDisplayDlgImpl
setInversionDescriptor	Options.h	/^    void setInversionDescriptor(QString id) { inversion_descriptor = id; };$/;"	f	class:Options
setInvert	IOInfo.h	/^    void setInvert( bool inv ) { invert=inv; };$/;"	f	class:IOInfo
setInvert	IOInfoList.cpp	/^void IOInfoList::setInvert( bool inv )$/;"	f	class:IOInfoList
setInvert	TransitionPropertiesDlgImpl.h	/^    void setInvert(bool i) { cb_invert->setChecked(i); };$/;"	f	class:TransitionPropertiesDlgImpl
setLangAction	ExportRagelDlgImpl.h	/^    void setLangAction(int la) { lang_action = la; };$/;"	f	class:ExportRagelDlgImpl
setLanguage	MainWindow.h	/^    void setLanguage(QString s) { language = s; $/;"	f	class:MainWindow
setLanguage	OptGeneralDlgImpl.cpp	/^void OptGeneralDlgImpl::setLanguage(QString s)$/;"	f	class:OptGeneralDlgImpl
setLineWidth	GState.h	/^    void setLineWidth(const int l) { pen.setWidth(l); };$/;"	f	class:GState
setLineWidth	StatePropertiesDlgImpl.h	/^    void setLineWidth(const QString& l) {le_linewidth->setText(l); };$/;"	f	class:StatePropertiesDlgImpl
setLockStates	Options.h	/^    void setLockStates(bool ls) { lockstates = ls; };$/;"	f	class:Options
setLockTransitions	Options.h	/^    void setLockTransitions(bool lt) { locktransitions = lt; };$/;"	f	class:Options
setMachineInfo	Undo.cpp	/^void Undo::setMachineInfo(Machine* m, QString n, int t, int nb, QStringList olistm, int ni, $/;"	f	class:Undo
setMainWindow	StatePropertiesDlgImpl.h	/^    void setMainWindow(MainWindow* m) { main = m; };$/;"	f	class:StatePropertiesDlgImpl
setMealyInputNames	Machine.cpp	/^void Machine::setMealyInputNames(int num, QString string)$/;"	f	class:Machine
setMealyInputNames	MachinePropertiesDlgImpl.h	/^    void setMealyInputNames(QString s) { le_mealyin->setText(s); };$/;"	f	class:MachinePropertiesDlgImpl
setMealyOutputNames	Machine.cpp	/^void Machine::setMealyOutputNames(int num, QString string)$/;"	f	class:Machine
setMealyOutputNames	MachinePropertiesDlgImpl.h	/^    void setMealyOutputNames(QString s) { le_mealyout->setText(s); };$/;"	f	class:MachinePropertiesDlgImpl
setMinMax	Selection.cpp	/^void Selection::setMinMax(double x, double y, double& l, double& t, $/;"	f	class:Selection
setMode	DocStatus.h	/^    void setMode(int m) \/\/\/ Sets the current mode @a m of the document. $/;"	f	class:DocStatus
setMode	MainWindow.cpp	/^void MainWindow::setMode(int m)$/;"	f	class:MainWindow
setMode	StatePropertiesDlgImpl.h	/^    void setMode(int m) { mode = m; };$/;"	f	class:StatePropertiesDlgImpl
setModified	Undo.h	/^    void setModified(bool m) { modified=m; };$/;"	f	class:Undo
setMooreOutputList	Machine.h	/^    void setMooreOutputList(QStringList l) { output_names_moore = l; };$/;"	f	class:Machine
setMooreOutputNames	Machine.cpp	/^void Machine::setMooreOutputNames(int num, QString string)$/;"	f	class:Machine
setMooreOutputNames	MachinePropertiesDlgImpl.h	/^    void setMooreOutputNames(QString s) { le_mooreout->setText(s); };$/;"	f	class:MachinePropertiesDlgImpl
setMooreOutputs	State.h	/^    void setMooreOutputs(IOInfo* o) { moore_outputs = o; };   $/;"	f	class:State
setMooreOutputs	StatePropertiesDlgImpl.h	/^    void setMooreOutputs(const QString& s) {le_mooreoutputs->setText(s); };$/;"	f	class:StatePropertiesDlgImpl
setMooreOutputsMaxLength	StatePropertiesDlgImpl.h	/^    void setMooreOutputsMaxLength(int l) { le_mooreoutputs->setMaxLength(l); };$/;"	f	class:StatePropertiesDlgImpl
setMovedBy	Undo.h	/^    void setMovedBy(double x, double y) { movedbyx=x; movedbyy=y; };$/;"	f	class:Undo
setName	Machine.h	/^    void setName(const QString n) { name = n; };$/;"	f	class:Machine
setName	MachinePropertiesDlgImpl.h	/^    void setName(QString n) { le_name->setText(n); };$/;"	f	class:MachinePropertiesDlgImpl
setName	StatePropertiesDlgImpl.h	/^    void setName(const QString& s) {le_name->setText(s); };$/;"	f	class:StatePropertiesDlgImpl
setNoDeadLocks	ICheckDlgImpl.cpp	/^void ICheckDlgImpl::setNoDeadLocks(bool b)$/;"	f	class:ICheckDlgImpl
setNumInputs	Machine.cpp	/^void Machine::setNumInputs(int ni)$/;"	f	class:Machine
setNumInputs	MachinePropertiesDlgImpl.h	/^    void setNumInputs(int num) { sb_mealyin->setValue(num); saved_numin=num; };$/;"	f	class:MachinePropertiesDlgImpl
setNumInputs	Undo.h	/^    void setNumInputs(int ni) {numin = ni; };$/;"	f	class:Undo
setNumMooreOutputs	Machine.cpp	/^void Machine::setNumMooreOutputs(int nb)$/;"	f	class:Machine
setNumMooreOutputs	MachinePropertiesDlgImpl.h	/^    void setNumMooreOutputs(int num) { sb_mooreout->setValue(num); saved_numbits=num; };$/;"	f	class:MachinePropertiesDlgImpl
setNumMooreOutputs	Undo.h	/^    void setNumMooreOutputs(int nb) { nummooreout=nb; };$/;"	f	class:Undo
setNumOutputs	Machine.cpp	/^void Machine::setNumOutputs(int no)$/;"	f	class:Machine
setNumOutputs	MachinePropertiesDlgImpl.h	/^    void setNumOutputs(int num) { sb_mealyout->setValue(num); saved_numout=num; };$/;"	f	class:MachinePropertiesDlgImpl
setNumOutputs	Undo.h	/^    void setNumOutputs(int no) {numout = no; };$/;"	f	class:Undo
setOptions	FileIO.cpp	/^void FileIO::setOptions(QMap<QString, QString>* _map, Options* opt)$/;"	f	class:FileIO
setOrientation	ExportStateTableDlgImpl.h	/^    void setOrientation(bool orient) { orientation = orient; };$/;"	f	class:ExportStateTableDlgImpl
setOutputMaxLength	TransitionPropertiesDlgImpl.h	/^    void setOutputMaxLength(int l) { le_output->setMaxLength(l); };$/;"	f	class:TransitionPropertiesDlgImpl
setOutputNameList	Machine.h	/^    void setOutputNameList(QStringList l) { output_names = l; };$/;"	f	class:Machine
setOutputs	SimulatorDlgImpl.h	/^    void setOutputs(QString o) { lb_outputs->setText(o); };$/;"	f	class:SimulatorDlgImpl
setOutputs	TransitionInfoASCII.cpp	/^void TransitionInfoASCII::setOutputs(QString sout, int numbits)$/;"	f	class:TransitionInfoASCII
setOutputs	TransitionInfoBin.cpp	/^void TransitionInfoBin::setOutputs(QString s, int numout\/*=-1*\/)$/;"	f	class:TransitionInfoBin
setOutputs	TransitionInfoText.cpp	/^void TransitionInfoText::setOutputs(QString sout, int numbits)$/;"	f	class:TransitionInfoText
setOutputs	TransitionPropertiesDlgImpl.h	/^    void setOutputs(QString s) { le_output->setText(s); };$/;"	f	class:TransitionPropertiesDlgImpl
setOutputsSize	TransitionInfoASCII.cpp	/^void TransitionInfoASCII::setOutputsSize(int )$/;"	f	class:TransitionInfoASCII
setOutputsSize	TransitionInfoBin.cpp	/^void TransitionInfoBin::setOutputsSize(int newout)$/;"	f	class:TransitionInfoBin
setOutputsSize	TransitionInfoText.cpp	/^void TransitionInfoText::setOutputsSize(int )$/;"	f	class:TransitionInfoText
setPen	GState.h	/^    void setPen(const QPen& p) { pen = p; };$/;"	f	class:GState
setPhantomState	Machine.h	/^    void setPhantomState(GState* s) { phantom_state = s; };$/;"	f	class:Machine
setPos	GObject.h	/^    virtual void setPos(const double x, const double y) { xpos = x; ypos = y; };$/;"	f	class:GObject
setPosition	StatusBar.cpp	/^void StatusBar::setPosition(double x, double y)$/;"	f	class:StatusBar
setPreviousCursor	MainWindow.cpp	/^void MainWindow::setPreviousCursor()$/;"	f	class:MainWindow
setPrintHeader	OptPrintingDlgImpl.h	/^    void setPrintHeader(bool ph) { print_header = ph; };$/;"	f	class:OptPrintingDlgImpl
setPrintHeader	Options.h	/^    void setPrintHeader(bool ph) { print_header = ph; };$/;"	f	class:Options
setProject	Machine.h	/^    void setProject(Project* p) { project = p; };$/;"	f	class:Machine
setRadius	GState.h	/^    void setRadius(const int r) { radius = r; };$/;"	f	class:GState
setRadius	StatePropertiesDlgImpl.h	/^    void setRadius(const QString& r) {le_radius->setText(r); };$/;"	f	class:StatePropertiesDlgImpl
setRagelCreateAction	Options.h	/^    void setRagelCreateAction(bool ca) { ragel_create_action = ca; };$/;"	f	class:Options
setRagelLangAction	Options.h	/^    void setRagelLangAction(int la) { ragel_lang_action = la; };$/;"	f	class:Options
setRange	IOInfo.h	/^    virtual void setRange(int start, int end) { range_start = start; range_end = end; range=TRUE; };$/;"	f	class:IOInfo
setRangeInfo	IOInfoASCII.cpp	/^void IOInfoASCII::setRangeInfo(IOInfo* rstart, IOInfo* rend)$/;"	f	class:IOInfoASCII
setRangeInfo	IOInfoBin.cpp	/^void IOInfoBin::setRangeInfo(IOInfo* range_start, IOInfo* \/*range_end*\/)$/;"	f	class:IOInfoBin
setRangeInfo	IOInfoText.cpp	/^void IOInfoText::setRangeInfo(IOInfo* rstart, IOInfo* rend)$/;"	f	class:IOInfoText
setResolveInverted	ExportStateTableDlgImpl.h	/^    void setResolveInverted(bool ri) { resolve_inverted = ri; };$/;"	f	class:ExportStateTableDlgImpl
setRole	IOInfo.h	/^    void setRole(bool r) { role = r; };$/;"	f	class:IOInfo
setSFont	Machine.h	/^    void setSFont(const QFont& f) { state_font = f; };$/;"	f	class:Machine
setSFont	MachinePropertiesDlgImpl.h	/^    void setSFont(QFont f) { sfont = f; lb_statefont->setText(f.family()); $/;"	f	class:MachinePropertiesDlgImpl
setScale	Zoom.h	/^    void setScale(double s) { scale = s; };$/;"	f	class:Zoom
setSelected	StatusBar.cpp	/^void StatusBar::setSelected(int sel)$/;"	f	class:StatusBar
setSelectionRect	ScrollView.h	/^    void setSelectionRect(DRect r) { selectionRect=r; };$/;"	f	class:ScrollView
setShadowColor	OptDisplayDlgImpl.h	/^    void setShadowColor(QColor c) { shadowcolor=c; };$/;"	f	class:OptDisplayDlgImpl
setShadows	OptDisplayDlgImpl.h	/^    void setShadows(bool s) { bshadows = s; };$/;"	f	class:OptDisplayDlgImpl
setSize	IOInfo.h	/^    virtual void setSize(int) {};$/;"	f	class:IOInfo
setSize	IOInfoBin.cpp	/^void IOInfoBin::setSize(int newin)$/;"	f	class:IOInfoBin
setStart	ICheckDlgImpl.cpp	/^void ICheckDlgImpl::setStart(bool b)$/;"	f	class:ICheckDlgImpl
setStart	Transition.h	/^    void setStart(State* s) { start = s; };$/;"	f	class:Transition
setStartDescriptor	OptDisplayDlgImpl.h	/^    void setStartDescriptor(QString sd) { start_descriptor = sd; };$/;"	f	class:OptDisplayDlgImpl
setStartDescriptor	Options.h	/^    void setStartDescriptor(QString sd) { start_descriptor = sd; };$/;"	f	class:Options
setStartPos	GTransition.cpp	/^void GTransition::setStartPos(double x, double y)$/;"	f	class:GTransition
setState	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::setState(int s)$/;"	f	class:SimulatorDlgImpl
setState	StatePropertiesDlgImpl.h	/^    void setState(GState* s) { state=s; };$/;"	f	class:StatePropertiesDlgImpl
setState	Undo.h	/^    void setState(GState* s) { state=s; };$/;"	f	class:Undo
setState2	Undo.h	/^    void setState2(GState* s) { state2=s; };$/;"	f	class:Undo
setStateCode	SimulatorDlgImpl.h	/^    void setStateCode(QString c) { lb_scode->setText(c); };$/;"	f	class:SimulatorDlgImpl
setStateName	SimulatorDlgImpl.h	/^    void setStateName(QString n) { lb_sname->setText(n); };$/;"	f	class:SimulatorDlgImpl
setStateName	State.h	/^    void setStateName(QString n ) { sname = n; };   $/;"	f	class:State
setStateShadowColor	Options.h	/^    void setStateShadowColor(QColor col) { stateShadowColor = col; };$/;"	f	class:Options
setStateShadows	Options.h	/^    void setStateShadows(bool sh) { stateShadows = sh; };$/;"	f	class:Options
setStateTableIncludeOut	Options.h	/^    void setStateTableIncludeOut(bool io) { statetable_includeout = io; };$/;"	f	class:Options
setStateTableOrientation	Options.h	/^    void setStateTableOrientation(int orient) { statetable_orientation = orient; };$/;"	f	class:Options
setStateTableResolveInverted	Options.h	/^    void setStateTableResolveInverted(bool ri) { statetable_resolve_inverted = ri; };$/;"	f	class:Options
setStatesReachable	ICheckDlgImpl.h	/^    void setStatesReachable(QString s) { lb_statesreachable_val->setText(s); };$/;"	f	class:ICheckDlgImpl
setStdLogic	ExportVHDLDlgImpl.h	/^    void setStdLogic(bool sl) { stdlogic = sl; };$/;"	f	class:ExportVHDLDlgImpl
setStraight	GTransition.h	/^    void setStraight(bool s=TRUE) { straight = s; };$/;"	f	class:GTransition
setString	IOInfoASCII.cpp	/^void IOInfoASCII::setString(QString string, int )$/;"	f	class:IOInfoASCII
setString	IOInfoBin.cpp	/^void IOInfoBin::setString(QString string, int numbits)$/;"	f	class:IOInfoBin
setString	IOInfoText.cpp	/^void IOInfoText::setString(QString string, int )$/;"	f	class:IOInfoText
setSymbolicStates	ExportVHDLDlgImpl.h	/^    void setSymbolicStates(bool ss) { symbolic_states = ss; };$/;"	f	class:ExportVHDLDlgImpl
setSyncReset	ExportAHDLDlgImpl.h	/^    void setSyncReset(bool sr) { sync_reset = sr; };$/;"	f	class:ExportAHDLDlgImpl
setSyncReset	ExportVHDLDlgImpl.h	/^    void setSyncReset(bool sr) { sync_reset = sr; };$/;"	f	class:ExportVHDLDlgImpl
setSyncReset	ExportVerilogDlgImpl.h	/^    void setSyncReset(bool sr) { sync_reset = sr; };$/;"	f	class:ExportVerilogDlgImpl
setTFont	Machine.h	/^    void setTFont(const QFont& f) { transition_font = f; };$/;"	f	class:Machine
setTFont	MachinePropertiesDlgImpl.h	/^    void setTFont(QFont f) { tfont = f; lb_transfont->setText(f.family());$/;"	f	class:MachinePropertiesDlgImpl
setToolTips	OptDisplayDlgImpl.h	/^    void setToolTips(bool t) { btooltips = t; };$/;"	f	class:OptDisplayDlgImpl
setToolTips	Options.h	/^    void setToolTips(bool t) { tooltips = t; };$/;"	f	class:Options
setTransConnected	ICheckDlgImpl.h	/^    void setTransConnected(QString s) { lb_transconnected_val->setText(s); };$/;"	f	class:ICheckDlgImpl
setTransition	Undo.h	/^    void setTransition(GTransition* t) { transition = t; };$/;"	f	class:Undo
setTransition2	Undo.h	/^    void setTransition2(GTransition* t) { transition2 = t; };$/;"	f	class:Undo
setTransitionsToRadius	GState.cpp	/^void GState::setTransitionsToRadius(Machine* m, int radius)$/;"	f	class:GState
setType	Machine.h	/^    void setType(int t) { type = t; };$/;"	f	class:Machine
setType	MachinePropertiesDlgImpl.cpp	/^void MachinePropertiesDlgImpl::setType(int t)$/;"	f	class:MachinePropertiesDlgImpl
setType	TransitionInfo.h	/^    void setType(int t) { type = t; };$/;"	f	class:TransitionInfo
setType	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::setType(int t)$/;"	f	class:TransitionPropertiesDlgImpl
setUnambiguous	ICheckDlgImpl.cpp	/^void ICheckDlgImpl::setUnambiguous(bool b)$/;"	f	class:ICheckDlgImpl
setUseMoore	ExportAHDLDlgImpl.h	/^    void setUseMoore(bool um) { use_moore = um; };$/;"	f	class:ExportAHDLDlgImpl
setVHDLStdLogic	Options.h	/^    void setVHDLStdLogic(bool sl) { vhdl_stdlogic = sl; };$/;"	f	class:Options
setVHDLSymbolicStates	Options.h	/^    void setVHDLSymbolicStates(bool ss) { vhdl_symbolic_states = ss; };$/;"	f	class:Options
setVHDLSyncReset	Options.h	/^    void setVHDLSyncReset(bool sr) { vhdl_sync_reset = sr; };$/;"	f	class:Options
setVerilogSyncReset	Options.h	/^    void setVerilogSyncReset(bool sr) { ver_sync_reset = sr; };$/;"	f	class:Options
setVersion	Machine.h	/^    void setVersion( QString v) { version = v; };$/;"	f	class:Machine
setVersion	MachinePropertiesDlgImpl.h	/^    void setVersion(QString v) { le_version->setText(v); };$/;"	f	class:MachinePropertiesDlgImpl
setViewGrid	Options.h	/^    void setViewGrid(bool v) { viewGrid = v; };$/;"	f	class:Options
setViewMealyIn	Options.h	/^    void setViewMealyIn(bool v) { viewMealyIn = v; };$/;"	f	class:Options
setViewMealyOut	Options.h	/^    void setViewMealyOut(bool v) { viewMealyOut = v; };$/;"	f	class:Options
setViewMoore	Options.h	/^    void setViewMoore(bool v) { viewMoore = v; };$/;"	f	class:Options
setViewStateEncoding	Options.h	/^    void setViewStateEncoding(bool s) { viewStateEncoding = s; };$/;"	f	class:Options
setWaitCursor	MainWindow.cpp	/^void MainWindow::setWaitCursor()$/;"	f	class:MainWindow
setXPos	GObject.h	/^    virtual void setXPos(const double x) { xpos = x; };$/;"	f	class:GObject
setYPos	GObject.h	/^    virtual void setYPos(const double y) { ypos = y; };$/;"	f	class:GObject
setZoom	StatusBar.cpp	/^void StatusBar::setZoom(int z)$/;"	f	class:StatusBar
sfont	MachinePropertiesDlgImpl.h	/^    QFont sfont;$/;"	m	class:MachinePropertiesDlgImpl
sfont	Undo.h	/^    QFont sfont;$/;"	m	class:Undo
shadowcolor	OptDisplayDlgImpl.h	/^    QColor shadowcolor;$/;"	m	class:OptDisplayDlgImpl
shadowsClicked	OptDisplayDlg.ui.h	/^void OptDisplayDlg::shadowsClicked()$/;"	f	class:OptDisplayDlg
shadowsClicked	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::shadowsClicked()$/;"	f	class:OptDisplayDlgImpl
shiftPressed	MainWindow.h	/^    bool shiftPressed() { return shift_pressed; };$/;"	f	class:MainWindow
shift_pressed	MainWindow.h	/^    bool shift_pressed;$/;"	m	class:MainWindow
showContext	MainWindow.cpp	/^void MainWindow::showContext()$/;"	f	class:MainWindow
showContext	ScrollView.cpp	/^void ScrollView::showContext(QPoint point)$/;"	f	class:ScrollView
showContextState	MainWindow.cpp	/^void MainWindow::showContextState()$/;"	f	class:MainWindow
showContextTrans	MainWindow.cpp	/^void MainWindow::showContextTrans()$/;"	f	class:MainWindow
showDlg	ICheck.h	/^    void showDlg() { icheckdlg->show(); };$/;"	f	class:ICheck
simdlg	Simulator.h	/^    SimulatorDlgImpl* simdlg;$/;"	m	class:Simulator
simstate	SimulatorDlgImpl.h	/^    enum simstate {Off, Busy, Finished};$/;"	g	class:SimulatorDlgImpl
simulator	MainWindow.h	/^    Simulator* simulator;$/;"	m	class:MainWindow
slist	Undo.h	/^    QList<GState> slist; 	$/;"	m	class:Undo
slist2	Undo.h	/^    QList<GState> slist2;$/;"	m	class:Undo
sname	State.h	/^    QString sname;$/;"	m	class:State
sname	XMLHandler.h	/^    QString sname;$/;"	m	class:XMLHandler
snamecont	XMLHandler.h	/^    bool snamecont;$/;"	m	class:XMLHandler
spacer10	ExportAHDLDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:ExportAHDLDlg
spacer10	ExportRagelDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:ExportRagelDlg
spacer10	ExportStateTableDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:ExportStateTableDlg
spacer10	ExportVHDLDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:ExportVHDLDlg
spacer10	ExportVerilogDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:ExportVerilogDlg
spacer10	OptDisplayDlg.h	/^    QSpacerItem* spacer10;$/;"	m	class:OptDisplayDlg
spacer11	ExportVHDLDlg.h	/^    QSpacerItem* spacer11;$/;"	m	class:ExportVHDLDlg
spacer12	ExportVHDLDlg.h	/^    QSpacerItem* spacer12;$/;"	m	class:ExportVHDLDlg
spacer13	ExportStateTableDlg.h	/^    QSpacerItem* spacer13;$/;"	m	class:ExportStateTableDlg
spacer13	ExportVHDLDlg.h	/^    QSpacerItem* spacer13;$/;"	m	class:ExportVHDLDlg
spacer14	ExportStateTableDlg.h	/^    QSpacerItem* spacer14;$/;"	m	class:ExportStateTableDlg
spacer25	ExportAHDLDlg.h	/^    QSpacerItem* spacer25;$/;"	m	class:ExportAHDLDlg
spacer26	ExportAHDLDlg.h	/^    QSpacerItem* spacer26;$/;"	m	class:ExportAHDLDlg
spacer27	ExportAHDLDlg.h	/^    QSpacerItem* spacer27;$/;"	m	class:ExportAHDLDlg
spacer27	ExportStateTableDlg.h	/^    QSpacerItem* spacer27;$/;"	m	class:ExportStateTableDlg
spacer27	ExportVerilogDlg.h	/^    QSpacerItem* spacer27;$/;"	m	class:ExportVerilogDlg
spacer28	ExportRagelDlg.h	/^    QSpacerItem* spacer28;$/;"	m	class:ExportRagelDlg
spacer29	ExportRagelDlg.h	/^    QSpacerItem* spacer29;$/;"	m	class:ExportRagelDlg
spacer30	ExportRagelDlg.h	/^    QSpacerItem* spacer30;$/;"	m	class:ExportRagelDlg
spacer31	ExportRagelDlg.h	/^    QSpacerItem* spacer31;$/;"	m	class:ExportRagelDlg
spacer7	ExportVerilogDlg.h	/^    QSpacerItem* spacer7;$/;"	m	class:ExportVerilogDlg
spacer8	ExportAHDLDlg.h	/^    QSpacerItem* spacer8;$/;"	m	class:ExportAHDLDlg
spacer8	ExportRagelDlg.h	/^    QSpacerItem* spacer8;$/;"	m	class:ExportRagelDlg
spacer8	ExportStateTableDlg.h	/^    QSpacerItem* spacer8;$/;"	m	class:ExportStateTableDlg
spacer8	ExportVHDLDlg.h	/^    QSpacerItem* spacer8;$/;"	m	class:ExportVHDLDlg
spacer8	ExportVerilogDlg.h	/^    QSpacerItem* spacer8;$/;"	m	class:ExportVerilogDlg
spacer8_2	ExportVerilogDlg.h	/^    QSpacerItem* spacer8_2;$/;"	m	class:ExportVerilogDlg
spacer9	ExportAHDLDlg.h	/^    QSpacerItem* spacer9;$/;"	m	class:ExportAHDLDlg
spacer9	ExportRagelDlg.h	/^    QSpacerItem* spacer9;$/;"	m	class:ExportRagelDlg
spacer9	ExportStateTableDlg.h	/^    QSpacerItem* spacer9;$/;"	m	class:ExportStateTableDlg
spacer9	ExportVHDLDlg.h	/^    QSpacerItem* spacer9;$/;"	m	class:ExportVHDLDlg
spacer9	ExportVerilogDlg.h	/^    QSpacerItem* spacer9;$/;"	m	class:ExportVerilogDlg
split	IOInfoASCII.cpp	/^void IOInfoASCII::split(IOInfoList& list, bool resolve_invert)$/;"	f	class:IOInfoASCII
split	IOInfoBin.cpp	/^void IOInfoBin::split(IOInfoList& list, bool resolve_invert)$/;"	f	class:IOInfoBin
split	IOInfoText.cpp	/^void IOInfoText::split(IOInfoList& list , bool \/*resolve_invert*\/)$/;"	f	class:IOInfoText
ssel_list	Selection.h	/^    QList<GState> ssel_list;$/;"	m	class:Selection
start	Transition.h	/^    State* start;$/;"	m	class:Transition
startDescChanged	OptDisplayDlg.ui.h	/^void OptDisplayDlg::startDescChanged()$/;"	f	class:OptDisplayDlg
startDescChanged	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::startDescChanged()$/;"	f	class:OptDisplayDlgImpl
startDocument	XMLHandler.cpp	/^bool XMLHandler::startDocument()$/;"	f	class:XMLHandler
startElement	XMLHandler.cpp	/^bool XMLHandler::startElement ( const QString & \/*namespaceURI*\/, const QString &$/;"	f	class:XMLHandler
startSimulation	Simulator.cpp	/^bool Simulator::startSimulation(Machine* m)$/;"	f	class:Simulator
start_descriptor	OptDisplayDlgImpl.h	/^    QString start_descriptor;$/;"	m	class:OptDisplayDlgImpl
start_descriptor	Options.h	/^    QString start_descriptor;$/;"	m	class:Options
state	StatePropertiesDlgImpl.h	/^    GState* state;$/;"	m	class:StatePropertiesDlgImpl
state	Undo.h	/^    GState* state;$/;"	m	class:Undo
state	XMLHandler.h	/^    GState* state;$/;"	m	class:XMLHandler
state2	Undo.h	/^    GState* state2;$/;"	m	class:Undo
stateEdit	MainWindow.cpp	/^void MainWindow::stateEdit()$/;"	f	class:MainWindow
stateNew	MainWindow.cpp	/^void MainWindow::stateNew()$/;"	f	class:MainWindow
stateSetEnd	MainWindow.cpp	/^void MainWindow::stateSetEnd()$/;"	f	class:MainWindow
stateSetInitial	MainWindow.cpp	/^void MainWindow::stateSetInitial()$/;"	f	class:MainWindow
stateShadowColor	Options.h	/^    QColor stateShadowColor;$/;"	m	class:Options
stateShadows	Options.h	/^    bool stateShadows;$/;"	m	class:Options
state_encoding	ExportVHDL.h	/^    bool state_encoding;$/;"	m	class:ExportVHDL
state_font	Machine.h	/^    QFont state_font;$/;"	m	class:Machine
state_list	Machine.h	/^    QList<GState> state_list;$/;"	m	class:Machine
state_props	StateManager.h	/^    StatePropertiesDlgImpl* state_props;$/;"	m	class:StateManager
statemanager	MainWindow.h	/^    StateManager* statemanager;$/;"	m	class:MainWindow
statenewset	MainWindow.h	/^    QIconSet* statenewset;$/;"	m	class:MainWindow
statetable_export	MainWindow.h	/^    ExportStateTableDlgImpl* statetable_export;$/;"	m	class:MainWindow
statetable_includeout	Options.h	/^    bool statetable_includeout;$/;"	m	class:Options
statetable_orientation	Options.h	/^    int statetable_orientation;$/;"	m	class:Options
statetable_resolve_inverted	Options.h	/^    bool statetable_resolve_inverted;$/;"	m	class:Options
statusbar	MainWindow.h	/^    StatusBar* statusbar;$/;"	m	class:MainWindow
stdlogic	ExportVHDLDlgImpl.h	/^    bool stdlogic;$/;"	m	class:ExportVHDLDlgImpl
stopSimulation	Simulator.cpp	/^void Simulator::stopSimulation()$/;"	f	class:Simulator
stopTimer	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::stopTimer()$/;"	f	class:SimulatorDlgImpl
straight	GTransition.h	/^    bool straight;$/;"	m	class:GTransition
straighten	GTransition.cpp	/^void GTransition::straighten()$/;"	f	class:GTransition
straightenSelection	TransitionManager.cpp	/^void TransitionManager::straightenSelection(QList<GTransition>* l)$/;"	f	class:TransitionManager
strlist1	Undo.h	/^    QStringList strlist1;$/;"	m	class:Undo
strlist2	Undo.h	/^    QStringList strlist2;$/;"	m	class:Undo
strlist3	Undo.h	/^    QStringList strlist3;$/;"	m	class:Undo
symbolicNamesClicked	ExportVHDLDlg.ui.h	/^void ExportVHDLDlg::symbolicNamesClicked()$/;"	f	class:ExportVHDLDlg
symbolicNamesClicked	ExportVHDLDlgImpl.cpp	/^void ExportVHDLDlgImpl::symbolicNamesClicked()$/;"	f	class:ExportVHDLDlgImpl
symbolic_states	ExportVHDLDlgImpl.h	/^    bool symbolic_states;$/;"	m	class:ExportVHDLDlgImpl
syncResetClicked	ExportAHDLDlg.ui.h	/^void ExportAHDLDlg::syncResetClicked()$/;"	f	class:ExportAHDLDlg
syncResetClicked	ExportAHDLDlgImpl.cpp	/^void ExportAHDLDlgImpl::syncResetClicked()$/;"	f	class:ExportAHDLDlgImpl
syncResetClicked	ExportVerilogDlg.ui.h	/^void ExportVerilogDlg::syncResetClicked()$/;"	f	class:ExportVerilogDlg
syncResetClicked	ExportVerilogDlgImpl.cpp	/^void ExportVerilogDlgImpl::syncResetClicked()$/;"	f	class:ExportVerilogDlgImpl
sync_reset	ExportAHDL.h	/^    bool sync_reset;$/;"	m	class:ExportAHDL
sync_reset	ExportAHDLDlgImpl.h	/^    bool sync_reset;$/;"	m	class:ExportAHDLDlgImpl
sync_reset	ExportVHDLDlgImpl.h	/^    bool sync_reset;$/;"	m	class:ExportVHDLDlgImpl
sync_reset	ExportVerilogDlgImpl.h	/^    bool sync_reset;$/;"	m	class:ExportVerilogDlgImpl
synchronousResetClicked	ExportVHDLDlg.ui.h	/^void ExportVHDLDlg::synchronousResetClicked()$/;"	f	class:ExportVHDLDlg
synchronousResetClicked	ExportVHDLDlgImpl.cpp	/^void ExportVHDLDlgImpl::synchronousResetClicked()$/;"	f	class:ExportVHDLDlgImpl
synchronous_reset	ExportVHDL.h	/^    bool synchronous_reset;$/;"	m	class:ExportVHDL
tabdialog	MainWindow.h	/^    QTabDialog* tabdialog;$/;"	m	class:MainWindow
tablebuilder	ExportStateTable.h	/^    TableBuilder* tablebuilder;$/;"	m	class:ExportStateTable
tbcopy	MainWindow.h	/^    QToolButton* tbcopy;$/;"	m	class:MainWindow
tbcut	MainWindow.h	/^    QToolButton* tbcut;$/;"	m	class:MainWindow
tbmachinesim	MainWindow.h	/^    QToolButton* tbmachinesim;$/;"	m	class:MainWindow
tbnew	MainWindow.h	/^    QToolButton* tbnew;$/;"	m	class:MainWindow
tbopen	MainWindow.h	/^    QToolButton* tbopen;$/;"	m	class:MainWindow
tbpan	MainWindow.h	/^    QToolButton* tbpan;$/;"	m	class:MainWindow
tbpaste	MainWindow.h	/^    QToolButton* tbpaste;$/;"	m	class:MainWindow
tbprint	MainWindow.h	/^    QToolButton* tbprint;$/;"	m	class:MainWindow
tbsave	MainWindow.h	/^    QToolButton* tbsave;$/;"	m	class:MainWindow
tbselect	MainWindow.h	/^    QToolButton* tbselect;$/;"	m	class:MainWindow
tbstatenew	MainWindow.h	/^    QToolButton* tbstatenew;$/;"	m	class:MainWindow
tbtransnew	MainWindow.h	/^    QToolButton* tbtransnew;$/;"	m	class:MainWindow
tbtransstraighten	MainWindow.h	/^    QToolButton* tbtransstraighten;$/;"	m	class:MainWindow
tbundo	MainWindow.h	/^    QToolButton* tbundo;$/;"	m	class:MainWindow
tbzoom	MainWindow.h	/^    QToolButton* tbzoom;$/;"	m	class:MainWindow
tbzoomin	MainWindow.h	/^    QToolButton* tbzoomin;$/;"	m	class:MainWindow
tbzoomout	MainWindow.h	/^    QToolButton* tbzoomout;$/;"	m	class:MainWindow
te_description	StatePropertiesDlg.h	/^    QTextEdit* te_description;$/;"	m	class:StatePropertiesDlg
te_description	TransitionPropertiesDlg.h	/^    QTextEdit* te_description;$/;"	m	class:TransitionPropertiesDlg
textLabel1	OptDisplayDlg.h	/^    QLabel* textLabel1;$/;"	m	class:OptDisplayDlg
textLabel1	StatePropertiesDlg.h	/^    QLabel* textLabel1;$/;"	m	class:StatePropertiesDlg
textLabel1_2	OptDisplayDlg.h	/^    QLabel* textLabel1_2;$/;"	m	class:OptDisplayDlg
textLabel2	OptDisplayDlg.h	/^    QLabel* textLabel2;$/;"	m	class:OptDisplayDlg
tfont	MachinePropertiesDlgImpl.h	/^    QFont tfont;$/;"	m	class:MachinePropertiesDlgImpl
tfont	Undo.h	/^    QFont tfont;$/;"	m	class:Undo
tidyUp	UndoBuffer.cpp	/^void UndoBuffer::tidyUp()$/;"	f	class:UndoBuffer
timer	SimulatorDlgImpl.h	/^    QTimer* timer;$/;"	m	class:SimulatorDlgImpl
tincont	XMLHandler.h	/^    bool tincont;$/;"	m	class:XMLHandler
tlist	GState.h	/^    QList<GTransition> tlist;$/;"	m	class:GState
tlist	Undo.h	/^    QList<GTransition> tlist;$/;"	m	class:Undo
tlist	Undo.h	/^  QList<GTransition> tlist;$/;"	m	struct:dtlist
tlist2	Undo.h	/^    QList<GTransition> tlist2;$/;"	m	class:Undo
to	XMLHandler.h	/^    QString to;$/;"	m	class:XMLHandler
toUpperNoWS	Utils.cpp	/^QString Utils::toUpperNoWS(QString s)$/;"	f	class:Utils
tocont	XMLHandler.h	/^    bool tocont;$/;"	m	class:XMLHandler
toggleEndState	State.h	/^    void toggleEndState() { endstate=!endstate; };$/;"	f	class:State
toggleSelect	GObject.h	/^    void toggleSelect() { selected=!selected; };$/;"	f	class:GObject
toolbar	MainWindow.h	/^    QToolBar* toolbar;$/;"	m	class:MainWindow
tooltip	ScrollView.h	/^    ToolTipSV* tooltip;$/;"	m	class:ScrollView
tooltipRect	ScrollView.cpp	/^QRect ScrollView::tooltipRect(const QPoint& p, QString& tinfo)$/;"	f	class:ScrollView
tooltips	Options.h	/^    bool tooltips;$/;"	m	class:Options
tooltipsClicked	OptDisplayDlg.ui.h	/^void OptDisplayDlg::tooltipsClicked()$/;"	f	class:OptDisplayDlg
tooltipsClicked	OptDisplayDlgImpl.cpp	/^void OptDisplayDlgImpl::tooltipsClicked()$/;"	f	class:OptDisplayDlgImpl
top	DRect.h	/^    double top() \/** Returns y coordinate of top border. *\/{ return y1; };$/;"	f	class:DRect
toutcont	XMLHandler.h	/^    bool toutcont;$/;"	m	class:XMLHandler
transEdit	MainWindow.cpp	/^void MainWindow::transEdit()$/;"	f	class:MainWindow
transNew	MainWindow.cpp	/^void MainWindow::transNew()$/;"	f	class:MainWindow
transStraighten	MainWindow.cpp	/^void MainWindow::transStraighten()$/;"	f	class:MainWindow
trans_props	TransitionManager.h	/^    TransitionPropertiesDlgImpl* trans_props;$/;"	m	class:TransitionManager
transition	Undo.h	/^    GTransition* transition;$/;"	m	class:Undo
transition	XMLHandler.h	/^    GTransition* transition;$/;"	m	class:XMLHandler
transition2	Undo.h	/^    GTransition* transition2;$/;"	m	class:Undo
transition_font	Machine.h	/^    QFont transition_font;$/;"	m	class:Machine
transmanager	MainWindow.h	/^    TransitionManager* transmanager;$/;"	m	class:MainWindow
transnewset	MainWindow.h	/^    QIconSet* transnewset;$/;"	m	class:MainWindow
transstraightenset	MainWindow.h	/^    QIconSet* transstraightenset;$/;"	m	class:MainWindow
tsel_list	Selection.h	/^    QList<GTransition> tsel_list;$/;"	m	class:Selection
ttype	XMLHandler.h	/^    int ttype;$/;"	m	class:XMLHandler
type	IOInfo.h	/^    IOType type;$/;"	m	class:IOInfo
type	Machine.h	/^    int type;$/;"	m	class:Machine
type	TransitionInfo.h	/^    int type;$/;"	m	class:TransitionInfo
type	Undo.h	/^    int type;$/;"	m	class:Undo
undo	UndoBuffer.cpp	/^void UndoBuffer::undo()$/;"	f	class:UndoBuffer
undoAddState	UndoBuffer.cpp	/^void UndoBuffer::undoAddState(Undo* u)$/;"	f	class:UndoBuffer
undoAddTransition	UndoBuffer.cpp	/^void UndoBuffer::undoAddTransition(Undo* u)$/;"	f	class:UndoBuffer
undoChangeInitialTransition	UndoBuffer.cpp	/^void UndoBuffer::undoChangeInitialTransition(Undo* u)$/;"	f	class:UndoBuffer
undoChangeMachine	UndoBuffer.cpp	/^void UndoBuffer::undoChangeMachine(Undo* u)$/;"	f	class:UndoBuffer
undoChangeState	UndoBuffer.cpp	/^void UndoBuffer::undoChangeState(Undo* u)$/;"	f	class:UndoBuffer
undoChangeTransition	UndoBuffer.cpp	/^void UndoBuffer::undoChangeTransition(Undo* u)$/;"	f	class:UndoBuffer
undoChangeTransitions	UndoBuffer.cpp	/^void UndoBuffer::undoChangeTransitions(Undo* u)$/;"	f	class:UndoBuffer
undoDeleteSelection	UndoBuffer.cpp	/^void UndoBuffer::undoDeleteSelection(Undo* u)$/;"	f	class:UndoBuffer
undoDeleteState	UndoBuffer.cpp	/^void UndoBuffer::undoDeleteState(Undo* u)$/;"	f	class:UndoBuffer
undoDeleteTransition	UndoBuffer.cpp	/^void UndoBuffer::undoDeleteTransition(Undo* u)$/;"	f	class:UndoBuffer
undoMoveMultiple	UndoBuffer.cpp	/^void UndoBuffer::undoMoveMultiple(Undo* u)$/;"	f	class:UndoBuffer
undoPaste	UndoBuffer.cpp	/^void UndoBuffer::undoPaste(Undo* u)$/;"	f	class:UndoBuffer
undoSetEndStates	UndoBuffer.cpp	/^void UndoBuffer::undoSetEndStates(Undo* u)$/;"	f	class:UndoBuffer
undoSetInitialState	UndoBuffer.cpp	/^void UndoBuffer::undoSetInitialState(Undo* u)$/;"	f	class:UndoBuffer
undobuffer	Project.h	/^    UndoBuffer* undobuffer;$/;"	m	class:Project
undolist	UndoBuffer.h	/^    QList<Undo> undolist;$/;"	m	class:UndoBuffer
undoset	MainWindow.h	/^    QIconSet* undoset;$/;"	m	class:MainWindow
undostatelist	XMLHandler.h	/^    QList<GState> undostatelist;$/;"	m	class:XMLHandler
undotranslist	XMLHandler.h	/^    QList<GTransition> undotranslist;$/;"	m	class:XMLHandler
updateAll	MainWindow.cpp	/^void MainWindow::updateAll()$/;"	f	class:MainWindow
updateBackground	ScrollView.cpp	/^void ScrollView::updateBackground()$/;"	f	class:ScrollView
updateBoundingRect	Selection.cpp	/^void Selection::updateBoundingRect(DRect& rect, GState* phantom)$/;"	f	class:Selection
updateCanvasSize	Machine.cpp	/^void Machine::updateCanvasSize(int x, int y)$/;"	f	class:Machine
updateCanvasSize	Machine.cpp	/^void Machine::updateCanvasSize(int x, int y, double scale)$/;"	f	class:Machine
updateCanvasSize	ScrollView.cpp	/^void ScrollView::updateCanvasSize()$/;"	f	class:ScrollView
updateDefaultInfo	IOInfo.h	/^    virtual void updateDefaultInfo(const IOInfoList& \/*other*\/) {};$/;"	f	class:IOInfo
updateDefaultInfo	IOInfoASCII.cpp	/^void IOInfoASCII::updateDefaultInfo(const IOInfoList& other)$/;"	f	class:IOInfoASCII
updateDefaultTransition	GState.cpp	/^void GState::updateDefaultTransition()$/;"	f	class:GState
updateDefaultTransitions	Machine.cpp	/^void Machine::updateDefaultTransitions()$/;"	f	class:Machine
updateInputsStr	SimulatorDlgImpl.cpp	/^void SimulatorDlgImpl::updateInputsStr()$/;"	f	class:SimulatorDlgImpl
updateMenuBar	MainWindow.cpp	/^void MainWindow::updateMenuBar()$/;"	f	class:MainWindow
updatePaste	MainWindow.cpp	/^void MainWindow::updatePaste()$/;"	f	class:MainWindow
updateStatusBar	MainWindow.cpp	/^void MainWindow::updateStatusBar()$/;"	f	class:MainWindow
updateTitleBar	MainWindow.cpp	/^void MainWindow::updateTitleBar()$/;"	f	class:MainWindow
useMooreClicked	ExportAHDLDlg.ui.h	/^void ExportAHDLDlg::useMooreClicked()$/;"	f	class:ExportAHDLDlg
useMooreClicked	ExportAHDLDlgImpl.cpp	/^void ExportAHDLDlgImpl::useMooreClicked()$/;"	f	class:ExportAHDLDlgImpl
useStdLogicClicked	ExportVHDLDlg.ui.h	/^void ExportVHDLDlg::useStdLogicClicked()$/;"	f	class:ExportVHDLDlg
useStdLogicClicked	ExportVHDLDlgImpl.cpp	/^void ExportVHDLDlgImpl::useStdLogicClicked()$/;"	f	class:ExportVHDLDlgImpl
use_moore	ExportAHDL.h	/^    bool use_moore;$/;"	m	class:ExportAHDL
use_moore	ExportAHDLDlgImpl.h	/^    bool use_moore;$/;"	m	class:ExportAHDLDlgImpl
use_std_logic	ExportVHDL.h	/^    bool use_std_logic;$/;"	m	class:ExportVHDL
valLineWidth	StatePropertiesDlgImpl.h	/^    QIntValidator* valLineWidth;$/;"	m	class:StatePropertiesDlgImpl
valRadius	StatePropertiesDlgImpl.h	/^    QIntValidator* valRadius;$/;"	m	class:StatePropertiesDlgImpl
validate	StatePropertiesDlg.ui.h	/^void StatePropertiesDlg::validate()$/;"	f	class:StatePropertiesDlg
validate	StatePropertiesDlgImpl.cpp	/^void StatePropertiesDlgImpl::validate()$/;"	f	class:StatePropertiesDlgImpl
validate	TransitionPropertiesDlg.ui.h	/^void TransitionPropertiesDlg::validate()$/;"	f	class:TransitionPropertiesDlg
validate	TransitionPropertiesDlgImpl.cpp	/^void TransitionPropertiesDlgImpl::validate()$/;"	f	class:TransitionPropertiesDlgImpl
ver_export	MainWindow.h	/^    ExportVerilogDlgImpl* ver_export;$/;"	m	class:MainWindow
ver_sync_reset	Options.h	/^    bool ver_sync_reset;$/;"	m	class:Options
version	Machine.h	/^    QString version;$/;"	m	class:Machine
version	XMLHandler.h	/^    double version;$/;"	m	class:XMLHandler
version_major	AppInfo.h	/^    int version_major; $/;"	m	class:AppInfo
version_minor	AppInfo.h	/^    int version_minor;$/;"	m	class:AppInfo
vhdl_export	MainWindow.h	/^    ExportVHDLDlgImpl* vhdl_export;$/;"	m	class:MainWindow
vhdl_stdlogic	Options.h	/^    bool vhdl_stdlogic;$/;"	m	class:Options
vhdl_symbolic_states	Options.h	/^    bool vhdl_symbolic_states;$/;"	m	class:Options
vhdl_sync_reset	Options.h	/^    bool vhdl_sync_reset;$/;"	m	class:Options
viewGrid	MainWindow.cpp	/^void MainWindow::viewGrid()$/;"	f	class:MainWindow
viewGrid	Options.h	/^    bool viewGrid;$/;"	m	class:Options
viewMealyIn	Options.h	/^    bool viewMealyIn;$/;"	m	class:Options
viewMealyInputs	MainWindow.cpp	/^void MainWindow::viewMealyInputs()$/;"	f	class:MainWindow
viewMealyOut	Options.h	/^    bool viewMealyOut;$/;"	m	class:Options
viewMealyOutputs	MainWindow.cpp	/^void MainWindow::viewMealyOutputs()$/;"	f	class:MainWindow
viewMoore	Options.h	/^    bool viewMoore;$/;"	m	class:Options
viewMooreOutputs	MainWindow.cpp	/^void MainWindow::viewMooreOutputs()$/;"	f	class:MainWindow
viewPan	MainWindow.cpp	/^void MainWindow::viewPan()$/;"	f	class:MainWindow
viewShadows	MainWindow.cpp	/^void MainWindow::viewShadows()$/;"	f	class:MainWindow
viewStateEncoding	MainWindow.cpp	/^void MainWindow::viewStateEncoding()$/;"	f	class:MainWindow
viewStateEncoding	Options.h	/^    bool viewStateEncoding;$/;"	m	class:Options
viewZoom	MainWindow.cpp	/^void MainWindow::viewZoom()$/;"	f	class:MainWindow
viewZoom100	MainWindow.cpp	/^void MainWindow::viewZoom100()$/;"	f	class:MainWindow
viewZoomIn	MainWindow.cpp	/^void MainWindow::viewZoomIn()$/;"	f	class:MainWindow
viewZoomOut	MainWindow.cpp	/^void MainWindow::viewZoomOut()$/;"	f	class:MainWindow
viewportPaintEvent	ScrollView.cpp	/^void ScrollView::viewportPaintEvent(QPaintEvent* pe)$/;"	f	class:ScrollView
w	ListBoxItems.h	/^    int w;$/;"	m	class:LBArrowFilled
w	ListBoxItems.h	/^    int w;$/;"	m	class:LBArrowFilledPointed
w	ListBoxItems.h	/^    int w;$/;"	m	class:LBArrowLine
w	ListBoxItems.h	/^    int w;$/;"	m	class:LBArrowWhite
w	ListBoxItems.h	/^    int w;$/;"	m	class:LBArrowWhitePointed
warningOk	Error.cpp	/^int Error::warningOk(QString text)$/;"	f	class:Error
warningOkCancel	Error.cpp	/^int Error::warningOkCancel(QString text)$/;"	f	class:Error
width	ListBoxItems.cpp	/^int LBArrowFilled::width(const QListBox* ) const$/;"	f	class:LBArrowFilled
width	ListBoxItems.cpp	/^int LBArrowFilledPointed::width(const QListBox* ) const$/;"	f	class:LBArrowFilledPointed
width	ListBoxItems.cpp	/^int LBArrowLine::width(const QListBox* ) const$/;"	f	class:LBArrowLine
width	ListBoxItems.cpp	/^int LBArrowWhite::width(const QListBox* ) const$/;"	f	class:LBArrowWhite
width	ListBoxItems.cpp	/^int LBArrowWhitePointed::width(const QListBox* ) const$/;"	f	class:LBArrowWhitePointed
window_list	MainControl.h	/^    QList<MainWindow*> window_list;$/;"	m	class:MainControl
writeActionFile	ExportRagel.cpp	/^int ExportRagel::writeActionFile(const char* filename, const char* ragelfile)$/;"	f	class:ExportRagel
writeArchitecture	ExportVHDL.cpp	/^void ExportVHDL::writeArchitecture()$/;"	f	class:ExportVHDL
writeClockProcess	ExportVHDL.cpp	/^void ExportVHDL::writeClockProcess()$/;"	f	class:ExportVHDL
writeClockProcess	ExportVerilog.cpp	/^void ExportVerilog::writeClockProcess()$/;"	f	class:ExportVerilog
writeEntity	ExportVHDL.cpp	/^void ExportVHDL::writeEntity()$/;"	f	class:ExportVHDL
writeEnvironment	ExportVHDL.cpp	/^void ExportVHDL::writeEnvironment()$/;"	f	class:ExportVHDL
writeHeader	Export.cpp	/^void Export::writeHeader(QString commentstart, QString commentend)$/;"	f	class:Export
writeIO	ExportAHDL.cpp	/^void ExportAHDL::writeIO()$/;"	f	class:ExportAHDL
writeIO	ExportKISS.cpp	/^void ExportKISS::writeIO()$/;"	f	class:ExportKISS
writeMain	ExportAHDL.cpp	/^void ExportAHDL::writeMain()$/;"	f	class:ExportAHDL
writeMain	ExportKISS.cpp	/^void ExportKISS::writeMain()$/;"	f	class:ExportKISS
writeMain	ExportRagel.cpp	/^void ExportRagel::writeMain()$/;"	f	class:ExportRagel
writeMain	ExportStateTable.cpp	/^void ExportStateTable::writeMain()$/;"	f	class:ExportStateTable
writeModule	ExportVerilog.cpp	/^void ExportVerilog::writeModule()$/;"	f	class:ExportVerilog
writeName	ExportAHDL.cpp	/^void ExportAHDL::writeName()$/;"	f	class:ExportAHDL
writeName	ExportKISS.cpp	/^void ExportKISS::writeName()$/;"	f	class:ExportKISS
writeName	ExportRagel.cpp	/^void ExportRagel::writeName()$/;"	f	class:ExportRagel
writeStateProcess	ExportVHDL.cpp	/^void ExportVHDL::writeStateProcess()$/;"	f	class:ExportVHDL
writeStateProcess	ExportVerilog.cpp	/^void ExportVerilog::writeStateProcess()$/;"	f	class:ExportVerilog
writeTransitions	ExportAHDL.cpp	/^void ExportAHDL::writeTransitions()$/;"	f	class:ExportAHDL
writeTransitions	ExportKISS.cpp	/^void ExportKISS::writeTransitions()$/;"	f	class:ExportKISS
writeTransitions	ExportRagel.cpp	/^void ExportRagel::writeTransitions()$/;"	f	class:ExportRagel
writeVariables	ExportAHDL.cpp	/^void ExportAHDL::writeVariables()$/;"	f	class:ExportAHDL
wscroll	MainWindow.h	/^    ScrollView* wscroll;$/;"	m	class:MainWindow
x1	DRect.h	/^    double x1;$/;"	m	class:DRect
x2	DRect.h	/^    double x2;$/;"	m	class:DRect
xpos	GObject.h	/^    double xpos;$/;"	m	class:GObject
y1	DRect.h	/^    double y1;$/;"	m	class:DRect
y2	DRect.h	/^    double y2;$/;"	m	class:DRect
ypos	GObject.h	/^    double ypos;$/;"	m	class:GObject
zoom	ScrollView.h	/^    Zoom* zoom;$/;"	m	class:ScrollView
zoom	StatusBar.h	/^    QLabel* zoom;$/;"	m	class:StatusBar
zoom	Zoom.cpp	/^void Zoom::zoom(ScrollView* sview, QPoint p, bool zoomin)$/;"	f	class:Zoom
zoomCursor	MainWindow.h	/^    QCursor* zoomCursor;$/;"	m	class:MainWindow
zoomIn	ScrollView.cpp	/^void ScrollView::zoomIn(QPoint p\/*=(-1,-1)*\/)$/;"	f	class:ScrollView
zoomOut	ScrollView.cpp	/^void ScrollView::zoomOut(QPoint p\/*=(-1,-1)*\/)$/;"	f	class:ScrollView
zoomReset	ScrollView.cpp	/^void ScrollView::zoomReset()$/;"	f	class:ScrollView
zoomset	MainWindow.h	/^    QIconSet* zoomset;$/;"	m	class:MainWindow
~DocStatus	DocStatus.cpp	/^DocStatus::~DocStatus()$/;"	f	class:DocStatus
~Export	Export.cpp	/^Export::~Export() $/;"	f	class:Export
~ExportAHDLDlg	ExportAHDLDlg.cpp	/^ExportAHDLDlg::~ExportAHDLDlg()$/;"	f	class:ExportAHDLDlg
~ExportAHDLDlgImpl	ExportAHDLDlgImpl.cpp	/^ExportAHDLDlgImpl::~ExportAHDLDlgImpl()$/;"	f	class:ExportAHDLDlgImpl
~ExportRagelDlg	ExportRagelDlg.cpp	/^ExportRagelDlg::~ExportRagelDlg()$/;"	f	class:ExportRagelDlg
~ExportRagelDlgImpl	ExportRagelDlgImpl.cpp	/^ExportRagelDlgImpl::~ExportRagelDlgImpl()$/;"	f	class:ExportRagelDlgImpl
~ExportStateTableDlg	ExportStateTableDlg.cpp	/^ExportStateTableDlg::~ExportStateTableDlg()$/;"	f	class:ExportStateTableDlg
~ExportStateTableDlgImpl	ExportStateTableDlgImpl.cpp	/^ExportStateTableDlgImpl::~ExportStateTableDlgImpl()$/;"	f	class:ExportStateTableDlgImpl
~ExportVHDLDlg	ExportVHDLDlg.cpp	/^ExportVHDLDlg::~ExportVHDLDlg()$/;"	f	class:ExportVHDLDlg
~ExportVHDLDlgImpl	ExportVHDLDlgImpl.cpp	/^ExportVHDLDlgImpl::~ExportVHDLDlgImpl()$/;"	f	class:ExportVHDLDlgImpl
~ExportVerilogDlg	ExportVerilogDlg.cpp	/^ExportVerilogDlg::~ExportVerilogDlg()$/;"	f	class:ExportVerilogDlg
~ExportVerilogDlgImpl	ExportVerilogDlgImpl.cpp	/^ExportVerilogDlgImpl::~ExportVerilogDlgImpl()$/;"	f	class:ExportVerilogDlgImpl
~FileIO	FileIO.cpp	/^FileIO::~FileIO()$/;"	f	class:FileIO
~GITransition	GITransition.cpp	/^GITransition::~GITransition()$/;"	f	class:GITransition
~GObject	GObject.cpp	/^GObject::~GObject()$/;"	f	class:GObject
~ICheck	ICheck.cpp	/^ICheck::~ICheck()$/;"	f	class:ICheck
~ICheckDlg	ICheckDlg.cpp	/^ICheckDlg::~ICheckDlg()$/;"	f	class:ICheckDlg
~ICheckDlgImpl	ICheckDlgImpl.cpp	/^ICheckDlgImpl::~ICheckDlgImpl()$/;"	f	class:ICheckDlgImpl
~IOInfo	IOInfo.cpp	/^IOInfo::~IOInfo()$/;"	f	class:IOInfo
~IOInfoASCII	IOInfoASCII.cpp	/^IOInfoASCII::~IOInfoASCII()$/;"	f	class:IOInfoASCII
~IOInfoBin	IOInfoBin.cpp	/^IOInfoBin::~IOInfoBin()$/;"	f	class:IOInfoBin
~IOInfoText	IOInfoText.cpp	/^IOInfoText::~IOInfoText()$/;"	f	class:IOInfoText
~Machine	Machine.cpp	/^Machine::~Machine()$/;"	f	class:Machine
~MachineManager	MachineManager.cpp	/^MachineManager::~MachineManager()$/;"	f	class:MachineManager
~MachinePropertiesDlg	MachinePropertiesDlg.cpp	/^MachinePropertiesDlg::~MachinePropertiesDlg()$/;"	f	class:MachinePropertiesDlg
~MachinePropertiesDlgImpl	MachinePropertiesDlgImpl.cpp	/^MachinePropertiesDlgImpl::~MachinePropertiesDlgImpl()$/;"	f	class:MachinePropertiesDlgImpl
~MainWindow	MainWindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~OptDisplayDlg	OptDisplayDlg.cpp	/^OptDisplayDlg::~OptDisplayDlg()$/;"	f	class:OptDisplayDlg
~OptDisplayDlgImpl	OptDisplayDlgImpl.cpp	/^OptDisplayDlgImpl::~OptDisplayDlgImpl()$/;"	f	class:OptDisplayDlgImpl
~OptGeneral	OptGeneral.cpp	/^OptGeneral::~OptGeneral()$/;"	f	class:OptGeneral
~OptGeneralDlg	OptGeneralDlg.cpp	/^OptGeneralDlg::~OptGeneralDlg()$/;"	f	class:OptGeneralDlg
~OptGeneralDlgImpl	OptGeneralDlgImpl.cpp	/^OptGeneralDlgImpl::~OptGeneralDlgImpl()$/;"	f	class:OptGeneralDlgImpl
~OptPrintingDlg	OptPrintingDlg.cpp	/^OptPrintingDlg::~OptPrintingDlg()$/;"	f	class:OptPrintingDlg
~OptPrintingDlgImpl	OptPrintingDlgImpl.cpp	/^OptPrintingDlgImpl::~OptPrintingDlgImpl()$/;"	f	class:OptPrintingDlgImpl
~PrintManager	PrintManager.cpp	/^PrintManager::~PrintManager()$/;"	f	class:PrintManager
~Project	Project.cpp	/^Project::~Project()$/;"	f	class:Project
~ScrollView	ScrollView.cpp	/^ScrollView::~ScrollView()$/;"	f	class:ScrollView
~Selection	Selection.cpp	/^Selection::~Selection()$/;"	f	class:Selection
~Simulator	Simulator.cpp	/^Simulator::~Simulator()$/;"	f	class:Simulator
~SimulatorDlg	SimulatorDlg.cpp	/^SimulatorDlg::~SimulatorDlg()$/;"	f	class:SimulatorDlg
~SimulatorDlgImpl	SimulatorDlgImpl.cpp	/^SimulatorDlgImpl::~SimulatorDlgImpl()$/;"	f	class:SimulatorDlgImpl
~State	State.cpp	/^State::~State()$/;"	f	class:State
~StatePropertiesDlg	StatePropertiesDlg.cpp	/^StatePropertiesDlg::~StatePropertiesDlg()$/;"	f	class:StatePropertiesDlg
~StatePropertiesDlgImpl	StatePropertiesDlgImpl.cpp	/^StatePropertiesDlgImpl::~StatePropertiesDlgImpl()$/;"	f	class:StatePropertiesDlgImpl
~StatusBar	StatusBar.cpp	/^StatusBar::~StatusBar()$/;"	f	class:StatusBar
~TableBuilder	TableBuilder.cpp	/^TableBuilder::~TableBuilder()$/;"	f	class:TableBuilder
~TableBuilderASCII	TableBuilderASCII.cpp	/^TableBuilderASCII::~TableBuilderASCII()$/;"	f	class:TableBuilderASCII
~TableBuilderHTML	TableBuilderHTML.cpp	/^TableBuilderHTML::~TableBuilderHTML()$/;"	f	class:TableBuilderHTML
~TableBuilderLatex	TableBuilderLatex.cpp	/^TableBuilderLatex::~TableBuilderLatex()$/;"	f	class:TableBuilderLatex
~Transition	Transition.cpp	/^Transition::~Transition()$/;"	f	class:Transition
~TransitionInfo	TransitionInfo.cpp	/^TransitionInfo::~TransitionInfo()$/;"	f	class:TransitionInfo
~TransitionInfoASCII	TransitionInfoASCII.cpp	/^TransitionInfoASCII::~TransitionInfoASCII()$/;"	f	class:TransitionInfoASCII
~TransitionInfoBin	TransitionInfoBin.cpp	/^TransitionInfoBin::~TransitionInfoBin()$/;"	f	class:TransitionInfoBin
~TransitionInfoText	TransitionInfoText.cpp	/^TransitionInfoText::~TransitionInfoText()$/;"	f	class:TransitionInfoText
~TransitionManager	TransitionManager.cpp	/^TransitionManager::~TransitionManager()$/;"	f	class:TransitionManager
~TransitionPropertiesDlg	TransitionPropertiesDlg.cpp	/^TransitionPropertiesDlg::~TransitionPropertiesDlg()$/;"	f	class:TransitionPropertiesDlg
~TransitionPropertiesDlgImpl	TransitionPropertiesDlgImpl.cpp	/^TransitionPropertiesDlgImpl::~TransitionPropertiesDlgImpl()$/;"	f	class:TransitionPropertiesDlgImpl
~Undo	Undo.cpp	/^Undo::~Undo()$/;"	f	class:Undo
~UndoBuffer	UndoBuffer.cpp	/^UndoBuffer::~UndoBuffer()$/;"	f	class:UndoBuffer
~WSpinBox	WSpinBox.cpp	/^WSpinBox::~WSpinBox()$/;"	f	class:WSpinBox
